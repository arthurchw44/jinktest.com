
C:\Users\User\Desktop\jink-demo\src\api\apiAuth.ts

import api from './axios';

export interface LoginRequest {
  username: string;
  password: string;
}

export interface UserResponse {
  id: string;
  username: string;
  fullname: string;
  role: 'admin' | 'teacher' | 'user' | 'student';
  isActive: boolean;
}

export interface LoginResponse {
  success: boolean;
  message: string;
  token: string;
  user: UserResponse;
}

export const apiLogin = async (payload: LoginRequest) => {
  const { data } = await api.post<LoginResponse>('/auth/login', payload);
  return data;
};

export const apiGetProfile = async () => {
  const { data } = await api.get<{ success: boolean; user: UserResponse }>(
    '/auth/profile'
  );
  return data.user;
};


export interface ChangePasswordRequest {
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordResponse {
  success: boolean;
  message: string;
}

export const apiChangeOwnPassword = async (payload: ChangePasswordRequest) => {
  // The endpoint and HTTP method are typical for this operation
  const { data } = await api.put<ChangePasswordResponse>(
    '/auth/password',
    payload
  );
  return data;
};

// Add this interface at the top with other interfaces
export interface LogoutAllResponse {
  success: boolean;
  message: string;
}

// Add this function after existing functions
export const apiLogoutAll = async (): Promise<LogoutAllResponse> => {
  const { data } = await api.post<LogoutAllResponse>('/auth/logout-all');
  return data;
};


// Add this interface at the top with other interfaces
export interface LogoutResponse {
  success: boolean;
  message: string;
}

// Add this function after existing functions
export const apiLogout = async (): Promise<LogoutResponse> => {
  const { data } = await api.post<LogoutResponse>('/auth/logout');
  return data;
};

C:\Users\User\Desktop\jink-demo\src\api\apiBulk.ts

// src/api/apiBulk.ts
import api from './axios';

export interface IBulkImportResult {
  imported: number;
  errorDetails: Array<{
    row: number;
    message: string;
    data?: any;
  }>;
}

export interface IExportFilters {
  role?: string;
  isActive?: boolean;
  createdAfter?: string;
  createdBefore?: string;
}

export const apiImportUsersCSV = async (csvFile: File): Promise<IBulkImportResult> => {
  const formData = new FormData();
  formData.append('csvFile', csvFile);
  
  const { data } = await api.post<IBulkImportResult>('/users/bulk/import', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });
  return data;
};

export const apiExportUsersCSV = async (filters?: IExportFilters): Promise<Blob> => {
  const response = await api.get('/users/bulk/export', {
    params: filters,
    responseType: 'blob',
  });
  return response.data;
};

export const apiDownloadCSVTemplate = async (): Promise<Blob> => {
  const response = await api.get('/users/bulk/template', {
    responseType: 'blob',
  });
  return response.data;
};

C:\Users\User\Desktop\jink-demo\src\api\apiGroups.ts

// src/api/apiGroups.ts
import api from './axios';

export interface IStudentGroup {
  _id?: string;
  name: string;
  description?: string;
  teacherUsername: string;
  studentUsernames: string[];
  isActive: boolean;
  createdAt?: Date;
  updatedAt?: Date;
  metadata?: {
    grade?: string;
    subject?: string;
    academicYear?: string;
  };
}

export interface IGroupCreate {
  name: string;
  description?: string;
  metadata?: {
    grade?: string;
    subject?: string;
    academicYear?: string;
  };
}

export interface IGroupUpdate {
  name?: string;
  description?: string;
  metadata?: {
    grade?: string;
    subject?: string;
    academicYear?: string;
  };
}

export const apiListGroups = async (): Promise<IStudentGroup[]> => {
  const { data } = await api.get<{ groups: IStudentGroup[] }>('/groups');
  return data.groups;
};

export const apiCreateGroup = async (groupData: IGroupCreate): Promise<IStudentGroup> => {
  const { data } = await api.post<{ group: IStudentGroup }>('/groups', groupData);
  return data.group;
};

export const apiGetGroup = async (groupId: string): Promise<IStudentGroup> => {
  const { data } = await api.get<{ group: IStudentGroup }>(`/groups/${groupId}`);
  return data.group;
};

export const apiUpdateGroup = async (groupId: string, groupData: IGroupUpdate): Promise<IStudentGroup> => {
  const { data } = await api.put<{ group: IStudentGroup }>(`/groups/${groupId}`, groupData);
  return data.group;
};

export const apiDeleteGroup = async (groupId: string): Promise<{ success: boolean }> => {
  const { data } = await api.delete<{ success: boolean }>(`/groups/${groupId}`);
  return data;
};

export const apiManageGroupMembers = async (
  groupId: string, 
  memberData: { add?: string[], remove?: string[] }
): Promise<IStudentGroup> => {
  const { data } = await api.put<{ group: IStudentGroup }>(`/groups/${groupId}/members`, memberData);
  return data.group;
};

C:\Users\User\Desktop\jink-demo\src\api\apiUsers.ts

// src/api/apiUsers.ts
import api from './axios';

export interface IUser {
  username: string;
  fullname: string;
  role: 'admin' | 'teacher' | 'student' | 'user';
  isActive: boolean;
  email?: string;
}

export interface IUserCreate {
  username: string;
  fullname: string;
  email?: string;
  password: string;
  role?: 'admin' | 'teacher' | 'student' | 'user';
  isActive?: boolean;
}

export interface IUserUpdate {
  username?: string;
  fullname?: string;
  email?: string;
  role?: 'admin' | 'teacher' | 'student' | 'user';
  isActive?: boolean;
}

// Existing functions (enhanced)
export const apiListUsers = async (): Promise<IUser[]> => {
  const { data } = await api.get<{ users: IUser[] }>('/users');
  return data.users;
};

export const apiGetUserByUsername = async (username: string): Promise<IUser> => {
  const { data } = await api.get<{ user: IUser }>(`/users/${username}`);
  return data.user;
};

// NEW: Enhanced user management functions
export const apiCreateUser = async (userData: IUserCreate): Promise<IUser> => {
  const { data } = await api.post<{ user: IUser }>('/users', userData);
  return data.user;
};

export const apiUpdateUser = async (username: string, userData: IUserUpdate): Promise<IUser> => {
  const { data } = await api.put<{ user: IUser }>(`/users/${username}`, userData);
  return data.user;
};

export const apiDeleteUser = async (username: string): Promise<{ success: boolean }> => {
  const { data } = await api.delete<{ success: boolean }>(`/users/${username}`);
  return data;
};



export const apiToggleUserStatus = async (username: string): Promise<IUser> => {
  const { data } = await api.patch<{ user: IUser }>(`/users/${username}/status`);
  return data.user;
};

export const apiResetPassword = async (username: string, newPassword: string): Promise<{ success: boolean }> => {
  const { data } = await api.put<{ success: boolean }>(`/users/${username}/password`, { newPassword });
  return data;
};

C:\Users\User\Desktop\jink-demo\src\api\axios.ts

// src/api/axios.ts
import axios from 'axios';
import { getAuthToken, clearAuthToken } from '../utils/auth';

export const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL ?? 'http://localhost:3000/api',
});

// Request interceptor: attach JWT token
api.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor: handle 401/403 by redirecting to login
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401 || error.response?.status === 403) {
      // Token expired or invalid - clear and redirect to login
      clearAuthToken();
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;

C:\Users\User\Desktop\jink-demo\src\assets\react.svg

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

C:\Users\User\Desktop\jink-demo\src\components\articles\ArticleNameInput.tsx

// src/components/articles/ArticleNameInput.tsx
import React, { useEffect } from 'react';
import { validateArticleName, suggestArticleNameFromTitle } from '../../utils/sentenceFragmentSplitter';

interface ArticleNameInputProps {
  value: string;
  onChange: (value: string) => void;
  title?: string; // For auto-suggestion
  className?: string;
}

export const ArticleNameInput: React.FC<ArticleNameInputProps> = ({
  value,
  onChange,
  title = '',
  className = ''
}) => {
  const isValid = validateArticleName(value);
  const suggestion = title ? suggestArticleNameFromTitle(title) : '';

  // Auto-suggest article name when title changes (only if current value is empty)
  useEffect(() => {
    if (title && !value && suggestion) {
      onChange(suggestion);
    }
  }, [title, value, suggestion, onChange]);

  const handleSuggestionClick = () => {
    if (suggestion) {
      onChange(suggestion);
    }
  };

  const getValidationMessage = () => {
    if (!value) return null;
    
    if (value.length < 3) return 'Article name must be at least 3 characters';
    if (value.length > 50) return 'Article name must be 50 characters or less';
    if (!/^[a-zA-Z0-9_\-\(\)]+$/.test(value)) {
      return 'Only letters, numbers, underscore, dash, and parentheses allowed';
    }
    return null;
  };

  const validationMessage = getValidationMessage();

  return (
    <div className="space-y-2">
      <label className="block text-sm font-medium text-gray-700">
        Article Name *
      </label>
      
      <div className="relative">
        <input
          type="text"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder="Enter unique article identifier..."
          className={`w-full p-3 border rounded-lg focus:outline-none transition-colors ${
            !value
              ? 'border-gray-300 focus:border-blue-500'
              : isValid
              ? 'border-green-300 focus:border-green-500 bg-green-50'
              : 'border-red-300 focus:border-red-500 bg-red-50'
          } ${className}`}
          required
        />
        
        {isValid && value && (
          <div className="absolute right-3 top-3 text-green-600">
            ??
          </div>
        )}
      </div>

      {/* Auto-suggestion */}
      {suggestion && suggestion !== value && (
        <div className="flex items-center space-x-2">
          <span className="text-xs text-gray-600">Suggested:</span>
          <button
            type="button"
            onClick={handleSuggestionClick}
            className="text-xs text-blue-600 hover:text-blue-800 underline"
          >
            {suggestion}
          </button>
        </div>
      )}

      {/* Validation message */}
      {validationMessage && (
        <div className="text-xs text-red-600">
          {validationMessage}
        </div>
      )}

      {/* Help text */}
      <div className="text-xs text-gray-500">
        Used for file naming and identification. Must be unique and contain only letters, 
        numbers, underscore, dash, or parentheses.
      </div>

      {/* Preview of generated filenames */}
      {value && isValid && (
        <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
          <div className="font-medium mb-1">Generated files:</div>
          <div>??{value}_full_audio.mp3</div>
          <div>??{value}_sentence_1.mp3, {value}_sentence_2.mp3, ...</div>
        </div>
      )}
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\articles\SentencePreview.tsx

// src/components/articles/SentencePreview.tsx
import React, { useState } from 'react';
import { splitFragmentAt, mergeFragments, findAllSplitPoints, validateFragmentMerge, FragmentEditor } from '../../utils/sentenceFragmentSplitter';

interface SentencePreviewProps {
  sentences: string[];
  articleName?: string;
  showSentenceIds?: boolean;
  editable?: boolean;
  onSentencesChange?: (sentences: string[]) => void;
  originalText?: string; // For validation
}

export const SentencePreview: React.FC<SentencePreviewProps> = ({
  sentences: initialSentences,
  articleName,
  showSentenceIds = false,
  editable = true,
  onSentencesChange,
  originalText
}) => {
  const [sentences, setSentences] = useState<string[]>(initialSentences);
  const [editor] = useState(() => new FragmentEditor(initialSentences));
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [editText, setEditText] = useState('');
  const [showSplitUI, setShowSplitUI] = useState<number | null>(null);

  // Update sentences when prop changes
  React.useEffect(() => {
    setSentences(initialSentences);
  }, [initialSentences]);

  const handleSentencesUpdate = (newSentences: string[]) => {
    setSentences(newSentences);
    onSentencesChange?.(newSentences);
  };

  const handleMerge = (index: number) => {
    if (index >= sentences.length - 1) return;
    const result = editor.merge(sentences, index);
    handleSentencesUpdate(result);
  };

  const handleSplit = (fragmentIndex: number, splitPosition: number) => {
    const result = editor.split(sentences, fragmentIndex, splitPosition);
    handleSentencesUpdate(result);
    setShowSplitUI(null);
  };

  const handleUndo = () => {
    const result = editor.undo();
    if (result) {
      handleSentencesUpdate(result);
    }
  };

  const handleRedo = () => {
    const result = editor.redo();
    if (result) {
      handleSentencesUpdate(result);
    }
  };

  const startEditing = (index: number) => {
    setEditingIndex(index);
    setEditText(sentences[index]);
  };

  const saveEdit = () => {
    if (editingIndex === null) return;
    const newSentences = [...sentences];
    newSentences[editingIndex] = editText.trim();
    handleSentencesUpdate(newSentences);
    setEditingIndex(null);
  };

  const cancelEdit = () => {
    setEditingIndex(null);
    setEditText('');
  };

  const WordSplitter: React.FC<{ text: string; fragmentIndex: number }> = ({ text, fragmentIndex }) => {
    const splitPoints = findAllSplitPoints(text);
    const words = text.split(/(\s+)/);
    
    let charPosition = 0;
    const elements: React.ReactNode[] = [];
    
    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      const isSpace = i % 2 === 1;
      
      if (!isSpace && i > 0) {
        // Add split button before each word (except the first)
        const splitPoint = splitPoints.find(sp => sp.position === charPosition);
        if (splitPoint) {
          elements.push(
            <button
              key={`split-${charPosition}`}
              onClick={() => handleSplit(fragmentIndex, charPosition)}
              className="inline-block w-px h-4 bg-blue-400 hover:bg-blue-600 hover:w-0.5 transition-all cursor-pointer mx-0.5"
              title={splitPoint.reason}
            />
          );
        }
      }
      
      elements.push(
        <span key={`word-${i}`} className={isSpace ? '' : 'hover:bg-yellow-100'}>
          {word}
        </span>
      );
      
      charPosition += word.length;
    }
    
    return <span className="relative">{elements}</span>;
  };

  const getFragmentStats = (fragment: string) => {
    const wordCount = fragment.split(/\s+/).filter(w => w.length > 0).length;
    return {
      words: wordCount,
      chars: fragment.length,
      isLong: wordCount > 20,
      isShort: wordCount < 3 && wordCount > 0
    };
  };

  const validateMergeResult = () => {
    if (!originalText) return null;
    const isValid = validateFragmentMerge(sentences, originalText);
    return isValid;
  };

  const mergeValidation = validateMergeResult();

  return (
    <div className="space-y-4">
      {/* Control Panel */}
      {editable && (
        <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
          <div className="flex items-center space-x-3">
            <button
              onClick={handleUndo}
              disabled={!editor.canUndo()}
              className="px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              ??Undo
            </button>
            <button
              onClick={handleRedo}
              disabled={!editor.canRedo()}
              className="px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              ??Redo
            </button>
            <div className="text-sm text-gray-600">
              {sentences.length} fragments
            </div>
          </div>
          
          {/* Merge Validation */}
          {mergeValidation !== null && (
            <div className={`text-sm px-3 py-1 rounded ${
              mergeValidation 
                ? 'bg-green-100 text-green-700' 
                : 'bg-red-100 text-red-700'
            }`}>
              {mergeValidation 
                ? '??Fragments can recreate original text' 
                : '??Fragments may not recreate original text exactly'}
            </div>
          )}
        </div>
      )}

      {/* Fragments */}
      <div className="space-y-3">
        {sentences.map((sentence, index) => {
          const stats = getFragmentStats(sentence);
          const isEditing = editingIndex === index;
          const isShowingSplit = showSplitUI === index;
          
          return (
            <div
              key={index}
              className={`p-4 border rounded-lg transition-all ${
                stats.isLong ? 'border-yellow-300 bg-yellow-50' :
                stats.isShort ? 'border-blue-300 bg-blue-50' :
                'border-gray-200 bg-white'
              } ${isShowingSplit ? 'ring-2 ring-blue-500' : ''}`}
            >
              {/* Fragment Header */}
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center space-x-2">
                  {showSentenceIds && (
                    <span className="text-xs font-mono bg-gray-100 px-2 py-1 rounded">
                      #{index + 1}
                    </span>
                  )}
                  <span className="text-xs text-gray-500">
                    {stats.words} words, {stats.chars} chars
                  </span>
                  {stats.isLong && <span className="text-xs text-yellow-600">??Long</span>}
                  {stats.isShort && <span className="text-xs text-blue-600">??Short</span>}
                </div>
                
                {editable && !isEditing && (
                  <div className="flex items-center space-x-1">
                    {/* Split Button */}
                    <button
                      onClick={() => setShowSplitUI(isShowingSplit ? null : index)}
                      className={`text-xs px-2 py-1 rounded transition-colors ${
                        isShowingSplit 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                      }`}
                      title="Click to show split points"
                    >
                      ?��? Split
                    </button>
                    
                    {/* Merge Button */}
                    {index < sentences.length - 1 && (
                      <button
                        onClick={() => handleMerge(index)}
                        className="text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200"
                        title="Merge with next fragment"
                      >
                        ?? Merge
                      </button>
                    )}
                    
                    {/* Edit Button */}
                    <button
                      onClick={() => startEditing(index)}
                      className="text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
                    >
                      ?��? Edit
                    </button>
                  </div>
                )}
              </div>

              {/* Fragment Content */}
              <div className="text-sm text-gray-800">
                {isEditing ? (
                  <div className="space-y-2">
                    <textarea
                      value={editText}
                      onChange={(e) => setEditText(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded focus:border-blue-500 focus:outline-none"
                      rows={3}
                      autoFocus
                    />
                    <div className="flex space-x-2">
                      <button
                        onClick={saveEdit}
                        className="px-3 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600"
                      >
                        Save
                      </button>
                      <button
                        onClick={cancelEdit}
                        className="px-3 py-1 bg-gray-500 text-white rounded text-xs hover:bg-gray-600"
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                ) : isShowingSplit ? (
                  <div className="space-y-2">
                    <div className="text-xs text-blue-600 mb-2">
                      ?? Click on the blue lines to split at that position
                    </div>
                    <div className="leading-relaxed">
                      <WordSplitter text={sentence} fragmentIndex={index} />
                    </div>
                  </div>
                ) : (
                  <p className="leading-relaxed">{sentence}</p>
                )}
              </div>
              
              {/* Audio Preview (if available) */}
              {articleName && (
                <div className="mt-2 pt-2 border-t border-gray-100">
                  <div className="text-xs text-gray-500">
                    Audio: {articleName}_sentence_{index + 1}.mp3
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Summary */}
      <div className="text-xs text-gray-500 text-center pt-2 border-t">
        Total: {sentences.length} fragments, {' '}
        {sentences.reduce((sum, s) => sum + s.split(/\s+/).filter(w => w.length > 0).length, 0)} words
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\articles\TextInput.tsx

// src/components/articles/TextInput.tsx
import React from 'react';
import { getFragmentStats } from '../../utils/sentenceFragmentSplitter';

interface TextInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
}

export const TextInput: React.FC<TextInputProps> = ({
  value,
  onChange,
  placeholder = "Enter your article text here...",
  className = ""
}) => {
  const getStats = () => {
    if (!value.trim()) {
      return {
        text: { characters: 0, words: 0, estimatedReadingTime: 0 },
        fragments: { 
          count: 0, 
          validation: { 
            totalFragments: 0,
            optimalRange: false,
            longFragments: 0,
            shortFragments: 0,
            emptyFragments: 0,
            averageWordCount: 0
          }, 
          list: [] 
        },
        error: null
      };
    }

    try {
      return { ...getFragmentStats(value), error: null };
    } catch (error) {
      return {
        text: { 
          characters: value.length, 
          words: value.split(/\s+/).filter(w => w.length > 0).length, 
          estimatedReadingTime: Math.ceil(value.split(/\s+/).filter(w => w.length > 0).length / 200) 
        },
        fragments: { 
          count: 0, 
          validation: { 
            totalFragments: 0,
            optimalRange: false,
            longFragments: 0,
            shortFragments: 0,
            emptyFragments: 0,
            averageWordCount: 0
          }, 
          list: [] 
        },
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  };

  const stats = getStats();

  const getWordCountClass = () => {
    const count = stats.text.words;
    if (count === 0) return 'text-gray-500';
    if (count < 20) return 'text-red-600'; // Below minimum
    if (count > 1500) return 'text-red-600'; // Above maximum  
    if (count < 50) return 'text-yellow-600'; // Very short but acceptable
    if (count > 1000) return 'text-yellow-600'; // Long but acceptable
    return 'text-green-600';
  };

  const getFragmentCountClass = () => {
    const count = stats.fragments.count;
    if (count === 0) return 'text-gray-500';
    if (count < 10) return 'text-yellow-600';
    if (count > 40) return 'text-yellow-600';
    return 'text-green-600';
  };

  const hasError = !!stats.error;
  const canProceed = !hasError && stats.text.words >= 20 && stats.text.words <= 1500;

  return (
    <div className="space-y-4">
      {/* Main Text Area */}
      <div className="relative">
        <textarea
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          className={`w-full p-4 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none resize-none transition-colors ${
            hasError ? 'border-red-300 bg-red-50' : ''
          } ${className}`}
          rows={12}
        />
        
        {/* Character count overlay */}
        <div className="absolute bottom-2 right-2 text-xs text-gray-400 bg-white px-2 py-1 rounded">
          {stats.text.characters} chars
        </div>
      </div>

      {/* Error Display */}
      {hasError && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center space-x-2">
            <span className="text-red-600">??/span>
            <span className="text-sm text-red-700 font-medium">Article Validation Error</span>
          </div>
          <div className="text-sm text-red-600 mt-1">{stats.error}</div>
        </div>
      )}

      {/* Statistics Panel */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Text Statistics */}
        <div className="bg-white p-4 rounded-lg border shadow-sm">
          <h4 className="font-medium text-gray-700 mb-3">Text Statistics</h4>
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Word Count:</span>
              <span className={`font-mono font-bold ${getWordCountClass()}`}>
                {stats.text.words}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Characters:</span>
              <span className="font-mono text-sm">{stats.text.characters}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Est. Reading Time:</span>
              <span className="font-mono text-sm">{stats.text.estimatedReadingTime}min</span>
            </div>
          </div>
        </div>

        {/* Fragment Statistics */}
        <div className="bg-white p-4 rounded-lg border shadow-sm">
          <h4 className="font-medium text-gray-700 mb-3">Fragment Analysis</h4>
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Fragments:</span>
              <span className={`font-mono font-bold ${getFragmentCountClass()}`}>
                {stats.fragments.count}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Avg Words:</span>
              <span className="font-mono text-sm">{stats.fragments.validation.averageWordCount}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Long Fragments:</span>
              <span className={`font-mono text-sm ${
                stats.fragments.validation.longFragments > 0 ? 'text-yellow-600' : 'text-green-600'
              }`}>
                {stats.fragments.validation.longFragments}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Optimal Range:</span>
              <span className={`font-mono text-sm ${
                stats.fragments.validation.optimalRange ? 'text-green-600' : 'text-yellow-600'
              }`}>
                {stats.fragments.validation.optimalRange ? '??Yes' : '??No'}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Guidelines */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-medium text-blue-800 mb-2">Article Guidelines</h4>
        <div className="text-sm text-blue-700 space-y-1">
          <div className="flex items-center space-x-2">
            <span className={stats.text.words >= 20 && stats.text.words <= 1500 ? '?? : '??}>
            </span>
            <span>Word count: 20-1500 words (currently {stats.text.words})</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className={stats.fragments.validation.optimalRange ? '?? : '?��?'}>
            </span>
            <span>Optimal fragments: 15-25 (currently {stats.fragments.count})</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className={stats.fragments.validation.longFragments === 0 ? '?? : '?��?'}>
            </span>
            <span>Long fragments (&gt;20 words): {stats.fragments.validation.longFragments}</span>
          </div>
        </div>
        
        {!hasError && stats.text.words > 0 && (
          <div className="mt-3 pt-3 border-t border-blue-200">
            <div className="text-xs text-blue-600">
              ?�� <strong>Tip:</strong> After creating the article, you can manually split and merge fragments using the editor.
              {stats.fragments.validation.longFragments > 0 && 
                " Some fragments are long - you can split them for better dictation pacing."
              }
            </div>
          </div>
        )}
      </div>

      {/* Validation Status */}
      {!hasError && (
        <div className={`p-3 rounded-lg border ${
          canProceed 
            ? 'bg-green-50 border-green-200' 
            : 'bg-yellow-50 border-yellow-200'
        }`}>
          <div className="flex items-center space-x-2">
            <span className="text-lg">
              {canProceed ? '?? : '?��?'}
            </span>
            <span className={`text-sm font-medium ${
              canProceed ? 'text-green-800' : 'text-yellow-800'
            }`}>
              {canProceed 
                ? 'Article is ready to be processed!' 
                : 'Article needs adjustments before processing'
              }
            </span>
          </div>
          {!canProceed && (
            <div className={`text-sm mt-2 ${
              stats.text.words < 20 || stats.text.words > 1500 ? 'text-yellow-700' : 'text-green-700'
            }`}>
              {stats.text.words < 20 && 'Article is too short. Add more content.'}
              {stats.text.words > 1500 && 'Article is too long. Consider shortening or splitting into multiple articles.'}
              {stats.text.words >= 20 && stats.text.words <= 1500 && 'Ready to proceed - you can fine-tune fragments after creation.'}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\auth\LogoutAllConfirmModal.tsx

import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { LoadingSpinner } from '../common/LoadingSpinner';

interface LogoutAllConfirmModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => Promise<void>;
}

export const LogoutAllConfirmModal: React.FC<LogoutAllConfirmModalProps> = ({
  isOpen,
  onClose,
  onConfirm,
}) => {
  const { user } = useAuth();
  const [isLoggingOut, setIsLoggingOut] = useState(false);

  const handleConfirm = async () => {
    setIsLoggingOut(true);
    try {
      await onConfirm();
    } catch (error) {
      console.error('Logout all failed:', error);
    } finally {
      setIsLoggingOut(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="flex-shrink-0 w-10 h-10 mx-auto bg-orange-100 rounded-full flex items-center justify-center">
              <svg className="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-4a2 2 0 00-2-2H6a2 2 0 00-2 2v4a2 2 0 002 2zM11 5V3a2 2 0 112 0v2M7 7h10" />
              </svg>
            </div>
            <div className="ml-4">
              <h3 className="text-lg font-medium text-gray-900">Logout All Devices</h3>
              <p className="text-sm text-gray-500">End all active sessions</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={isLoggingOut}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div className="p-6">
          <div className="mb-4">
            <p className="text-gray-700 mb-3">
              Are you sure you want to logout from all devices signed in to{' '}
              <span className="font-semibold">{user?.fullname || 'your account'}</span>?
            </p>

            <div className="bg-blue-50 border border-blue-200 rounded-md p-3 mb-4">
              <div className="flex">
                <svg className="w-5 h-5 text-blue-400 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
                <div className="text-sm text-blue-800">
                  <p className="font-medium">This will:</p>
                  <ul className="mt-1 list-disc list-inside space-y-1">
                    <li>End your session on all devices and browsers</li>
                    <li>Require you to log in again everywhere</li>
                    <li>Invalidate all existing login tokens</li>
                    <li>Take effect immediately</li>
                  </ul>
                </div>
              </div>
            </div>

            <p className="text-sm text-gray-600">
              This is useful if you think someone else may have access to your account or if you want to ensure all old sessions are terminated.
            </p>
          </div>

          <div className="flex justify-end space-x-3">
            <button
              onClick={onClose}
              disabled={isLoggingOut}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              onClick={handleConfirm}
              disabled={isLoggingOut}
              className="px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {isLoggingOut ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Logging out...</span>
                </>
              ) : (
                'Logout All Devices'
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\bulk\BulkExport.tsx

// src/components/bulk/BulkExport.tsx
import React, { useState } from 'react';
import { useExportUsersCSV } from '../../hooks/useBulk';
import type { IExportFilters } from '../../api/apiBulk';

interface BulkExportProps {
  onCancel: () => void;
}

export const BulkExport: React.FC<BulkExportProps> = ({ onCancel }) => {
  const exportMutation = useExportUsersCSV();
  const [filters, setFilters] = useState<IExportFilters>({
    role: '',
    isActive: undefined,
    createdAfter: '',
    createdBefore: ''
  });

  const handleExport = async () => {
    try {
      const blob = await exportMutation.mutateAsync(filters);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `users-export-${new Date().toISOString().slice(0, 10)}.csv`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      onCancel();
    } catch (error) {
      alert('Export failed. Please try again later.');
    }
  };

  return (
    <div className="p-4">
      <div className="mb-4">
        <label className="mr-3">
          Role Filter:
          <select
            value={filters.role || ''}
            onChange={e => setFilters(f => ({ ...f, role: e.target.value || undefined }))}
            className="ml-2 border"
          >
            <option value="">All</option>
            <option value="admin">Admin</option>
            <option value="teacher">Teacher</option>
            <option value="student">Student</option>
            <option value="user">User</option>
          </select>
        </label>
      </div>
      <div className="mb-4">
        <label className="mr-3">
          Status:
          <select
            value={
              filters.isActive === undefined
                ? ''
                : filters.isActive
                ? 'true'
                : 'false'
            }
            onChange={e =>
              setFilters(f => ({
                ...f,
                isActive: e.target.value === ''
                  ? undefined
                  : e.target.value === 'true'
              }))
            }
            className="ml-2 border"
          >
            <option value="">All</option>
            <option value="true">Active Only</option>
            <option value="false">Inactive Only</option>
          </select>
        </label>
      </div>
      <button
        onClick={handleExport}
        disabled={exportMutation.isPending}
        className="mr-2 px-4 py-2 bg-green-600 text-white rounded"
      >
        Export CSV
      </button>
      <button
        onClick={onCancel}
        disabled={exportMutation.isPending}
        className="px-4 py-2 border border-gray-400 rounded"
      >
        Cancel
      </button>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\bulk\BulkImport.tsx

import React, { useState, useRef } from 'react';
import { useImportUsersCSV } from '../../hooks/useBulk';
import { LoadingSpinner } from '../common/LoadingSpinner';

interface BulkImportProps {
  onSuccess: () => void;
  onCancel: () => void;
}

export const BulkImport: React.FC<BulkImportProps> = ({
  onSuccess,
  onCancel
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [dragOver, setDragOver] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const importMutation = useImportUsersCSV();

  const handleFileSelect = (file: File) => {
    if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {
      alert('Please select a CSV file');
      return;
    }
    setSelectedFile(file);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleImport = async () => {
    if (!selectedFile) return;

    try {
      const result = await importMutation.mutateAsync(selectedFile);
      
      // console.log(result);

      if (result.errorDetails.length > 0) {
        alert(`Import completed with issues:\n- Imported: ${result.imported}\n- Errors: ${result.errorDetails.length}\n\nCheck console for error details.`);
        console.log('Import errors:', result.errorDetails);
      } else {
        alert(`Successfully imported ${result.imported} users!`);
      }
      
      onSuccess();
    } catch (error) {
      console.error('Import failed:', error);
      alert('Import failed. Please check the file format and try again.');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h2 className="text-xl font-bold mb-4">Bulk Import Users</h2>

        <div
          className={`border-2 border-dashed rounded-lg p-8 text-center mb-4 transition-colors ${
            dragOver
              ? 'border-blue-400 bg-blue-50'
              : selectedFile
              ? 'border-green-400 bg-green-50'
              : 'border-gray-300'
          }`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          {selectedFile ? (
            <div>
              <div className="text-green-600 mb-2">
                <svg className="w-12 h-12 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </div>
              <p className="font-medium text-green-700">{selectedFile.name}</p>
              <p className="text-sm text-gray-500">{(selectedFile.size / 1024).toFixed(1)} KB</p>
              <button
                onClick={() => setSelectedFile(null)}
                className="text-sm text-red-600 hover:text-red-800 mt-2"
              >
                Remove file
              </button>
            </div>
          ) : (
            <div>
              <div className="text-gray-400 mb-2">
                <svg className="w-12 h-12 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </div>
              <p className="text-gray-600">Drag & drop your CSV file here</p>
              <p className="text-sm text-gray-500 mt-1">or</p>
              <button
                onClick={() => fileInputRef.current?.click()}
                className="text-blue-600 hover:text-blue-800 font-medium"
              >
                browse files
              </button>
              <input
                ref={fileInputRef}
                type="file"
                accept=".csv"
                onChange={handleFileInputChange}
                className="hidden"
              />
            </div>
          )}
        </div>

        <div className="text-sm text-gray-600 mb-4">
          <p><strong>CSV Format:</strong> username, fullname, role, password (optional)</p>
          <p>Supported roles: admin, teacher, student, user</p>
        </div>

        {importMutation.isPending && (
          <div className="mb-4">
            <LoadingSpinner message="Importing users..." size="small" />
          </div>
        )}

        <div className="flex justify-end space-x-2">
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
            disabled={importMutation.isPending}
          >
            Cancel
          </button>
          <button
            onClick={handleImport}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
            disabled={!selectedFile || importMutation.isPending}
          >
            {importMutation.isPending ? 'Importing...' : 'Import Users'}
          </button>
        </div>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\bulk\CSVTemplateDownload.tsx

import React from 'react';
import { useDownloadCSVTemplate } from '../../hooks/useBulk';

export const CSVTemplateDownload: React.FC = () => {
  const downloadTemplateMutation = useDownloadCSVTemplate();

  const handleDownload = async () => {
    try {
      const blob = await downloadTemplateMutation.mutateAsync();
      
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'users-import-template.csv';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Template download failed:', error);
      alert('Template download failed. Please try again.');
    }
  };

  return (
    <button
      onClick={handleDownload}
      className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
      disabled={downloadTemplateMutation.isPending}
    >
      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      {downloadTemplateMutation.isPending ? 'Downloading...' : 'Download Template'}
    </button>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\common\ConfirmDialog.tsx

import React from 'react';

interface ConfirmDialogProps {
  isOpen: boolean;
  title: string;
  message: string;
  confirmText?: string;
  cancelText?: string;
  onConfirm: () => void;
  onCancel: () => void;
  type?: 'danger' | 'warning' | 'info';
}

export const ConfirmDialog: React.FC<ConfirmDialogProps> = ({
  isOpen,
  title,
  message,
  confirmText = 'Confirm',
  cancelText = 'Cancel',
  onConfirm,
  onCancel,
  type = 'warning'
}) => {
  if (!isOpen) return null;

  const typeStyles = {
    danger: 'bg-red-600 hover:bg-red-700',
    warning: 'bg-yellow-600 hover:bg-yellow-700',
    info: 'bg-blue-600 hover:bg-blue-700'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h3 className="text-lg font-semibold mb-2">{title}</h3>
        <p className="text-gray-600 mb-4">{message}</p>
        <div className="flex justify-end space-x-2">
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
          >
            {cancelText}
          </button>
          <button
            onClick={onConfirm}
            className={`px-4 py-2 text-white rounded-md ${typeStyles[type]}`}
          >
            {confirmText}
          </button>
        </div>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\common\LoadingSpinner.tsx

import React from 'react';

interface LoadingSpinnerProps {
  message?: string;
  size?: 'small' | 'medium' | 'large';
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  message = 'Loading...',
  size = 'medium'
}) => {
  const sizeClasses = {
    small: 'w-4 h-4',
    medium: 'w-8 h-8', 
    large: 'w-12 h-12'
  };

  return (
    <div className="flex flex-col items-center justify-center p-4">
      <div className={`animate-spin rounded-full border-2 border-gray-300 border-t-blue-600 ${sizeClasses[size]}`}></div>
      {message && <p className="mt-2 text-sm text-gray-600">{message}</p>}
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\common\RoleBasedComponent.tsx

import React from 'react';
import { useAuth } from '../../context/AuthContext';

interface RoleBasedComponentProps {
  allowedRoles: Array<'admin' | 'teacher' | 'student' | 'user'>;
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export const RoleBasedComponent: React.FC<RoleBasedComponentProps> = ({
  allowedRoles,
  children,
  fallback = null
}) => {
  const { user } = useAuth();

  if (!user || !allowedRoles.includes(user.role)) {
    return <>{fallback}</>;
  }

  return <>{children}</>;
};

C:\Users\User\Desktop\jink-demo\src\components\groups\GroupDetail.tsx

// src/components/groups/GroupDetail.tsx
import React, { useState } from 'react';
import { useUsers } from '../../hooks/useUsers';
import { useAuth } from '../../context/AuthContext';
import { useManageGroupMembers } from '../../hooks/useGroups';
import { RoleBasedComponent } from '../common/RoleBasedComponent';
import { ConfirmDialog } from '../common/ConfirmDialog';
import { MemberPicker } from './MemberPicker';
import type { IStudentGroup } from '../../api/apiGroups';

interface GroupDetailProps {
  group: IStudentGroup;
  onClose: () => void;
  onEdit: () => void;
}

export const GroupDetail: React.FC<GroupDetailProps> = ({
  group,
  onClose,
  onEdit
}) => {
  const { user } = useAuth();
  const { data: allUsers } = useUsers();
  const manageGroupMembers = useManageGroupMembers();
  const [showMemberPicker, setShowMemberPicker] = useState(false);
  const [removeDialog, setRemoveDialog] = useState<{
    isOpen: boolean;
    username: string | null;
    fullname: string | null;
  }>({ isOpen: false, username: null, fullname: null });

  // Filter users for members in this group
  const groupMembers = allUsers?.filter(
    u => group.studentUsernames?.includes(u.username)
  ) || [];

  const canManage =
    user &&
    (user.role === 'admin' ||
      (user.role === 'teacher' && user.username === group.teacherUsername));

  const handleRemoveConfirm = async () => {
    if (removeDialog.username) {
      await manageGroupMembers.mutateAsync({
        groupId: group._id!,
        memberData: { remove: [removeDialog.username] }
      });
      setRemoveDialog({ isOpen: false, username: null, fullname: null });
    }
  };

  return (
    <>
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded p-6 max-w-4xl w-full max-h-[90vh] overflow-auto">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">{group.name}</h2>
            <button onClick={onClose} aria-label="Close">&times;</button>
          </div>
          <p>{group.description}</p>
          <div className="grid grid-cols-2 gap-4 my-4">
            <span>Teacher: {group.teacherUsername}</span>
            {group.metadata?.grade && <span>Grade: {group.metadata.grade}</span>}
            {group.metadata?.subject && <span>Subject: {group.metadata.subject}</span>}
            {group.metadata?.academicYear && <span>Year: {group.metadata.academicYear}</span>}
          </div>
          <div className="mb-4">
            <div className="flex justify-between mb-2">
              <h3 className="font-medium">Members</h3>
              <RoleBasedComponent allowedRoles={['admin', 'teacher']}>
                {canManage && (
                  <button onClick={() => setShowMemberPicker(true)} className="text-blue-600">
                    Add Students
                  </button>
                )}
              </RoleBasedComponent>
            </div>
            <ul>
              {groupMembers.map(m => (
                <li key={m.username} className="flex justify-between items-center">
                  <span>
                    {m.fullname} ({m.username})
                  </span>
                  {canManage && (
                    <button
                      className="text-red-600 text-sm"
                      onClick={() => setRemoveDialog({
                        isOpen: true,
                        username: m.username,
                        fullname: m.fullname
                      })}
                    >
                      Remove
                    </button>
                  )}
                </li>
              ))}
              {groupMembers.length === 0 && <li className="text-gray-500">No students yet.</li>}
            </ul>
          </div>
          <div className="mt-4 flex justify-end space-x-2">
            <button onClick={onClose} className="border px-4 py-2 rounded">Close</button>
            {canManage && (
              <button onClick={onEdit} className="bg-blue-600 text-white px-4 py-2 rounded">Edit Group</button>
            )}
          </div>
        </div>
      </div>
      {/* MemberPicker Modal */}
      {showMemberPicker && (
        <MemberPicker
          group={group}
          onSuccess={() => setShowMemberPicker(false)}
          onCancel={() => setShowMemberPicker(false)}
        />
      )}
      {/* Remove member confirmation */}
      <ConfirmDialog
        isOpen={removeDialog.isOpen}
        title="Remove Student"
        message={`Are you sure you want to remove "${removeDialog.fullname}" from this group?`}
        confirmText="Remove"
        cancelText="Cancel"
        type="warning"
        onConfirm={handleRemoveConfirm}
        onCancel={() => setRemoveDialog({ isOpen: false, username: null, fullname: null })}
      />
    </>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\groups\GroupForm.tsx

import React, { useState, useEffect } from 'react';
import { useCreateGroup, useUpdateGroup } from '../../hooks/useGroups';
import type { IStudentGroup, IGroupCreate, IGroupUpdate } from '../../api/apiGroups';

interface GroupFormProps {
  group?: IStudentGroup;
  onSuccess: () => void;
  onCancel: () => void;
}

export const GroupForm: React.FC<GroupFormProps> = ({
  group,
  onSuccess,
  onCancel
}) => {
  const createGroupMutation = useCreateGroup();
  const updateGroupMutation = useUpdateGroup();
  const isEditing = !!group;

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    grade: '',
    subject: '',
    academicYear: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (group) {
      setFormData({
        name: group.name || '',
        description: group.description || '',
        grade: group.metadata?.grade || '',
        subject: group.metadata?.subject || '',
        academicYear: group.metadata?.academicYear || ''
      });
    }
  }, [group]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Group name is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      const groupData = {
        name: formData.name.trim(),
        description: formData.description.trim() || undefined,
        metadata: {
          grade: formData.grade.trim() || undefined,
          subject: formData.subject.trim() || undefined,
          academicYear: formData.academicYear.trim() || undefined
        }
      };

      if (isEditing) {
        await updateGroupMutation.mutateAsync({
          groupId: group!._id!,
          groupData: groupData as IGroupUpdate
        });
      } else {
        await createGroupMutation.mutateAsync(groupData as IGroupCreate);
      }

      onSuccess();
    } catch (error) {
      console.error('Error saving group:', error);
    }
  };

  const isSubmitting = createGroupMutation.isPending || updateGroupMutation.isPending;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
        <h2 className="text-xl font-bold mb-4">
          {isEditing ? 'Edit Group' : 'Create New Group'}
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Group Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              className={`w-full p-2 border rounded-md ${errors.name ? 'border-red-500' : 'border-gray-300'}`}
              placeholder="Enter group name"
            />
            {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Description
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="w-full p-2 border border-gray-300 rounded-md"
              rows={3}
              placeholder="Enter group description (optional)"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Grade
              </label>
              <input
                type="text"
                value={formData.grade}
                onChange={(e) => setFormData(prev => ({ ...prev, grade: e.target.value }))}
                className="w-full p-2 border border-gray-300 rounded-md"
                placeholder="e.g., 10th"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Subject
              </label>
              <input
                type="text"
                value={formData.subject}
                onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}
                className="w-full p-2 border border-gray-300 rounded-md"
                placeholder="e.g., Mathematics"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Academic Year
            </label>
            <input
              type="text"
              value={formData.academicYear}
              onChange={(e) => setFormData(prev => ({ ...prev, academicYear: e.target.value }))}
              className="w-full p-2 border border-gray-300 rounded-md"
              placeholder="e.g., 2024-2025"
            />
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button
              type="button"
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              disabled={isSubmitting}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Saving...' : isEditing ? 'Update Group' : 'Create Group'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\groups\GroupsList.tsx

import React, { useState } from 'react';
import { useGroups, useDeleteGroup } from '../../hooks/useGroups';
import { useAuth } from '../../context/AuthContext';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { ConfirmDialog } from '../common/ConfirmDialog';
import { RoleBasedComponent } from '../common/RoleBasedComponent';
import type { IStudentGroup } from '../../api/apiGroups';

interface GroupsListProps {
  onCreateGroup: () => void;
  onEditGroup: (group: IStudentGroup) => void;
  onViewGroup: (group: IStudentGroup) => void;
}

export const GroupsList: React.FC<GroupsListProps> = ({
  onCreateGroup,
  onEditGroup,
  onViewGroup
}) => {
  const { user } = useAuth();
  const { data: groups, isLoading, error } = useGroups();
  const deleteGroupMutation = useDeleteGroup();
  const [deleteDialog, setDeleteDialog] = useState<{
    isOpen: boolean;
    group: IStudentGroup | null;
  }>({ isOpen: false, group: null });

  const handleDeleteClick = (group: IStudentGroup) => {
    setDeleteDialog({ isOpen: true, group });
  };

  const handleDeleteConfirm = async () => {
    if (deleteDialog.group) {
      await deleteGroupMutation.mutateAsync(deleteDialog.group._id!);
      setDeleteDialog({ isOpen: false, group: null });
    }
  };

  const canEditGroup = (group: IStudentGroup) => {
    if (user?.role === 'admin') return true;
    if (user?.role === 'teacher' && group.teacherUsername === user.username) return true;
    return false;
  };

  if (isLoading) return <LoadingSpinner message="Loading groups..." />;
  if (error) return <div className="text-red-600">Error loading groups: {(error as Error).message}</div>;

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Groups</h2>
        <RoleBasedComponent allowedRoles={['admin', 'teacher']}>
          <button
            onClick={onCreateGroup}
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
          >
            Create Group
          </button>
        </RoleBasedComponent>
      </div>

      {!groups || groups.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          No groups found. Create your first group to get started.
        </div>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {groups.map((group) => (
            <div key={group._id} className="bg-white rounded-lg shadow border p-4">
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-lg font-semibold">{group.name}</h3>
                <span className="text-sm text-gray-500">
                  {group.studentUsernames?.length || 0} students
                </span>
              </div>
              
              {group.description && (
                <p className="text-gray-600 text-sm mb-2">{group.description}</p>
              )}
              
              <div className="text-xs text-gray-500 mb-3">
                Teacher: {group.teacherUsername}
                {group.metadata?.grade && ` ??Grade: ${group.metadata.grade}`}
                {group.metadata?.subject && ` ??Subject: ${group.metadata.subject}`}
              </div>

              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => onViewGroup(group)}
                  className="text-blue-600 hover:text-blue-800 text-sm"
                >
                  View
                </button>
                {canEditGroup(group) && (
                  <>
                    <button
                      onClick={() => onEditGroup(group)}
                      className="text-green-600 hover:text-green-800 text-sm"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDeleteClick(group)}
                      className="text-red-600 hover:text-red-800 text-sm"
                    >
                      Delete
                    </button>
                  </>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      <ConfirmDialog
        isOpen={deleteDialog.isOpen}
        title="Delete Group"
        message={`Are you sure you want to delete "${deleteDialog.group?.name}"? This action cannot be undone.`}
        confirmText="Delete"
        cancelText="Cancel"
        type="danger"
        onConfirm={handleDeleteConfirm}
        onCancel={() => setDeleteDialog({ isOpen: false, group: null })}
      />
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\groups\MemberPicker.tsx

import React, { useState, useMemo } from 'react';
import { useUsers } from '../../hooks/useUsers';
import { useManageGroupMembers } from '../../hooks/useGroups';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IStudentGroup } from '../../api/apiGroups';

interface MemberPickerProps {
  group: IStudentGroup;
  onSuccess: () => void;
  onCancel: () => void;
}

export const MemberPicker: React.FC<MemberPickerProps> = ({
  group,
  onSuccess,
  onCancel,
}) => {
  const { data: allUsers, isLoading } = useUsers();
  const manageGroupMembers = useManageGroupMembers();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);

  const availableStudents = useMemo(() => {
    if (!allUsers) return [];
    return allUsers
      .filter(
        (user) =>
          user.role === 'student' &&
          !group.studentUsernames?.includes(user.username)
      )
      .filter(
        (user) =>
          searchTerm === '' ||
          user.fullname.toLowerCase().includes(searchTerm.toLowerCase()) ||
          user.username.toLowerCase().includes(searchTerm.toLowerCase())
      );
  }, [allUsers, group.studentUsernames, searchTerm]);

  const handleUserToggle = (username: string) => {
    setSelectedUsers((prev) =>
      prev.includes(username)
        ? prev.filter((u) => u !== username)
        : [...prev, username]
    );
  };

  const handleAddMembers = async () => {
    if (selectedUsers.length === 0) return;
    try {
      await manageGroupMembers.mutateAsync({
        groupId: group._id!,
        memberData: { add: selectedUsers },
      });
      onSuccess();
    } catch (error) {
      alert('Failed to add members');
    }
  };

  if (isLoading) return <LoadingSpinner message="Loading students..." />;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden flex flex-col">
        <h2 className="text-xl font-bold mb-4">Add Students to "{group.name}"</h2>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Search students..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div className="flex-1 overflow-y-auto mb-4">
          {availableStudents.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              {searchTerm ? 'No students found matching your search.' : 'No students available to add.'}
            </div>
          ) : (
            <div className="space-y-2">
              {availableStudents.map((student) => (
                <label
                  key={student.username}
                  className="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={selectedUsers.includes(student.username)}
                    onChange={() => handleUserToggle(student.username)}
                    className="mr-3"
                  />
                  <div className="flex-1">
                    <div className="font-medium">{student.fullname}</div>
                    <div className="text-sm text-gray-500">@{student.username}</div>
                  </div>
                </label>
              ))}
            </div>
          )}
        </div>
        <div className="flex justify-between items-center pt-4 border-t">
          <div className="text-sm text-gray-600">
            {selectedUsers.length} student{selectedUsers.length !== 1 ? 's' : ''} selected
          </div>
          <div className="flex space-x-2">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              disabled={manageGroupMembers.isPending}
            >
              Cancel
            </button>
            <button
              onClick={handleAddMembers}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              disabled={selectedUsers.length === 0 || manageGroupMembers.isPending}
            >
              {manageGroupMembers.isPending
                ? 'Adding...'
                : `Add ${selectedUsers.length} Student${selectedUsers.length !== 1 ? 's' : ''}`}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\groups\StudentPicker.tsx

import React, { useState, useMemo } from 'react';
import { useUsers } from '../../hooks/useUsers';
import { useManageGroupMembers } from '../../hooks/useGroups';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IStudentGroup } from '../../api/apiGroups';

interface StudentPickerProps {
  group: IStudentGroup;
  onSuccess: () => void;
  onCancel: () => void;
}

export const StudentPicker: React.FC<StudentPickerProps> = ({
  group,
  onSuccess,
  onCancel,
}) => {
  const { data: allUsers, isLoading } = useUsers();
  const manageGroupMembers = useManageGroupMembers();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);

  const availableStudents = useMemo(() => {
    if (!allUsers) return [];
    return allUsers
      .filter(
        (user) =>
          user.role === 'student' &&
          !group.studentUsernames?.includes(user.username)
      )
      .filter(
        (user) =>
          searchTerm === '' ||
          user.fullname.toLowerCase().includes(searchTerm.toLowerCase()) ||
          user.username.toLowerCase().includes(searchTerm.toLowerCase())
      );
  }, [allUsers, group.studentUsernames, searchTerm]);

  const handleUserToggle = (username: string) => {
    setSelectedUsers((prev) =>
      prev.includes(username)
        ? prev.filter((u) => u !== username)
        : [...prev, username]
    );
  };

  const handleAddMembers = async () => {
    if (selectedUsers.length === 0) return;
    try {
      await manageGroupMembers.mutateAsync({
        groupId: group._id!,
        memberData: { add: selectedUsers },
      });
      onSuccess();
    } catch (error) {
      alert('Failed to add members');
    }
  };

  if (isLoading) return <LoadingSpinner message="Loading students..." />;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden flex flex-col">
        <h2 className="text-xl font-bold mb-4">Add Students to "{group.name}"</h2>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Search students..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div className="flex-1 overflow-y-auto mb-4">
          {availableStudents.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              {searchTerm ? 'No students found matching your search.' : 'No students available to add.'}
            </div>
          ) : (
            <div className="space-y-2">
              {availableStudents.map((student) => (
                <label
                  key={student.username}
                  className="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={selectedUsers.includes(student.username)}
                    onChange={() => handleUserToggle(student.username)}
                    className="mr-3"
                  />
                  <div className="flex-1">
                    <div className="font-medium">{student.fullname}</div>
                    <div className="text-sm text-gray-500">@{student.username}</div>
                  </div>
                </label>
              ))}
            </div>
          )}
        </div>
        <div className="flex justify-between items-center pt-4 border-t">
          <div className="text-sm text-gray-600">
            {selectedUsers.length} student{selectedUsers.length !== 1 ? 's' : ''} selected
          </div>
          <div className="flex space-x-2">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              disabled={manageGroupMembers.isPending}
            >
              Cancel
            </button>
            <button
              onClick={handleAddMembers}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              disabled={selectedUsers.length === 0 || manageGroupMembers.isPending}
            >
              {manageGroupMembers.isPending
                ? 'Adding...'
                : `Add ${selectedUsers.length} Student${selectedUsers.length !== 1 ? 's' : ''}`}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\user\ChangePasswordModal.tsx

import React, { useState } from 'react';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { apiChangeOwnPassword } from '../../api/apiAuth';

interface ChangePasswordModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export const ChangePasswordModal: React.FC<ChangePasswordModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
}) => {
  const [formData, setFormData] = useState({
    oldPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.oldPassword.trim())
      newErrors.oldPassword = 'Current password is required';

    if (!formData.newPassword.trim())
      newErrors.newPassword = 'New password is required';
    else if (formData.newPassword.length < 6)
      newErrors.newPassword = 'Password must be at least 6 characters long';

    if (!formData.confirmPassword.trim())
      newErrors.confirmPassword = 'Please confirm the new password';
    else if (formData.newPassword !== formData.confirmPassword)
      newErrors.confirmPassword = 'Passwords do not match';

    if (
      formData.oldPassword === formData.newPassword &&
      formData.oldPassword.trim()
    )
      newErrors.newPassword =
        'New password must be different from current password';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsSubmitting(true);

    try {
      const result = await apiChangeOwnPassword({
        oldPassword: formData.oldPassword,
        newPassword: formData.newPassword,
      });

      if (!result.success) {
        throw new Error(result.message || 'Failed to change password');
      }

      setFormData({
        oldPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
      setErrors({});
      onSuccess();
      onClose();
    } catch (error: any) {
      setErrors({
        general:
          error?.response?.data?.message ||
          error?.message ||
          'Failed to change password. Please try again.',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (
    field: keyof typeof formData,
    value: string
  ) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">
            Change Password
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={isSubmitting}
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          {/* Current Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Current Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.oldPassword}
              onChange={(e) =>
                handleInputChange('oldPassword', e.target.value)
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.oldPassword
                  ? 'border-red-500 bg-red-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter current password"
              disabled={isSubmitting}
            />
            {errors.oldPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.oldPassword}</p>
            )}
          </div>

          {/* New Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.newPassword}
              onChange={(e) =>
                handleInputChange('newPassword', e.target.value)
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.newPassword
                  ? 'border-red-500 bg-red-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter new password (min. 6 characters)"
              disabled={isSubmitting}
            />
            {errors.newPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.newPassword}</p>
            )}
          </div>

          {/* Confirm New Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Confirm New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.confirmPassword}
              onChange={(e) =>
                handleInputChange('confirmPassword', e.target.value)
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.confirmPassword
                  ? 'border-red-500 bg-red-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Confirm new password"
              disabled={isSubmitting}
            />
            {errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">
                {errors.confirmPassword}
              </p>
            )}
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={isSubmitting}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {isSubmitting ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Changing...</span>
                </>
              ) : (
                'Change Password'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\user\CreateUserModal.tsx

import React, { useState } from 'react';
import { useCreateUser } from '../../hooks/useUsers';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IUserCreate } from '../../api/apiUsers';

interface CreateUserModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export const CreateUserModal: React.FC<CreateUserModalProps> = ({ 
  isOpen, 
  onClose, 
  onSuccess 
}) => {
  const createUserMutation = useCreateUser();
  
  const [formData, setFormData] = useState<IUserCreate>({
    username: '',
    fullname: '',
    email: '',
    password: '',
    role: 'student',
    isActive: true
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
    } else if (!/^[a-zA-Z0-9_]{3,20}$/.test(formData.username)) {
      newErrors.username = 'Username must be 3-20 characters with letters, numbers, and underscores only';
    }

    if (!formData.fullname.trim()) {
      newErrors.fullname = 'Full name is required';
    } else if (formData.fullname.length < 2) {
      newErrors.fullname = 'Full name must be at least 2 characters long';
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Please provide a valid email address';
    }

    if (!formData.password.trim()) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters long';
    }

    if (!formData.role) {
      newErrors.role = 'Role is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      await createUserMutation.mutateAsync(formData);
      
      // Reset form
      setFormData({
        username: '',
        fullname: '',
        email: '',
        password: '',
        role: 'student',
        isActive: true
      });
      setErrors({});
      
      onSuccess();
      onClose();
    } catch (error: any) {
      if (error.response?.status === 409) {
        setErrors({ username: 'Username already exists' });
      } else {
        setErrors({ general: 'Failed to create user. Please try again.' });
      }
    }
  };

  const handleInputChange = (field: keyof IUserCreate, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Create New User</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={createUserMutation.isPending}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          {/* Username Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Username <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.username}
              onChange={(e) => handleInputChange('username', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.username ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter username"
              disabled={createUserMutation.isPending}
            />
            {errors.username && (
              <p className="mt-1 text-sm text-red-600">{errors.username}</p>
            )}
          </div>

          {/* Full Name Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Full Name <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.fullname}
              onChange={(e) => handleInputChange('fullname', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.fullname ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter full name"
              disabled={createUserMutation.isPending}
            />
            {errors.fullname && (
              <p className="mt-1 text-sm text-red-600">{errors.fullname}</p>
            )}
          </div>

          {/* Email Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email (Optional)
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.email ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter email address"
              disabled={createUserMutation.isPending}
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>

          {/* Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.password}
              onChange={(e) => handleInputChange('password', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.password ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter password (min. 6 characters)"
              disabled={createUserMutation.isPending}
            />
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>

          {/* Role Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Role <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.role}
              onChange={(e) => handleInputChange('role', e.target.value as any)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.role ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              disabled={createUserMutation.isPending}
            >
              <option value="student">Student</option>
              <option value="teacher">Teacher</option>
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
            {errors.role && (
              <p className="mt-1 text-sm text-red-600">{errors.role}</p>
            )}
          </div>

          {/* Active Status Field */}
          <div className="flex items-center">
            <input
              type="checkbox"
              id="isActive"
              checked={formData.isActive}
              onChange={(e) => handleInputChange('isActive', e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              disabled={createUserMutation.isPending}
            />
            <label htmlFor="isActive" className="ml-2 block text-sm text-gray-700">
              User is active
            </label>
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={createUserMutation.isPending}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={createUserMutation.isPending}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {createUserMutation.isPending ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Creating...</span>
                </>
              ) : (
                'Create User'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\user\EditUserModal.tsx

import React, { useState, useEffect } from 'react';
import { useUpdateUser } from '../../hooks/useUsers';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IUser, IUserUpdate } from '../../api/apiUsers';

interface EditUserModalProps {
  isOpen: boolean;
  user: IUser | null;
  onClose: () => void;
  onSuccess: () => void;
}

export const EditUserModal: React.FC<EditUserModalProps> = ({ 
  isOpen, 
  user, 
  onClose, 
  onSuccess 
}) => {
  const updateUserMutation = useUpdateUser();
  
  const [formData, setFormData] = useState<IUserUpdate>({
    username: '',
    fullname: '',
    email: '',
    role: 'student',
    isActive: true
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (user) {
      setFormData({
        username: user.username,
        fullname: user.fullname,
        email: user.email || '',
        role: user.role,
        isActive: user.isActive
      });
    }
  }, [user]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.username?.trim()) {
      newErrors.username = 'Username is required';
    } else if (!/^[a-zA-Z0-9_]{3,20}$/.test(formData.username)) {
      newErrors.username = 'Username must be 3-20 characters with letters, numbers, and underscores only';
    }

    if (!formData.fullname?.trim()) {
      newErrors.fullname = 'Full name is required';
    } else if (formData.fullname.length < 2) {
      newErrors.fullname = 'Full name must be at least 2 characters long';
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Please provide a valid email address';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user || !validateForm()) return;

    try {
      await updateUserMutation.mutateAsync({
        username: user.username,
        userData: formData
      });
      
      setErrors({});
      onSuccess();
      onClose();
    } catch (error: any) {
      if (error.response?.status === 409) {
        setErrors({ username: 'Username already exists' });
      } else {
        setErrors({ general: 'Failed to update user. Please try again.' });
      }
    }
  };

  const handleInputChange = (field: keyof IUserUpdate, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen || !user) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Edit User: {user.username}</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={updateUserMutation.isPending}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          {/* Username Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Username <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.username}
              onChange={(e) => handleInputChange('username', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.username ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter username"
              disabled={updateUserMutation.isPending}
            />
            {errors.username && (
              <p className="mt-1 text-sm text-red-600">{errors.username}</p>
            )}
          </div>

          {/* Full Name Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Full Name <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.fullname}
              onChange={(e) => handleInputChange('fullname', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.fullname ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter full name"
              disabled={updateUserMutation.isPending}
            />
            {errors.fullname && (
              <p className="mt-1 text-sm text-red-600">{errors.fullname}</p>
            )}
          </div>

          {/* Email Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.email ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter email address"
              disabled={updateUserMutation.isPending}
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>

          {/* Role Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Role <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.role}
              onChange={(e) => handleInputChange('role', e.target.value as any)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 hover:border-gray-400 transition-colors"
              disabled={updateUserMutation.isPending}
            >
              <option value="student">Student</option>
              <option value="teacher">Teacher</option>
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          {/* Active Status Field */}
          <div className="flex items-center">
            <input
              type="checkbox"
              id="isActive"
              checked={formData.isActive}
              onChange={(e) => handleInputChange('isActive', e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              disabled={updateUserMutation.isPending}
            />
            <label htmlFor="isActive" className="ml-2 block text-sm text-gray-700">
              User is active
            </label>
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={updateUserMutation.isPending}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={updateUserMutation.isPending}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {updateUserMutation.isPending ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Updating...</span>
                </>
              ) : (
                'Update User'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\user\PasswordResetModal.tsx

import React, { useState } from 'react';
import { useResetPassword } from '../../hooks/useUsers';
import { LoadingSpinner } from '../common/LoadingSpinner';

interface PasswordResetModalProps {
  isOpen: boolean;
  username: string;
  fullname: string;
  onClose: () => void;
  onSuccess: () => void;
}

export const PasswordResetModal: React.FC<PasswordResetModalProps> = ({ 
  isOpen, 
  username, 
  fullname, 
  onClose, 
  onSuccess 
}) => {
  const resetPasswordMutation = useResetPassword();
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!newPassword.trim()) {
      newErrors.newPassword = 'New password is required';
    } else if (newPassword.length < 6) {
      newErrors.newPassword = 'Password must be at least 6 characters long';
    }

    if (!confirmPassword.trim()) {
      newErrors.confirmPassword = 'Please confirm the new password';
    } else if (newPassword !== confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      await resetPasswordMutation.mutateAsync({
        username,
        newPassword
      });
      
      setNewPassword('');
      setConfirmPassword('');
      setErrors({});
      
      onSuccess();
      onClose();
    } catch (error: any) {
      setErrors({ 
        general: error.response?.data?.message || 'Failed to reset password. Please try again.' 
      });
    }
  };

  const handleInputChange = (field: string, value: string) => {
    if (field === 'newPassword') {
      setNewPassword(value);
    } else {
      setConfirmPassword(value);
    }
    
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">Reset Password</h2>
            <p className="text-sm text-gray-600 mt-1">
              Reset password for <span className="font-medium">{fullname}</span> ({username})
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={resetPasswordMutation.isPending}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-md text-sm">
            <div className="flex">
              <svg className="w-5 h-5 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <div>
                <p className="font-medium">Important:</p>
                <p>This will reset the user's password and invalidate all their existing sessions. The user will need to log in again with the new password.</p>
              </div>
            </div>
          </div>

          {/* New Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={newPassword}
              onChange={(e) => handleInputChange('newPassword', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.newPassword ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter new password (min. 6 characters)"
              disabled={resetPasswordMutation.isPending}
            />
            {errors.newPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.newPassword}</p>
            )}
          </div>

          {/* Confirm Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Confirm New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.confirmPassword ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Confirm new password"
              disabled={resetPasswordMutation.isPending}
            />
            {errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>
            )}
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={resetPasswordMutation.isPending}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={resetPasswordMutation.isPending}
              className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {resetPasswordMutation.isPending ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Resetting...</span>
                </>
              ) : (
                'Reset Password'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\user\UserStatusToggle.tsx

import React, { useState } from 'react';
import { useToggleUserStatus } from '../../hooks/useUsers';

interface UserStatusToggleProps {
  username: string;
  isActive: boolean;
  onSuccess?: () => void;
  size?: 'small' | 'medium';
}

export const UserStatusToggle: React.FC<UserStatusToggleProps> = ({ 
  username, 
  isActive, 
  onSuccess,
  size = 'medium'
}) => {
  const toggleStatusMutation = useToggleUserStatus();
  const [isToggling, setIsToggling] = useState(false);

  const handleToggle = async () => {
    setIsToggling(true);
    try {
      await toggleStatusMutation.mutateAsync(username);
      onSuccess?.();
    } catch (error) {
      console.error('Failed to toggle user status:', error);
    } finally {
      setIsToggling(false);
    }
  };

  const sizeClasses = {
    small: 'h-5 w-9',
    medium: 'h-6 w-11'
  };

  const switchClasses = {
    small: 'h-4 w-4',
    medium: 'h-5 w-5'
  };

  return (
    <div className="flex items-center space-x-2">
      <button
        onClick={handleToggle}
        disabled={isToggling || toggleStatusMutation.isPending}
        className={`${sizeClasses[size]} bg-gray-200 relative inline-flex flex-shrink-0 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed ${
          isActive ? 'bg-green-500' : 'bg-gray-200'
        }`}
      >
        <span className="sr-only">Toggle user status</span>
        <span
          className={`${switchClasses[size]} bg-white shadow-lg rounded-full transition-transform ease-in-out duration-200 transform ${
            isActive ? 'translate-x-5' : 'translate-x-0'
          }`}
        />
      </button>
      
      <span className={`text-sm font-medium ${
        isActive ? 'text-green-700' : 'text-red-700'
      }`}>
        {isToggling ? (
          <span className="text-gray-500">Updating...</span>
        ) : (
          isActive ? 'Active' : 'Inactive'
        )}
      </span>
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\Navbar.tsx

// 1. Import dependencies at the top
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext'; // Adjust path if needed
import { useState } from 'react';
import { LogoutAllConfirmModal } from './auth/LogoutAllConfirmModal'; // Adjust path if needed


export default function Navbar() {
  const { user, logout, loading, logoutAll } = useAuth();
  const [showUserMenu, setShowUserMenu] = useState(false);
  // Add these states inside the Navbar component
  const [showLogoutAllConfirm, setShowLogoutAllConfirm] = useState(false);

  if (loading)return null;
  if (!user) return null; // Or show a minimal login link

  return (
    <nav className="bg-white border-b border-gray-200 h-16 flex items-center px-6 justify-between">
      <Link to={`/${user.role}`} className="text-xl font-bold text-blue-700">Your App</Link>

      {/* Right side: User profile menu */}
      <div className="relative ml-auto">
        <button
          onClick={() => setShowUserMenu(v => !v)}
          className="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <span className="sr-only">Open user menu</span>
          <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center">
            <span className="text-white font-medium text-sm">
              {user.fullname?.charAt(0).toUpperCase()}
            </span>
          </div>
        </button>
        {/* // Update the user menu dropdown section to include logout all option: */}
        {showUserMenu && (
          <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
            <div className="py-1">
              <Link
                to="/profile"
                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                onClick={() => setShowUserMenu(false)}
              >
                Your Profile
              </Link>
              <button
                onClick={() => {
                  alert('Password change modal not yet wired up!');
                  setShowUserMenu(false);
                }}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                Change Password
              </button>
              <hr className="my-1" />
              <button
                onClick={() => {
                  setShowLogoutAllConfirm(true);
                  setShowUserMenu(false);
                }}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                <div className="flex items-center">
                  <svg className="w-4 h-4 mr-2 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-4a2 2 0 00-2-2H6a2 2 0 00-2 2v4a2 2 0 002 2zM11 5V3a2 2 0 112 0v2M7 7h10" />
                  </svg>
                  Logout All Devices
                </div>
              </button>
              <button
                onClick={logout}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                Sign out
              </button>
            </div>
          </div>
        )}

        {showLogoutAllConfirm && (
          <LogoutAllConfirmModal
            isOpen={showLogoutAllConfirm}
            onClose={() => setShowLogoutAllConfirm(false)}
            onConfirm={async () => {
              await logoutAll();
              setShowLogoutAllConfirm(false);
            }}
          />
        )}


      </div>
    </nav>
  );
}

C:\Users\User\Desktop\jink-demo\src\context\AuthContext.tsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import { setAuthToken, clearAuthToken, getAuthToken, isTokenValid } from '../utils/auth';
import { apiLogin, apiLogoutAll, apiLogout } from '../api/apiAuth';
import { apiGetUserByUsername } from '../api/apiUsers';

interface User {
  username: string;
  fullname: string;
  role: 'admin' | 'teacher' | 'student' | 'user';
  isActive?: boolean;
  // ...other properties
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  logoutAll: () => Promise<void>; // Add this line
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // On cold app load, check for a JWT and fetch user profile if present.
  useEffect(() => {
    const initAuth = async () => {
      setLoading(true);
      const token = getAuthToken();
      if (token && isTokenValid()) {
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          // Use the username from the JWT to fetch the fresh profile
          const freshUser = await apiGetUserByUsername(payload.username);
          setUser(freshUser);
        } catch (error) {
          console.error('Failed to fetch user profile from token:', error);
          clearAuthToken();
          setUser(null);
        }
      }
      setLoading(false);
    };
    initAuth();
  }, []);

  // Login: authenticate, store token, and fetch updated user profile
  const login = async (username: string, password: string) => {
    const response = await apiLogin({ username, password });
    setAuthToken(response.token);
    // Always fetch the full, up-to-date user profile from the API
    const fullUser = await apiGetUserByUsername(response.user.username);
    setUser(fullUser);
  };

  const logout = async() => {
    try{
      // const logoutMe = 
      await apiLogout();

    }catch (error) 
    {
      console.error('Logout failed:', error);   

    // Redirect will be handled by axios interceptor or route guards
    }finally {
      clearAuthToken();
      setUser(null);
    }
  };

  // Add the logoutAll function in the AuthProvider component
  const logoutAll = async () => {
    try {
      // Call the logout-all API endpoint
      // const logoutAllUser = 
      await apiLogoutAll();
      // await fetch('/api/auth/logout-all', {
      //   method: 'POST',
      //   headers: {
      //     'Authorization': `Bearer ${getAuthToken()}`
      //   }
      // });
    } catch (error) {
      // Even if the API call fails, we should clear local state
      console.error('Failed to logout all sessions:', error);
    } finally {
      // Clear local state and redirect
      clearAuthToken();
      setUser(null);
      window.location.href = '/login';
    }
  };
  return (
    <AuthContext.Provider value={{ user, loading, login, logout, logoutAll }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

C:\Users\User\Desktop\jink-demo\src\hooks\useArticles.ts

// src/hooks/useArticles.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import api from '../api/axios';
import type {
  // IArticle,
  ISentence,
  CreateArticleRequest,
  ArticleResponse,
  ArticlesResponse,
  SuggestNameRequest,
  SuggestNameResponse,
  CheckNameResponse,
  UpdateArticleRequest,
  UpdateSentencesRequest,
  SentenceResponse,
  TeacherStatsResponse
} from '../types/article.types';

// API functions
const articleAPI = {
  // Suggest article name from title
  suggestName: async (data: SuggestNameRequest): Promise<SuggestNameResponse> => {
    const response = await api.post('/articles/suggest-name', data);
    return response.data;
  },

  // Check if article name is available
  checkNameAvailability: async (articleName: string): Promise<CheckNameResponse> => {
    const response = await api.get(`/articles/check-name/${articleName}`);
    return response.data;
  },

  // Create new article
  create: async (data: CreateArticleRequest): Promise<ArticleResponse> => {
    const response = await api.post('/articles', data);
    return response.data;
  },

  // Get all articles for teacher
  getAll: async (): Promise<ArticlesResponse> => {
    const response = await api.get('/articles');
    return response.data;
  },

  // Get single article by articleName
  getByName: async (articleName: string): Promise<ArticleResponse> => {
    const response = await api.get(`/articles/${articleName}`);
    return response.data;
  },

  // Update article metadata
  updateMetadata: async (articleName: string, data: UpdateArticleRequest): Promise<ArticleResponse> => {
    const response = await api.put(`/articles/${articleName}`, data);
    return response.data;
  },

  // Update article sentences
  updateSentences: async (articleName: string, data: UpdateSentencesRequest): Promise<ArticleResponse> => {
    const response = await api.put(`/articles/${articleName}/sentences`, data);
    return response.data;
  },

  // Delete article
  delete: async (articleName: string): Promise<{ success: boolean; message: string }> => {
    const response = await api.delete(`/articles/${articleName}`);
    return response.data;
  },

  // Get teacher stats
  getStats: async (): Promise<TeacherStatsResponse> => {
    const response = await api.get('/articles/stats');
    return response.data;
  }
};

const sentenceAPI = {
  // Get single sentence by sentenceId
  getById: async (sentenceId: string): Promise<SentenceResponse> => {
    const response = await api.get(`/articles/sentences/${sentenceId}`);
    return response.data;
  },

  // Update single sentence
  update: async (sentenceId: string, data: Partial<Pick<ISentence, 'text' | 'status' | 'individualAudioUrl'>>): Promise<SentenceResponse> => {
    const response = await api.put(`/articles/sentences/${sentenceId}`, data);
    return response.data;
  }
};

// React Query Hooks

/**
 * Suggest article name from title
 */
export const useSuggestArticleName = () => {
  return useMutation({
    mutationFn: articleAPI.suggestName,
    onError: (error: any) => {
      console.error('Suggest name error:', error);
    }
  });
};

/**
 * Check article name availability
 */
export const useCheckArticleNameAvailability = (articleName: string) => {
  return useQuery({
    queryKey: ['articleNameAvailability', articleName],
    queryFn: () => articleAPI.checkNameAvailability(articleName),
    enabled: !!articleName && articleName.length >= 3,
    staleTime: 30000 // Cache for 30 seconds
  });
};

/**
 * Get all articles for teacher
 */
export const useArticles = () => {
  return useQuery({
    queryKey: ['articles'],
    queryFn: async () => {
      const result = await articleAPI.getAll();
      return result.articles;
    }
  });
};

/**
 * Get single article by articleName
 */
export const useArticle = (articleName: string) => {
  return useQuery({
    queryKey: ['article', articleName],
    queryFn: async () => {
      const result = await articleAPI.getByName(articleName);
      return result.article;
    },
    enabled: !!articleName
  });
};

/**
 * Create new article
 */
export const useCreateArticle = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: articleAPI.create,
    onSuccess: (data) => {
      // Invalidate articles list to show new article
      queryClient.invalidateQueries({ queryKey: ['articles'] });
      queryClient.invalidateQueries({ queryKey: ['articleStats'] });
      
      // Set the new article in cache
      queryClient.setQueryData(['article', data.article.articleName], data.article);
    },
    onError: (error: any) => {
      console.error('Create article error:', error);
    }
  });
};

/**
 * Update article metadata
 */
export const useUpdateArticleMetadata = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ articleName, data }: { articleName: string; data: UpdateArticleRequest }) => 
      articleAPI.updateMetadata(articleName, data),
    onSuccess: (response, variables) => {
      // Update specific article and articles list
      queryClient.setQueryData(['article', variables.articleName], response.article);
      queryClient.invalidateQueries({ queryKey: ['articles'] });
    }
  });
};

/**
 * Update article sentences
 */
export const useUpdateArticleSentences = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ articleName, sentences }: { 
      articleName: string; 
      sentences: Omit<ISentence, 'sentenceId'>[] 
    }) => articleAPI.updateSentences(articleName, { sentences }),
    onSuccess: (response, variables) => {
      // Update specific article and articles list
      queryClient.setQueryData(['article', variables.articleName], response.article);
      queryClient.invalidateQueries({ queryKey: ['articles'] });
    }
  });
};

/**
 * Delete article
 */
export const useDeleteArticle = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: articleAPI.delete,
    onSuccess: (_, articleName) => {
      // Remove from articles list and individual cache
      queryClient.invalidateQueries({ queryKey: ['articles'] });
      queryClient.invalidateQueries({ queryKey: ['articleStats'] });
      queryClient.removeQueries({ queryKey: ['article', articleName] });
    }
  });
};

/**
 * Get teacher statistics
 */
export const useArticleStats = () => {
  return useQuery({
    queryKey: ['articleStats'],
    queryFn: async () => {
      const result = await articleAPI.getStats();
      return result.stats;
    }
  });
};

/**
 * Get single sentence by sentenceId
 */
export const useSentence = (sentenceId: string) => {
  return useQuery({
    queryKey: ['sentence', sentenceId],
    queryFn: async () => {
      const result = await sentenceAPI.getById(sentenceId);
      return result.sentence;
    },
    enabled: !!sentenceId
  });
};

/**
 * Update single sentence
 */
export const useUpdateSentence = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ sentenceId, data }: { 
      sentenceId: string; 
      data: Partial<Pick<ISentence, 'text' | 'status' | 'individualAudioUrl'>> 
    }) => sentenceAPI.update(sentenceId, data),
    onSuccess: (response, variables) => {
      // Update sentence in cache
      queryClient.setQueryData(['sentence', variables.sentenceId], response.sentence);
      
      // Parse articleName from sentenceId to invalidate article
      const lastUnderscoreIndex = variables.sentenceId.lastIndexOf('_');
      if (lastUnderscoreIndex !== -1) {
        const articleName = variables.sentenceId.substring(0, lastUnderscoreIndex);
        queryClient.invalidateQueries({ queryKey: ['article', articleName] });
      }
    }
  });
};

C:\Users\User\Desktop\jink-demo\src\hooks\useBulk.ts

// src/hooks/useBulk.ts
import { useMutation } from '@tanstack/react-query';
import { 
  apiImportUsersCSV, 
  apiExportUsersCSV, 
  apiDownloadCSVTemplate,
} from '../api/apiBulk';
import type { 
  IExportFilters 
} from '../api/apiBulk';

// Import users from CSV
export const useImportUsersCSV = () => {
  return useMutation({
    mutationFn: (csvFile: File) => apiImportUsersCSV(csvFile),
  });
};

// Export users to CSV
export const useExportUsersCSV = () => {
  return useMutation({
    mutationFn: (filters?: IExportFilters) => apiExportUsersCSV(filters),
  });
};

// Download CSV template
export const useDownloadCSVTemplate = () => {
  return useMutation({
    mutationFn: () => apiDownloadCSVTemplate(),
  });
};

C:\Users\User\Desktop\jink-demo\src\hooks\useGroups.ts

// src/hooks/useGroups.ts
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { 
  apiListGroups, 
  apiGetGroup, 
  apiCreateGroup, 
  apiUpdateGroup, 
  apiDeleteGroup,
  apiManageGroupMembers,

} from '../api/apiGroups';
import type { 

  IGroupCreate,
  IGroupUpdate 
} from '../api/apiGroups';
import { useAuth } from '../context/AuthContext';

// List groups with caching
export const useGroups = () => {
  const { user } = useAuth();
  
  return useQuery({
    queryKey: ['groups'],
    queryFn: apiListGroups,
    enabled: !!user && ['admin', 'teacher'].includes(user.role),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes
  });
};

// Get single group
export const useGroup = (groupId?: string) => {
  return useQuery({
    queryKey: ['group', groupId],
    queryFn: () => apiGetGroup(groupId!),
    enabled: !!groupId,
  });
};

// Create group mutation
export const useCreateGroup = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (groupData: IGroupCreate) => apiCreateGroup(groupData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
    },
  });
};

// Update group mutation
export const useUpdateGroup = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ groupId, groupData }: { groupId: string; groupData: IGroupUpdate }) =>
      apiUpdateGroup(groupId, groupData),
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
      queryClient.invalidateQueries({ queryKey: ['group', variables.groupId] });
    },
  });
};

// Delete group mutation
export const useDeleteGroup = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (groupId: string) => apiDeleteGroup(groupId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
    },
  });
};

// Manage group members mutation
export const useManageGroupMembers = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ 
      groupId, 
      memberData 
    }: { 
      groupId: string; 
      memberData: { add?: string[], remove?: string[] } 
    }) => apiManageGroupMembers(groupId, memberData),
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
      queryClient.invalidateQueries({ queryKey: ['group', variables.groupId] });
    },
  });
};

C:\Users\User\Desktop\jink-demo\src\hooks\useUsers.ts

// src/hooks/useUsers.ts
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { 
  apiListUsers, 
  apiGetUserByUsername, 
  apiCreateUser, 
  apiUpdateUser, 
  apiDeleteUser, 
  apiToggleUserStatus,
  apiResetPassword,
} from '../api/apiUsers';
import type { 
  IUserCreate,
  IUserUpdate 
} from '../api/apiUsers';
import { useAuth } from '../context/AuthContext';

// List users with caching
export const useUsers = () => {
  const { user } = useAuth();
  
  return useQuery({
    queryKey: ['users'],
    queryFn: apiListUsers,
    enabled: !!user && ['admin', 'teacher'].includes(user.role),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes (was cacheTime in v4)
  });
};

// Get single user
export const useUser = (username?: string) => {
  return useQuery({
    queryKey: ['user', username],
    queryFn: () => apiGetUserByUsername(username!),
    enabled: !!username,
  });
};

// Create user mutation
export const useCreateUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (userData: IUserCreate) => apiCreateUser(userData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
    },
  });
};

// Update user mutation
export const useUpdateUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ username, userData }: { username: string; userData: IUserUpdate }) =>
      apiUpdateUser(username, userData),
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      queryClient.invalidateQueries({ queryKey: ['user', variables.username] });
    },
  });
};

// // Delete user mutation
// export const useDeleteUser = () => {
//   const queryClient = useQueryClient();
  
//   return useMutation({
//     mutationFn: (username: string) => apiDeleteUser(username),
//     onSuccess: () => {
//       queryClient.invalidateQueries({ queryKey: ['users'] });
//     },
//   });
// };
export const useDeleteUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: apiDeleteUser, // (username: string) => apiDeleteUser(username) works too
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
    },
    onError: (error) => {
      console.error('Delete user error:', error);
    },
  });
};



// Toggle user status mutation
export const useToggleUserStatus = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (username: string) => apiToggleUserStatus(username),
    onSuccess: (_data, username) => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      queryClient.invalidateQueries({ queryKey: ['user', username] });
    },
  });
};

// Reset password mutation
export const useResetPassword = () => {
  return useMutation({
    mutationFn: ({ username, newPassword }: { username: string; newPassword: string }) =>
      apiResetPassword(username, newPassword),
  });
};

C:\Users\User\Desktop\jink-demo\src\pages\admin\BulkOperations.tsx

// src/pages/admin/BulkOperations.tsx
import React, { useState } from 'react';
import { BulkImport } from '../../components/bulk/BulkImport';
import { BulkExport } from '../../components/bulk/BulkExport';
import { CSVTemplateDownload } from '../../components/bulk/CSVTemplateDownload';

const BulkOperations: React.FC = () => {
  const [active, setActive] = useState<'import' | 'export' | null>(null);

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-semibold mb-4">Bulk User Operations</h1>
      <p className="mb-8">Import and export users using CSV files.</p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded shadow">
          <h2 className="text-xl font-medium mb-4">Import Users</h2>
          <BulkImport onSuccess={() => setActive(null)} onCancel={() => setActive(null)} />
          <div className="mt-4">
            <CSVTemplateDownload />
          </div>
        </div>
        <div className="bg-white p-6 rounded shadow">
          <h2 className="text-xl font-medium mb-4">Export Users{active?"":""}</h2>
          <BulkExport onCancel={() => setActive(null)} />
        </div>
      </div>
    </div>
  );
};

export default BulkOperations;

C:\Users\User\Desktop\jink-demo\src\pages\admin\Groups.tsx

import React, { useState } from 'react';
import { GroupsList } from '../../components/groups/GroupsList';
import { GroupForm } from '../../components/groups/GroupForm';
import { GroupDetail } from '../../components/groups/GroupDetail';
import type { IStudentGroup } from '../../api/apiGroups';

const Groups: React.FC = () => {
  const [currentView, setCurrentView] = useState<'list' | 'create' | 'edit' | 'detail'>('list');
  const [selectedGroup, setSelectedGroup] = useState<IStudentGroup | null>(null);

  const handleCreateGroup = () => {
    setSelectedGroup(null);
    setCurrentView('create');
  };

  const handleEditGroup = (group: IStudentGroup) => {
    setSelectedGroup(group);
    setCurrentView('edit');
  };

  const handleViewGroup = (group: IStudentGroup) => {
    setSelectedGroup(group);
    setCurrentView('detail');
  };

  const handleFormSuccess = () => {
    setCurrentView('list');
    setSelectedGroup(null);
  };

  const handleFormCancel = () => {
    setCurrentView('list');
    setSelectedGroup(null);
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {currentView === 'list' && (
        <GroupsList
          onCreateGroup={handleCreateGroup}
          onEditGroup={handleEditGroup}
          onViewGroup={handleViewGroup}
        />
      )}

      {(currentView === 'create' || currentView === 'edit') && (
        <GroupForm
          group={selectedGroup || undefined}
          onSuccess={handleFormSuccess}
          onCancel={handleFormCancel}
        />
      )}

      {currentView === 'detail' && selectedGroup && (
        <GroupDetail
          group={selectedGroup}
          onClose={() => setCurrentView('list')}
          onEdit={() => setCurrentView('edit')}
        />
      )}
    </div>
  );
};

export default Groups;

C:\Users\User\Desktop\jink-demo\src\pages\teacher\ArticleDetail.tsx

// src/pages/teacher/ArticleDetail.tsx
import React, { useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { useArticle, useDeleteArticle } from '../../hooks/useArticles';
import { SentencePreview } from '../../components/articles/SentencePreview';
import type { IArticle } from '../../types/article.types';

const ArticleDetail: React.FC = () => {
  const { articleName } = useParams<{ articleName: string }>();
  const navigate = useNavigate();
  const { data: article, isLoading, error } = useArticle(articleName!);
  const deleteArticleMutation = useDeleteArticle();
  
  const [deleteConfirm, setDeleteConfirm] = useState(false);

  const handleDelete = async () => {
    if (!article) return;
    
    try {
      await deleteArticleMutation.mutateAsync(article.articleName);
      navigate('/teacher/articles');
    } catch (error) {
      console.error('Failed to delete article:', error);
      alert('Failed to delete article. Please try again.');
    }
  };

  const getStatusDisplay = (status: IArticle['status']) => {
    const statusConfig = {
      editing: { 
        bg: 'bg-yellow-100', 
        text: 'text-yellow-800', 
        icon: '?��?',
        label: 'Editing',
        description: 'Article is being edited and not ready for students yet.'
      },
      processing: { 
        bg: 'bg-blue-100', 
        text: 'text-blue-800', 
        icon: '??,
        label: 'Processing',
        description: 'Audio files are being generated. This may take a few minutes.'
      },
      ready: { 
        bg: 'bg-green-100', 
        text: 'text-green-800', 
        icon: '??,
        label: 'Ready',
        description: 'Article is complete and ready for student dictation exercises.'
      },
      error: { 
        bg: 'bg-red-100', 
        text: 'text-red-800', 
        icon: '??,
        label: 'Error',
        description: 'There was an error processing this article.'
      }
    };
    
    return statusConfig[status];
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-2 text-gray-600">Loading article...</span>
        </div>
      </div>
    );
  }

  if (error || !article) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="text-center py-12">
          <div className="text-red-600 mb-4">Article not found</div>
          <Link
            to="/teacher/articles"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Articles
          </Link>
        </div>
      </div>
    );
  }

  const statusDisplay = getStatusDisplay(article.status);

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <div className="flex items-center space-x-2 mb-2">
            <Link
              to="/teacher/articles"
              className="text-blue-600 hover:text-blue-800 text-sm transition-colors"
            >
              ??Back to Articles
            </Link>
          </div>
          
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {article.title}
          </h1>
          
          <div className="flex items-center space-x-4 text-sm text-gray-600">
            <span className="font-mono bg-gray-100 px-3 py-1 rounded">
              {article.articleName}
            </span>
            <span>By {article.teacherUsername}</span>
            <span>Created {formatDate(article.createdAt)}</span>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          {article.status === 'editing' && (
            <Link
              to={`/teacher/articles/${article.articleName}/edit`}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              Edit Article
            </Link>
          )}
          
          <button
            onClick={() => setDeleteConfirm(true)}
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
          >
            Delete
          </button>
        </div>
      </div>

      {/* Status Card */}
      <div className={`p-4 rounded-lg border ${statusDisplay.bg} ${statusDisplay.text}`}>
        <div className="flex items-center space-x-3">
          <span className="text-2xl">{statusDisplay.icon}</span>
          <div>
            <div className="font-semibold">{statusDisplay.label}</div>
            <div className="text-sm opacity-90">{statusDisplay.description}</div>
            {article.processingError && (
              <div className="text-sm mt-1 font-mono bg-white bg-opacity-50 p-2 rounded">
                Error: {article.processingError}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Article Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Metadata */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Article Details</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-gray-700">Grade Level</label>
                <div className="mt-1 text-sm text-gray-900">
                  {article.metadata.grade || 'Not specified'}
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Subject</label>
                <div className="mt-1 text-sm text-gray-900">
                  {article.metadata.subject || 'Not specified'}
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Difficulty Level</label>
                <div className="mt-1">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {article.metadata.difficulty || 'Not specified'}
                  </span>
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Estimated Time</label>
                <div className="mt-1 text-sm text-gray-900">
                  {article.metadata.estimatedTime ? `${article.metadata.estimatedTime} minutes` : 'Auto-calculated'}
                </div>
              </div>
            </div>
          </div>

          {/* Original Text */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Original Text</h3>
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-700 leading-relaxed whitespace-pre-wrap">
                {article.originalText}
              </p>
            </div>
            <div className="mt-2 text-xs text-gray-500">
              {article.originalText.length} characters, {article.originalText.split(/\s+/).length} words
            </div>
          </div>

          {/* Sentences */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">
              Sentences ({article.sentences.length})
            </h3>
            <SentencePreview
              sentences={article.sentences.map(s => s.text)}
              articleName={article.articleName}
              showSentenceIds={true}
              editable={false}
            />
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Quick Stats */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Statistics</h3>
            
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Total Sentences:</span>
                <span className="text-sm font-medium">{article.sentences.length}</span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Avg Words/Sentence:</span>
                <span className="text-sm font-medium">
                  {Math.round(article.sentences.reduce((sum, s) => sum + s.wordCount, 0) / article.sentences.length) || 0}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Long Sentences:</span>
                <span className="text-sm font-medium text-yellow-600">
                  {article.sentences.filter(s => s.isLong).length}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Ready Sentences:</span>
                <span className="text-sm font-medium text-green-600">
                  {article.sentences.filter(s => s.status === 'ready').length}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Has Audio:</span>
                <span className="text-sm font-medium">
                  {article.sentences.filter(s => s.individualAudioUrl).length}
                </span>
              </div>
            </div>
          </div>

          {/* Audio Files */}
          {article.fullAudioUrl && (
            <div className="bg-white p-6 rounded-lg shadow border">
              <h3 className="text-lg font-semibold mb-4">Audio Files</h3>
              
              <div className="space-y-3">
                <div>
                  <label className="text-sm font-medium text-gray-700">Full Article Audio:</label>
                  <div className="mt-1">
                    <audio controls className="w-full">
                      <source src={article.fullAudioUrl} type="audio/mpeg" />
                      Your browser does not support the audio element.
                    </audio>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Actions</h3>
            
            <div className="space-y-3">
              {article.status === 'ready' && (
                <button className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  Start Dictation Exercise
                </button>
              )}
              
              {article.status === 'editing' && (
                <Link
                  to={`/teacher/articles/${article.articleName}/edit`}
                  className="block w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-center"
                >
                  Continue Editing
                </Link>
              )}
              
              <button
                onClick={() => navigator.clipboard.writeText(article.articleName)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Copy Article Name
              </button>
              
              <button
                onClick={() => setDeleteConfirm(true)}
                className="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Delete Article
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      {deleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-2">Delete Article</h3>
            <p className="text-gray-600 mb-4">
              Are you sure you want to delete "{article.title}"? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setDeleteConfirm(false)}
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
                disabled={deleteArticleMutation.isPending}
              >
                Cancel
              </button>
              <button
                onClick={handleDelete}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50"
                disabled={deleteArticleMutation.isPending}
              >
                {deleteArticleMutation.isPending ? 'Deleting...' : 'Delete'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ArticleDetail;

C:\Users\User\Desktop\jink-demo\src\pages\teacher\ArticleList.tsx

// src/pages/teacher/ArticleList.tsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useArticles, useDeleteArticle, useArticleStats } from '../../hooks/useArticles';
import type { IArticle } from '../../types/article.types';

const ArticleList: React.FC = () => {
  // const navigate = useNavigate();
  const { data: articles, isLoading, error, refetch } = useArticles();
  const { data: stats } = useArticleStats();
  const deleteArticleMutation = useDeleteArticle();
  
  const [deleteConfirm, setDeleteConfirm] = useState<{
    isOpen: boolean;
    article: IArticle | null;
  }>({ isOpen: false, article: null });

  const handleDeleteClick = (article: IArticle) => {
    setDeleteConfirm({ isOpen: true, article });
  };

  const handleDeleteConfirm = async () => {
    if (deleteConfirm.article) {
      try {
        await deleteArticleMutation.mutateAsync(deleteConfirm.article.articleName);
        setDeleteConfirm({ isOpen: false, article: null });
        refetch();
      } catch (error) {
        console.error('Failed to delete article:', error);
        alert('Failed to delete article. Please try again.');
      }
    }
  };

  const getStatusBadge = (status: IArticle['status']) => {
    const statusConfig = {
      editing: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'Editing' },
      processing: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Processing' },
      ready: { bg: 'bg-green-100', text: 'text-green-800', label: 'Ready' },
      error: { bg: 'bg-red-100', text: 'text-red-800', label: 'Error' }
    };
    
    const config = statusConfig[status];
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    );
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  if (isLoading) {
    return (
      <div className="max-w-7xl mx-auto p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-2 text-gray-600">Loading articles...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-7xl mx-auto p-6">
        <div className="text-center py-12">
          <div className="text-red-600 mb-4">Failed to load articles</div>
          <button
            onClick={() => refetch()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">My Articles</h1>
          <p className="text-gray-600 mt-1">Manage your dictation exercises</p>
        </div>
        
        <Link
          to="/teacher/articles/create"
          className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
          Create Article
        </Link>
      </div>

      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-gray-900">{stats.total}</div>
            <div className="text-sm text-gray-600">Total Articles</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-green-600">{stats.byStatus.ready || 0}</div>
            <div className="text-sm text-gray-600">Ready</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-yellow-600">{stats.byStatus.editing || 0}</div>
            <div className="text-sm text-gray-600">Editing</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-blue-600">{stats.byStatus.processing || 0}</div>
            <div className="text-sm text-gray-600">Processing</div>
          </div>
        </div>
      )}

      {/* Articles List */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        {!articles || articles.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-gray-500 mb-4">
              <svg className="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <p className="text-lg font-medium">No articles yet</p>
              <p className="text-sm">Create your first dictation exercise to get started</p>
            </div>
            <Link
              to="/teacher/articles/create"
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Create First Article
            </Link>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Article
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Details
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Created
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {articles.map((article) => (
                  <tr key={article.articleName} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900 mb-1">
                          {article.title}
                        </div>
                        <div className="text-xs font-mono text-blue-600 bg-blue-50 px-2 py-1 rounded inline-block">
                          {article.articleName}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        <div>{article.sentences.length} sentences</div>
                        <div className="text-xs text-gray-500">
                          {article.metadata.grade && `${article.metadata.grade} ??`}
                          {article.metadata.subject && `${article.metadata.subject} ??`}
                          {article.metadata.difficulty}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(article.status)}
                      {article.processingError && (
                        <div className="text-xs text-red-600 mt-1" title={article.processingError}>
                          Error occurred
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(article.createdAt)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          to={`/teacher/articles/${article.articleName}`}
                          className="text-blue-600 hover:text-blue-800 transition-colors"
                        >
                          View
                        </Link>
                        {article.status === 'editing' && (
                          <Link
                            to={`/teacher/articles/${article.articleName}/edit`}
                            className="text-green-600 hover:text-green-800 transition-colors"
                          >
                            Edit
                          </Link>
                        )}
                        <button
                          onClick={() => handleDeleteClick(article)}
                          className="text-red-600 hover:text-red-800 transition-colors"
                        >
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Delete Confirmation Modal */}
      {deleteConfirm.isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-2">Delete Article</h3>
            <p className="text-gray-600 mb-4">
              Are you sure you want to delete "{deleteConfirm.article?.title}"? 
              This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setDeleteConfirm({ isOpen: false, article: null })}
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
                disabled={deleteArticleMutation.isPending}
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteConfirm}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50"
                disabled={deleteArticleMutation.isPending}
              >
                {deleteArticleMutation.isPending ? 'Deleting...' : 'Delete'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ArticleList;

C:\Users\User\Desktop\jink-demo\src\pages\teacher\ArticleUpload.tsx

// src/pages/teacher/ArticleUpload.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { TextInput } from '../../components/articles/TextInput';
import { SentencePreview } from '../../components/articles/SentencePreview';
import { ArticleNameInput } from '../../components/articles/ArticleNameInput';
import { useCreateArticle } from '../../hooks/useArticles';
import { splitIntoSentenceFragments } from '../../utils/sentenceFragmentSplitter';

// Local metadata type that matches the API expectations
type ArticleMetadataUI = {
  grade?: string;
  subject?: string;
  difficulty?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
  estimatedTime?: number;
};

const ArticleUpload: React.FC = () => {
  const navigate = useNavigate();
  const createArticleMutation = useCreateArticle();

  // Form state
  const [currentStep, setCurrentStep] = useState(1);
  const [articleName, setArticleName] = useState('');
  const [title, setTitle] = useState('');
  const [originalText, setOriginalText] = useState('');
  const [fragments, setFragments] = useState<string[]>([]);
  const [metadata, setMetadata] = useState<ArticleMetadataUI>({
    difficulty: 'B1'
  });

  // Auto-generate fragments when text changes
  useEffect(() => {
    if (originalText.trim()) {
      try {
        const autoFragments = splitIntoSentenceFragments(originalText);
        setFragments(autoFragments);
      } catch (error) {
        console.error('Error splitting text:', error);
        setFragments([]);
      }
    } else {
      setFragments([]);
    }
  }, [originalText]);

  const handleNext = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

const handleSubmit = async () => {
  if (!articleName || !title || !originalText || fragments.length === 0) {
    alert('Please complete all required fields');
    return;
  }

  try {
    // Convert fragments to sentences format for API
    const sentences = fragments.map((text, index) => ({
      order: index + 1,
      text: text.trim(),
      wordCount: text.split(/\s+/).filter(w => w.length > 0).length,
      isLong: text.split(/\s+/).filter(w => w.length > 0).length > 20,
      status: 'pending' as const
    }));

    await createArticleMutation.mutateAsync({
      articleName,
      title,
      originalText,
      metadata,
      sentences
    });

    navigate('/teacher/articles');
  } catch (error) {
    console.error('Failed to create article:', error);
    alert('Failed to create article. Please try again.');
  }
};


  const isStepValid = (step: number): boolean => {
    switch (step) {
      case 1:
        return originalText.trim().length > 0 && 
               originalText.split(/\s+/).filter(w => w.length > 0).length >= 20 &&
               originalText.split(/\s+/).filter(w => w.length > 0).length <= 1500;
      case 2:
        return fragments.length > 0;
      case 3:
        return articleName.trim().length > 0 && title.trim().length > 0;
      default:
        return false;
    }
  };

  const canProceed = isStepValid(currentStep);

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Create New Article</h1>
        <p className="text-gray-600">Create a dictation exercise from your article</p>
      </div>

      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          {[1, 2, 3].map((step) => (
            <div key={step} className="flex items-center">
              <div className={`
                w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium
                ${currentStep === step 
                  ? 'bg-blue-600 text-white' 
                  : currentStep > step 
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-200 text-gray-600'
                }
              `}>
                {currentStep > step ? '?? : step}
              </div>
              <div className="ml-3">
                <div className={`text-sm font-medium ${
                  currentStep >= step ? 'text-gray-900' : 'text-gray-500'
                }`}>
                  {step === 1 && 'Article Text'}
                  {step === 2 && 'Review Fragments'}
                  {step === 3 && 'Article Details'}
                </div>
                <div className="text-xs text-gray-500">
                  {step === 1 && 'Enter your article content'}
                  {step === 2 && 'Split and merge fragments'}
                  {step === 3 && 'Name and metadata'}
                </div>
              </div>
              {step < 3 && (
                <div className={`flex-1 h-px mx-4 ${
                  currentStep > step ? 'bg-green-500' : 'bg-gray-200'
                }`} />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <div className="bg-white rounded-lg shadow border p-6 min-h-[500px]">
        {/* Step 1: Article Text */}
        {currentStep === 1 && (
          <div className="space-y-6">
            <div>
              <h3 className="text-xl font-semibold mb-4">Enter Article Text</h3>
              <p className="text-gray-600 mb-6">
                Paste or type your article content. The system will automatically split it into fragments 
                that you can review and adjust in the next step.
              </p>
            </div>

            <TextInput
              value={originalText}
              onChange={setOriginalText}
              placeholder="Paste your article text here. Minimum 20 words, maximum 1500 words..."
            />

            {originalText && (
              <div className="p-4 bg-blue-50 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">Preview: Auto-Generated Fragments</h4>
                <p className="text-sm text-blue-700 mb-3">
                  {fragments.length} fragments will be created. You can fine-tune them in the next step.
                </p>
                {fragments.length > 0 && (
                  <div className="text-xs text-blue-600 space-y-1 max-h-32 overflow-y-auto">
                    {fragments.slice(0, 5).map((fragment, index) => (
                      <div key={index} className="truncate">
                        {index + 1}. {fragment}
                      </div>
                    ))}
                    {fragments.length > 5 && (
                      <div className="italic">... and {fragments.length - 5} more fragments</div>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Step 2: Fragment Review */}
        {currentStep === 2 && (
          <div className="space-y-6">
            <div>
              <h3 className="text-xl font-semibold mb-4">Review and Edit Fragments</h3>
              <p className="text-gray-600 mb-6">
                Review the automatically generated fragments. You can split long fragments, 
                merge short ones, or edit the text directly. Use the Split button to see split points 
                between words.
              </p>
            </div>

            <SentencePreview
              sentences={fragments}
              editable={true}
              onSentencesChange={setFragments}
              originalText={originalText}
              showSentenceIds={true}
            />

            {fragments.length === 0 && (
              <div className="text-center py-12 text-gray-500">
                <div className="text-4xl mb-4">??</div>
                <p className="text-lg font-medium mb-2">No fragments to display</p>
                <p>Go back to add article text first.</p>
              </div>
            )}
          </div>
        )}

        {/* Step 3: Article Details */}
        {currentStep === 3 && (
          <div className="space-y-6">
            <div>
              <h3 className="text-xl font-semibold mb-4">Article Details</h3>
              <p className="text-gray-600 mb-6">
                Provide a name and metadata for your article. The article name will be used 
                for identification and file naming.
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Left Column */}
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Article Title *
                  </label>
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="Enter a descriptive title..."
                    className="w-full p-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                    required
                  />
                </div>

                <ArticleNameInput
                  value={articleName}
                  onChange={setArticleName}
                  title={title}
                />

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Subject
                  </label>
                  <input
                    type="text"
                    value={metadata.subject || ''}
                    onChange={(e) => setMetadata({ ...metadata, subject: e.target.value })}
                    placeholder="e.g., Science, History, Literature..."
                    className="w-full p-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                </div>
              </div>

              {/* Right Column */}
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Grade Level
                  </label>
                  <select
                    value={metadata.grade || ''}
                    onChange={(e) => setMetadata({ ...metadata, grade: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                  >
                    <option value="">Select grade level...</option>
                    <option value="elementary">Elementary</option>
                    <option value="middle">Middle School</option>
                    <option value="high">High School</option>
                    <option value="university">University</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Difficulty Level *
                  </label>
                  <select
                    value={metadata.difficulty || 'B1'}
                    onChange={(e) => setMetadata({ 
                      ...metadata, 
                      difficulty: e.target.value as 'A1'|'A2'|'B1'|'B2'|'C1'|'C2' 
                    })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                    required
                  >
                    <option value="A1">A1 (Beginner)</option>
                    <option value="A2">A2 (Elementary)</option>
                    <option value="B1">B1 (Intermediate)</option>
                    <option value="B2">B2 (Upper-Intermediate)</option>
                    <option value="C1">C1 (Advanced)</option>
                    <option value="C2">C2 (Proficient)</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Estimated Time (minutes)
                  </label>
                  <input
                    type="number"
                    min="5"
                    max="120"
                    value={metadata.estimatedTime || ''}
                    onChange={(e) => setMetadata({ 
                      ...metadata, 
                      estimatedTime: e.target.value ? parseInt(e.target.value) : undefined 
                    })}
                    placeholder="Leave blank for auto-calculation"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                </div>
              </div>
            </div>

            {/* Summary */}
            <div className="bg-gray-50 rounded-lg p-4">
              <h4 className="font-medium text-gray-800 mb-3">Article Summary</h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <span className="text-gray-600">Fragments:</span>
                  <div className="font-medium">{fragments.length}</div>
                </div>
                <div>
                  <span className="text-gray-600">Words:</span>
                  <div className="font-medium">{originalText.split(/\s+/).filter(w => w.length > 0).length}</div>
                </div>
                <div>
                  <span className="text-gray-600">Avg Words/Fragment:</span>
                  <div className="font-medium">
                    {fragments.length > 0 
                      ? Math.round(originalText.split(/\s+/).filter(w => w.length > 0).length / fragments.length)
                      : 0
                    }
                  </div>
                </div>
                <div>
                  <span className="text-gray-600">Est. Time:</span>
                  <div className="font-medium">
                    {metadata.estimatedTime || Math.ceil(originalText.split(/\s+/).filter(w => w.length > 0).length / 200)} min
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Navigation */}
      <div className="flex justify-between items-center mt-8">
        <div>
          {currentStep > 1 && (
            <button
              onClick={handlePrevious}
              className="px-6 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              ??Previous
            </button>
          )}
        </div>

        <div className="flex items-center space-x-4">
          {/* Validation Message */}
          {!canProceed && (
            <div className="text-sm text-red-600">
              {currentStep === 1 && 'Please enter valid article text (20-1500 words)'}
              {currentStep === 2 && 'No fragments available. Check your article text.'}
              {currentStep === 3 && 'Please fill in required fields (title and article name)'}
            </div>
          )}

          {currentStep < 3 ? (
            <button
              onClick={handleNext}
              disabled={!canProceed}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Next ??
            </button>
          ) : (
            <button
              onClick={handleSubmit}
              disabled={!canProceed || createArticleMutation.isPending}
              className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {createArticleMutation.isPending ? 'Creating...' : 'Create Article'}
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default ArticleUpload;

C:\Users\User\Desktop\jink-demo\src\pages\teacher\index.ts

// src/pages/teacher/index.ts

// Export all teacher-related components for easy importing
export { default as TeacherDashboard } from './TeacherDashboard';
export { default as ArticleUpload } from './ArticleUpload';
export { default as ArticleList } from './ArticleList';
export { default as ArticleDetail } from './ArticleDetail';

// Re-export article components for convenience
export * from '../../components/articles/TextInput';
export * from '../../components/articles/SentencePreview';
export * from '../../components/articles/ArticleNameInput';

C:\Users\User\Desktop\jink-demo\src\pages\teacher\TeacherDashboard.tsx

// src/pages/teacher/TeacherDashboard.tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { useArticles, useArticleStats } from '../../hooks/useArticles';
import type { IArticle } from '../../types/article.types';

const TeacherDashboard: React.FC = () => {
  // const navigate = useNavigate();
  const { user } = useAuth();
  const { data: articles, isLoading: articlesLoading } = useArticles();
  const { data: stats, isLoading: statsLoading } = useArticleStats();

  const recentArticles = articles?.slice(0, 5) || [];
  
  const getStatusBadge = (status: IArticle['status']) => {
    const statusConfig = {
      editing: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'Editing' },
      processing: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Processing' },
      ready: { bg: 'bg-green-100', text: 'text-green-800', label: 'Ready' },
      error: { bg: 'bg-red-100', text: 'text-red-800', label: 'Error' }
    };
    
    const config = statusConfig[status];
    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    );
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">
            Welcome back, {user?.fullname || user?.username}!
          </h1>
          <p className="text-gray-600 mt-1">
            Manage your dictation exercises and track student progress
          </p>
        </div>
        
        <Link
          to="/teacher/articles/create"
          className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-lg"
        >
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
          Create New Article
        </Link>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {statsLoading ? (
          // Loading skeletons
          Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="bg-white p-6 rounded-lg shadow border">
              <div className="animate-pulse">
                <div className="h-8 bg-gray-200 rounded mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-2/3"></div>
              </div>
            </div>
          ))
        ) : (
          <>
            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-gray-900">{stats?.total || 0}</div>
                  <div className="text-sm text-gray-600">Total Articles</div>
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-green-600">{stats?.byStatus.ready || 0}</div>
                  <div className="text-sm text-gray-600">Ready for Use</div>
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-yellow-600">{stats?.byStatus.editing || 0}</div>
                  <div className="text-sm text-gray-600">In Progress</div>
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-purple-600">{stats?.byStatus.processing || 0}</div>
                  <div className="text-sm text-gray-600">Processing</div>
                </div>
              </div>
            </div>
          </>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Recent Articles */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg shadow border">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold text-gray-900">Recent Articles</h3>
                <Link
                  to="/teacher/articles"
                  className="text-sm text-blue-600 hover:text-blue-800 transition-colors"
                >
                  View all ??
                </Link>
              </div>
            </div>
            
            <div className="divide-y divide-gray-200">
              {articlesLoading ? (
                // Loading skeletons
                Array.from({ length: 3 }).map((_, i) => (
                  <div key={i} className="p-6 animate-pulse">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                        <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                      </div>
                      <div className="h-6 bg-gray-200 rounded w-16 ml-4"></div>
                    </div>
                  </div>
                ))
              ) : recentArticles.length === 0 ? (
                <div className="p-8 text-center">
                  <div className="text-gray-400 mb-4">
                    <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <p className="text-gray-600 mb-4">No articles created yet</p>
                  <Link
                    to="/teacher/articles/create"
                    className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Create Your First Article
                  </Link>
                </div>
              ) : (
                recentArticles.map((article) => (
                  <div key={article.articleName} className="p-6 hover:bg-gray-50 transition-colors">
                    <div className="flex items-center justify-between">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-2 mb-1">
                          <h4 className="text-sm font-medium text-gray-900 truncate">
                            {article.title}
                          </h4>
                          {getStatusBadge(article.status)}
                        </div>
                        <div className="flex items-center space-x-4 text-xs text-gray-500">
                          <span className="font-mono bg-gray-100 px-2 py-1 rounded">
                            {article.articleName}
                          </span>
                          <span>{article.sentences.length} sentences</span>
                          {article.metadata.difficulty && (
                            <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded">
                              {article.metadata.difficulty}
                            </span>
                          )}
                          <span>Created {formatDate(article.createdAt)}</span>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2 ml-4">
                        <Link
                          to={`/teacher/articles/${article.articleName}`}
                          className="text-blue-600 hover:text-blue-800 text-sm transition-colors"
                        >
                          View
                        </Link>
                        {article.status === 'editing' && (
                          <Link
                            to={`/teacher/articles/${article.articleName}/edit`}
                            className="text-green-600 hover:text-green-800 text-sm transition-colors"
                          >
                            Edit
                          </Link>
                        )}
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="space-y-6">
          {/* Actions Card */}
          <div className="bg-white rounded-lg shadow border">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Quick Actions</h3>
            </div>
            <div className="p-6 space-y-4">
              <Link
                to="/teacher/articles/create"
                className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors"
              >
                <div className="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                  <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                </div>
                <div className="ml-3">
                  <div className="text-sm font-medium text-gray-900">Create Article</div>
                  <div className="text-xs text-gray-500">Start a new dictation exercise</div>
                </div>
              </Link>

              <Link
                to="/teacher/articles"
                className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-green-50 hover:border-green-300 transition-colors"
              >
                <div className="flex-shrink-0 w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                  <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <div className="ml-3">
                  <div className="text-sm font-medium text-gray-900">Manage Articles</div>
                  <div className="text-xs text-gray-500">View and edit existing articles</div>
                </div>
              </Link>

              <div className="flex items-center p-3 border border-gray-200 rounded-lg opacity-50">
                <div className="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                </div>
                <div className="ml-3">
                  <div className="text-sm font-medium text-gray-400">Student Progress</div>
                  <div className="text-xs text-gray-400">Coming in Sprint 2</div>
                </div>
              </div>
            </div>
          </div>

          {/* Tips Card */}
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
            <div className="p-6">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h4 className="text-sm font-medium text-blue-900 mb-2">?�� Pro Tips</h4>
                  <ul className="text-xs text-blue-800 space-y-1">
                    <li>??Aim for 15-25 sentences per article</li>
                    <li>??Keep sentences under 15 words for clarity</li>
                    <li>??Use descriptive article names like "climate_change_2024"</li>
                    <li>??Review sentence splitting before creating</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TeacherDashboard;

C:\Users\User\Desktop\jink-demo\src\pages\About.tsx

function About() {
  return <h2>About Page</h2>;
}
export default About;

C:\Users\User\Desktop\jink-demo\src\pages\AdminDashboard.tsx

import React, { useState } from 'react';
import { useUsers } from '../hooks/useUsers';
import { useGroups } from '../hooks/useGroups';
import { LoadingSpinner } from '../components/common/LoadingSpinner';
import { BulkImport } from '../components/bulk/BulkImport';
import { BulkExport } from '../components/bulk/BulkExport';
import { CSVTemplateDownload } from '../components/bulk/CSVTemplateDownload';
import { CreateUserModal } from '../components/user/CreateUserModal';

const AdminDashboard: React.FC = () => {
  const { data: users, isLoading: usersLoading } = useUsers();
  const { data: groups, isLoading: groupsLoading } = useGroups();
  const [showBulkImport, setShowBulkImport] = useState(false);
  const [showBulkExport, setShowBulkExport] = useState(false);
  const [showCreateUser, setShowCreateUser] = useState(false);
  
  
  if (usersLoading || groupsLoading) {
    return <LoadingSpinner message="Loading dashboard..." />;
  }

  const userStats = users ? {
    total: users.length,
    active: users.filter(u => u.isActive).length,
    inactive: users.filter(u => !u.isActive).length,
    admins: users.filter(u => u.role === 'admin').length,
    teachers: users.filter(u => u.role === 'teacher').length,
    students: users.filter(u => u.role === 'student').length,
    users: users.filter(u => u.role === 'user').length,
  } : null;

  const groupStats = groups ? {
    total: groups.length,
    totalStudents: groups.reduce((sum, g) => sum + (g.studentUsernames?.length || 0), 0)
  } : null;


  

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
          <p className="text-gray-600">System overview and management</p>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-blue-100 rounded-lg">
              <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Users</p>
              <p className="text-2xl font-semibold text-gray-900">{userStats?.total || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-green-100 rounded-lg">
              <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Active Users</p>
              <p className="text-2xl font-semibold text-gray-900">{userStats?.active || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-purple-100 rounded-lg">
              <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Groups</p>
              <p className="text-2xl font-semibold text-gray-900">{groupStats?.total || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-yellow-100 rounded-lg">
              <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Students in Groups</p>
              <p className="text-2xl font-semibold text-gray-900">{groupStats?.totalStudents || 0}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold mb-4">Quick Actions</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          
          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">Bulk Operations</h3>
            <p className="text-sm text-gray-600 mb-3">Import or export users in bulk using CSV files.</p>
            <div className="space-y-2">
              <button
                onClick={() => setShowBulkImport(true)}
                className="w-full bg-blue-600 text-white px-3 py-2 rounded text-sm hover:bg-blue-700"
              >
                Import Users (CSV)
              </button>
              <button
                onClick={() => setShowBulkExport(true)}
                className="w-full bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700"
              >
                Export Users (CSV)
              </button>
              <CSVTemplateDownload />
            </div>
          </div>
{/* 
          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">User Management</h3>
            <p className="text-sm text-gray-600 mb-3">Manage users, roles, and permissions.</p>
            <div className="space-y-2">
              <a
                href="/admin/users"
                className="block w-full bg-indigo-600 text-white px-3 py-2 rounded text-sm hover:bg-indigo-700 text-center"
              >
                Manage Users
              </a>
            </div>
          </div> */}

          {/* // Add this button in the dashboard (replace the existing user management section): */}
          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">User Management</h3>
            <p className="text-sm text-gray-600 mb-3">Manage users, roles, and permissions.</p>
            <div className="space-y-2">
              <button
                onClick={() => setShowCreateUser(true)}
                className="w-full bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700 transition-colors flex items-center justify-center"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Create New User
              </button>
              <a href="/admin/users" className="block w-full bg-indigo-600 text-white px-3 py-2 rounded text-sm hover:bg-indigo-700 text-center transition-colors">
                Manage Users
              </a>
            </div>
          </div>



          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">Group Management</h3>
            <p className="text-sm text-gray-600 mb-3">Manage student groups and assignments.</p>
            <div className="space-y-2">
              <a
                href="/admin/groups"
                className="block w-full bg-purple-600 text-white px-3 py-2 rounded text-sm hover:bg-purple-700 text-center"
              >
                Manage Groups
              </a>
            </div>
          </div>

        </div>
      </div>

      {/* Bulk Operation Modals */}
      {showBulkImport && (
        <BulkImport
          onSuccess={() => setShowBulkImport(false)}
          onCancel={() => setShowBulkImport(false)}
        />
      )}

      {showBulkExport && (
        <BulkExport
          onCancel={() => setShowBulkExport(false)}
        />
      )}

      {showCreateUser && (
        <CreateUserModal
          isOpen={showCreateUser}
          onClose={() => setShowCreateUser(false)}
          onSuccess={() => {
            // Refresh any data if needed
            console.log('User created successfully');
          }}
        />
      )}

    </div>
  );
};

export default AdminDashboard;

C:\Users\User\Desktop\jink-demo\src\pages\Home.tsx

function Home() {
  return <h2>Home Page</h2>;
}
export default Home;

C:\Users\User\Desktop\jink-demo\src\pages\Login.tsx

import type { FormEvent } from 'react';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

export default function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const { login, user } = useAuth();
  const navigate = useNavigate();
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    try {
          await login(username, password);
          if(user)
            {
              switch(user.role) {
                case "admin":
                  navigate("/admin");
                  break;
                case "teacher":
                  navigate("/teacher");
                  break;
                case "student":
                  navigate("/student");
                  break;
                default:
                  navigate("/login");
              }
            }

    } catch (err: any) {
      setError(err?.response?.data?.message ?? 'Login failed');
    }
  };

  // return (
  //   <div style={{ maxWidth: 360, margin: '2rem auto' }}>
  //     <h2>Login</h2>
  //     {error && <p style={{ color: 'crimson' }}>{error}</p>}
  //     <form onSubmit={handleSubmit}>
  //       <label>
  //         Username
  //         <input
  //           required
  //           value={username}
  //           onChange={e => setUsername(e.target.value)}
  //         />
  //       </label>
  //       <br />
  //       <label>
  //         Password
  //         <input
  //           type="password"
  //           required
  //           value={password}
  //           onChange={e => setPassword(e.target.value)}
  //         />
  //       </label>
  //       <br />
  //       <button type="submit">Sign in</button>
  //     </form>
  //   </div>
  // );


  return (
    <div className="max-w-sm mx-auto mt-8 p-6 bg-white rounded-lg shadow">
      <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>
      {error && (
        <p className="text-red-600 mb-4 text-sm text-center">{error}</p>
      )}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block mb-1 font-medium">Username</label>
          <input
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            required
            value={username}
            onChange={e => setUsername(e.target.value)}
          />
        </div>
        <div>
          <label className="block mb-1 font-medium">Password</label>
          <input
            type="password"
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            required
            value={password}
            onChange={e => setPassword(e.target.value)}
          />
        </div>
        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 font-semibold transition-colors"
        >
          Sign in
        </button>
      </form>
    </div>
  );


}

C:\Users\User\Desktop\jink-demo\src\pages\NotFound.tsx

// import React from 'react';
import { useNavigate } from 'react-router-dom';

export default function NotFound() {
  const navigate = useNavigate();

  return (
    <div style={{ textAlign: 'center', padding: '2rem' }}>
      <h2>404 - Page Not Found</h2>
      <p>Sorry, the page you are looking for does not exist.</p>
      <button onClick={() => navigate('/')}>Go to Home</button>
      <button style={{ marginLeft: '1rem' }} onClick={() => navigate('/login')}>
        Go to Login
      </button>
    </div>
  );
}

C:\Users\User\Desktop\jink-demo\src\pages\StudentDashboard.tsx

// import React from 'react';

const StudentDashboard = () => {
  return (
    <div>
      <h1>Student Dashboard Placeholder</h1>
      <p>This is a temporary placeholder component as StudentDashboard is not yet implemented.</p>
    </div>
  );
};

export default StudentDashboard;

C:\Users\User\Desktop\jink-demo\src\pages\TeacherDashboard.tsx

// import React from 'react';

const TeacherDashboard = () => {
  return (
    <div>
      <h1>Teacher Dashboard Placeholder</h1>
      <p>This is a temporary placeholder component as TeacherDashboard is not yet implemented.</p>
    </div>
  );
};

export default TeacherDashboard;

C:\Users\User\Desktop\jink-demo\src\pages\Unauthorized.tsx

// import React from 'react';

const UnauthorizedDashboard = () => {
  return (
    <div>
      <h1>Unauthorized Dashboard Placeholder</h1>
      <p>This is a temporary placeholder component as UnauthorizedDashboard is not yet implemented.</p>
    </div>
  );
};

export default UnauthorizedDashboard;

C:\Users\User\Desktop\jink-demo\src\pages\UserDetail.tsx

import { useParams } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { apiGetUserByUsername } from '../api/apiUsers';

export default function UserDetail() {
  const { username } = useParams<{ username: string }>();


  // const {
  //   data: user,
  //   error,
  //   isLoading,
  // } = useQuery(['user', username], () => apiGetUserByUsername(username!), {
  //   enabled: !!username,
  // });
  const {
      data: user,
      error,
      isLoading,
  } = useQuery({
      queryKey: ['user', username],
      queryFn: () => apiGetUserByUsername(username!),
      enabled: !!username,
  });


  if (isLoading) return <p>Loading profile??/p>;
  if (error) return <p>Error fetching user.</p>;

  return (
    <div>
      <h2>{user!.fullname}</h2>
      <p>
        <b>Username:</b> {user!.username}
      </p>
      <p>
        <b>Role:</b> {user!.role}
      </p>
      <p>
        <b>Status:</b> {user!.isActive ? 'Active' : 'Inactive'}
      </p>
    </div>
  );
}

C:\Users\User\Desktop\jink-demo\src\pages\UserProfile.tsx

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { ChangePasswordModal } from '../components/user/ChangePasswordModal';

const UserProfile: React.FC = () => {
  const { user } = useAuth();
  const [showChangePassword, setShowChangePassword] = useState(false);

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Access Denied</h2>
          <p className="text-gray-600">You need to be logged in to view this page.</p>
        </div>
      </div>
    );
  }

  const handlePasswordChangeSuccess = () => {
    // Show success notification
    alert('Password changed successfully! Please log in again.');
    // In a real app, you might want to logout the user or show a toast notification
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">User Profile</h1>
          <p className="text-gray-600 mt-2">Manage your account settings and preferences</p>
        </div>

        <div className="space-y-6">
          {/* Profile Information Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Profile Information</h2>
            </div>
            <div className="px-6 py-4">
              <dl className="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                <div>
                  <dt className="text-sm font-medium text-gray-500">Username</dt>
                  <dd className="mt-1 text-sm text-gray-900">{user.username}</dd>
                </div>
                
                <div>
                  <dt className="text-sm font-medium text-gray-500">Full Name</dt>
                  <dd className="mt-1 text-sm text-gray-900">{user.fullname}</dd>
                </div>
                
                <div>
                  <dt className="text-sm font-medium text-gray-500">Role</dt>
                  <dd className="mt-1">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      user.role === 'admin' ? 'bg-red-100 text-red-800' :
                      user.role === 'teacher' ? 'bg-blue-100 text-blue-800' :
                      user.role === 'student' ? 'bg-green-100 text-green-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                    </span>
                  </dd>
                </div>
                
                <div>
                  <dt className="text-sm font-medium text-gray-500">Status</dt>
                  <dd className="mt-1">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      user.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {user.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </dd>
                </div>
              </dl>
            </div>
          </div>

          {/* Security Settings Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Security Settings</h2>
            </div>
            <div className="px-6 py-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-medium text-gray-900">Password</h3>
                  <p className="text-sm text-gray-500 mt-1">
                    Change your password to keep your account secure
                  </p>
                </div>
                <button
                  onClick={() => setShowChangePassword(true)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-sm font-medium"
                >
                  Change Password
                </button>
              </div>
            </div>
          </div>

          {/* Account Information Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Account Information</h2>
            </div>
            <div className="px-6 py-4">
              <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
                <div className="flex">
                  <svg className="w-5 h-5 text-blue-400 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                  <div className="text-sm text-blue-700">
                    <p className="font-medium">Account Management</p>
                    <p className="mt-1">
                      For changes to your profile information, role, or account status, 
                      please contact your system administrator.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Quick Actions Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Quick Actions</h2>
            </div>
            <div className="px-6 py-4">
              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                {user.role === 'admin' && (
                  <>
                    <a
                      href="/admin/users"
                      className="flex items-center p-3 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors"
                    >
                      <svg className="w-5 h-5 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                      </svg>
                      <div>
                        <p className="text-sm font-medium text-gray-900">Manage Users</p>
                        <p className="text-xs text-gray-500">Create, edit, and manage user accounts</p>
                      </div>
                    </a>
                    
                    <a
                      href="/admin/groups"
                      className="flex items-center p-3 bg-green-50 rounded-md hover:bg-green-100 transition-colors"
                    >
                      <svg className="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                      <div>
                        <p className="text-sm font-medium text-gray-900">Manage Groups</p>
                        <p className="text-xs text-gray-500">Create and manage student groups</p>
                      </div>
                    </a>
                  </>
                )}

                {user.role === 'teacher' && (
                  <a
                    href="/teacher/groups"
                    className="flex items-center p-3 bg-green-50 rounded-md hover:bg-green-100 transition-colors"
                  >
                    <svg className="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <div>
                      <p className="text-sm font-medium text-gray-900">My Groups</p>
                      <p className="text-xs text-gray-500">Manage your student groups</p>
                    </div>
                  </a>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Change Password Modal */}
      {showChangePassword && (
        <ChangePasswordModal
          isOpen={showChangePassword}
          onClose={() => setShowChangePassword(false)}
          onSuccess={handlePasswordChangeSuccess}
        />
      )}
    </div>
  );
};

export default UserProfile;

C:\Users\User\Desktop\jink-demo\src\pages\Users.tsx

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useUsers } from '../hooks/useUsers';
import { useAuth } from '../context/AuthContext';
import { LoadingSpinner } from '../components/common/LoadingSpinner';
import { EditUserModal } from '../components/user/EditUserModal';
import { PasswordResetModal } from '../components/user/PasswordResetModal';
import { UserStatusToggle } from '../components/user/UserStatusToggle';
import { ConfirmDialog } from '../components/common/ConfirmDialog';
import { useDeleteUser } from '../hooks/useUsers';
import type { IUser } from '../api/apiUsers';
// Add this import at the top


const Users: React.FC = () => {
  const { user: currentUser } = useAuth();
  const { data: users, isLoading, error, refetch } = useUsers();
  const deleteUserMutation = useDeleteUser();

  const [selectedUser, setSelectedUser] = useState<IUser | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showPasswordResetModal, setShowPasswordResetModal] = useState(false);
  const [deleteDialog, setDeleteDialog] = useState<{
    isOpen: boolean;
    user: IUser | null;
  }>({ isOpen: false, user: null });
  

  const handleEditUser = (user: IUser) => {
    setSelectedUser(user);
    setShowEditModal(true);
  };

  const handleResetPassword = (user: IUser) => {
    setSelectedUser(user);
    setShowPasswordResetModal(true);
  };

  const handleDeleteClick = (user: IUser) => {
    setDeleteDialog({ isOpen: true, user });
  };

  const handleDeleteConfirm = async () => {
    if (deleteDialog.user) {
      try {
        await deleteUserMutation.mutateAsync(deleteDialog.user.username);
        setDeleteDialog({ isOpen: false, user: null });
        refetch();
      } catch (error) {
        console.error('Failed to delete user:', error);
      }
    }
  };

  const handleModalSuccess = () => {
    refetch();
    setShowEditModal(false);
    setShowPasswordResetModal(false);
  };

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800';
      case 'teacher': return 'bg-blue-100 text-blue-800';
      case 'student': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner message="Loading users..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Error Loading Users</h2>
          <p className="text-red-600 mb-4">{(error as Error).message}</p>
          <button
            onClick={() => refetch()}
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">User Management</h1>
          <p className="text-gray-600 mt-2">
            Manage all users in the system ({users?.length || 0} total users)
          </p>
        </div>

        {/* Users Table */}
        <div className="bg-white shadow overflow-hidden rounded-lg">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">All Users</h2>
          </div>

          {!users || users.length === 0 ? (
            <div className="text-center py-12">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No users found</h3>
              <p className="mt-1 text-sm text-gray-500">Get started by creating a new user.</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      User
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Role
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {users.map((user) => (
                    <tr key={user.username} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            <div className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
                              <span className="text-white font-medium text-sm">
                                {user.fullname.charAt(0).toUpperCase()}
                              </span>
                            </div>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {user.fullname}
                            </div>
                            <div className="text-sm text-gray-500">
                              @{user.username}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(user.role)}`}>
                          {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <UserStatusToggle
                          username={user.username}
                          isActive={user.isActive}
                          onSuccess={() => refetch()}
                          size="small"
                        />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          <Link
                            to={`/admin/users/${user.username}`}
                            className="text-blue-600 hover:text-blue-900 transition-colors px-2 py-1 rounded hover:bg-blue-50"
                          >
                            View
                          </Link>
                          <button
                            onClick={() => handleEditUser(user)}
                            className="text-green-600 hover:text-green-900 transition-colors px-2 py-1 rounded hover:bg-green-50"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleResetPassword(user)}
                            className="text-yellow-600 hover:text-yellow-900 transition-colors px-2 py-1 rounded hover:bg-yellow-50"
                          >
                            Reset Pwd
                          </button>
                          {currentUser?.username !== user.username && (
                            <button
                              onClick={() => handleDeleteClick(user)}
                              className="text-red-600 hover:text-red-900 transition-colors px-2 py-1 rounded hover:bg-red-50"
                            >
                              Delete
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modals */}
      {showEditModal && selectedUser && (
        <EditUserModal
          isOpen={showEditModal}
          user={selectedUser}
          onClose={() => setShowEditModal(false)}
          onSuccess={handleModalSuccess}
        />
      )}

      {showPasswordResetModal && selectedUser && (
        <PasswordResetModal
          isOpen={showPasswordResetModal}
          username={selectedUser.username}
          fullname={selectedUser.fullname}
          onClose={() => setShowPasswordResetModal(false)}
          onSuccess={handleModalSuccess}
        />
      )}

      <ConfirmDialog
        isOpen={deleteDialog.isOpen}
        title="Delete User"
        message={`Are you sure you want to delete ${deleteDialog.user?.fullname}? This action cannot be undone.`}
        confirmText="Delete"
        cancelText="Cancel"
        type="danger"
        onConfirm={handleDeleteConfirm}
        onCancel={() => setDeleteDialog({ isOpen: false, user: null })}
      />
    </div>
  );
};

export default Users;

C:\Users\User\Desktop\jink-demo\src\routes\guards\RoleGuard.tsx

// src/routes/guards/RoleGuard.tsx
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

interface Props { 
  allow?: Array<'admin' | 'teacher' | 'student'| 'user'>; 
}

export const RoleGuard = ({ allow }: Props) => {
  const { user, loading } = useAuth();
  
  if (loading) {
    return <div className="loading-spinner">Loading session...</div>;
  }
  
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  // if (!allow.includes(user.role)) {
  //   return <Navigate to="/unauthorized" replace />;
  // }


    // If allow prop is provided, perform role checking
  if (allow && !allow.includes(user.role)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return <Outlet />;
};

C:\Users\User\Desktop\jink-demo\src\routes\ProtectedRoute.tsx

import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

export default function ProtectedRoute() {
  const { user, loading } = useAuth();
  if (loading) return <p>Loading...</p>;
  return user ? <Outlet /> : <Navigate to="/login" replace />;
}

C:\Users\User\Desktop\jink-demo\src\types\article.types.ts

// src/types/article.types.ts

// Article interface - matches backend, NO id field
export interface IArticle {
  articleName: string;          // Unique user-assigned identifier
  title: string;
  originalText: string;
  teacherUsername: string;
  metadata: {
    grade?: string;
    subject?: string;
    difficulty?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
    estimatedTime?: number;
  };
  status: 'editing' | 'processing' | 'ready' | 'error';
  processingError?: string;
  fullAudioUrl?: string;
  sentences: ISentence[];
  createdAt?: string;
  updatedAt?: string;
}

// Sentence interface - NO id field, uses sentenceId
export interface ISentence {
  sentenceId: string;           // Generated: articleName + "_" + order
  order: number;
  text: string;
  wordCount: number;
  startTime?: number;
  endTime?: number;
  individualAudioUrl?: string;
  status: 'pending' | 'ready' | 'error';
  isLong: boolean;
  createdAt?: string;
  updatedAt?: string;
}

// API Request Types
export interface CreateArticleRequest {
  articleName: string;
  title: string;
  originalText: string;
  metadata?: IArticle['metadata'];
  sentences: Omit<ISentence, 'sentenceId'>[];
}

export interface UpdateArticleRequest {
  title?: string;
  metadata?: IArticle['metadata'];
}

export interface UpdateSentencesRequest {
  sentences: Omit<ISentence, 'sentenceId'>[];
}

export interface SuggestNameRequest {
  title: string;
}

// API Response Types
export interface ArticleResponse {
  success: boolean;
  article: IArticle;
  message?: string;
}

export interface ArticlesResponse {
  success: boolean;
  count: number;
  articles: IArticle[];
}

export interface SuggestNameResponse {
  success: boolean;
  suggestedName: string;
}

export interface CheckNameResponse {
  success: boolean;
  isAvailable: boolean;
  articleName: string;
}

export interface SentenceResponse {
  success: boolean;
  sentence: ISentence;
  message?: string;
}

export interface TeacherStatsResponse {
  success: boolean;
  stats: {
    total: number;
    byStatus: Record<string, number>;
    recentActivity: IArticle[];
  };
}

// Form Types for React Components
export interface ArticleFormData {
  articleName: string;
  title: string;
  originalText: string;
  metadata: {
    grade: string;
    subject: string;
    difficulty: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
  };
}

export interface SentenceFormData {
  order: number;
  text: string;
  wordCount: number;
  isLong: boolean;
}


export interface IArticleMetadata {
grade?: string;
subject?: string;
difficulty: 'easy' | 'medium' | 'hard';
estimatedTime?: number;
}

// Utility Types
export type ArticleStatus = IArticle['status'];
export type SentenceStatus = ISentence['status'];
export type DifficultyLevel = 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';

C:\Users\User\Desktop\jink-demo\src\utils\auth.ts

// src/utils/auth.ts
const TOKEN_KEY = 'authToken';

export const getAuthToken = (): string | null => {
  return localStorage.getItem(TOKEN_KEY);
};

export const setAuthToken = (token: string): void => {
  localStorage.setItem(TOKEN_KEY, token);
};

export const clearAuthToken = (): void => {
  localStorage.removeItem(TOKEN_KEY);
};

export const isTokenValid = (): boolean => {
  const token = getAuthToken();
  if (!token) return false;
  
  try {
    // Simple JWT payload decode (without verification)
    const payload = JSON.parse(atob(token.split('.')[1]));
    const now = Date.now() / 1000;
    return payload.exp > now;
  } catch {
    return false;
  }
};

C:\Users\User\Desktop\jink-demo\src\utils\sentenceFragmentSplitter copy.ts

// // src/utils/sentenceFragmentSplitter.ts

// export interface FragmentData {
//   text: string;
//   wordCount: number;
//   isLong: boolean;
//   isShort: boolean;
//   isEmpty: boolean;
//   canSplit: boolean; // Whether this fragment has potential split points
// }

// export interface SplitPoint {
//   position: number;
//   character: string;
//   reason: string; // Why this is a good split point
//   priority: 'high' | 'medium' | 'low';
// }

// export interface FragmentValidation {
//   totalFragments: number;
//   optimalRange: boolean; // 15-25 fragments
//   longFragments: number; // >12 words
//   shortFragments: number; // <4 words
//   emptyFragments: number;
//   averageWordCount: number;
// }

// /**
//  * Split text into sentence fragments using intelligent breaking points
//  * Focuses on meaningful chunks rather than complete sentences
//  */
// export const splitIntoSentenceFragments = (text: string): string[] => {
//   if (!text || typeof text !== 'string') {
//     return [];
//   }

//   // First, split by sentence endings to get complete sentences
//   const sentences = text
//     .replace(/\s+/g, ' ')
//     .trim()
//     .replace(/\b(Mr|Mrs|Ms|Dr|Prof|Inc|Ltd|etc|vs|e\.g|i\.e)\./gi, '$1<ABBREV>')
//     .replace(/\d+\.\d+/g, (match) => match.replace('.', '<DECIMAL>'))
//     .split(/[.!?]+\s+(?=[A-Z])|[.!?]+\s*$/)
//     .map(sentence => 
//       sentence
//         .replace(/<ABBREV>/g, '.')
//         .replace(/<DECIMAL>/g, '.')
//         .trim()
//     )
//     .filter(sentence => sentence.length > 0);

//   // Now break each sentence into fragments
//   const fragments: string[] = [];
  
//   sentences.forEach(sentence => {
//     const sentenceFragments = breakIntoFragments(sentence);
//     fragments.push(...sentenceFragments);
//   });

//   return fragments.filter(fragment => fragment.trim().length > 0);
// };

// /**
//  * Break a single sentence into logical fragments
//  */
// const breakIntoFragments = (sentence: string): string[] => {
//   const words = sentence.split(/\s+/);
  
//   // If sentence is short enough, don't split
//   if (words.length <= 12) {
//     return [sentence];
//   }

//   // Find potential split points
//   const splitPoints = findSplitPoints(sentence);
  
//   // If no good split points found, try to split at midpoint
//   if (splitPoints.length === 0) {
//     const midPoint = Math.floor(words.length / 2);
//     const firstPart = words.slice(0, midPoint).join(' ');
//     const secondPart = words.slice(midPoint).join(' ');
//     return [firstPart, secondPart];
//   }

//   // Use the best split point
//   const bestSplit = splitPoints.find(sp => sp.priority === 'high') || splitPoints[0];
//   const firstPart = sentence.substring(0, bestSplit.position).trim();
//   const secondPart = sentence.substring(bestSplit.position).trim();

//   // Recursively split if parts are still too long
//   const fragments: string[] = [];
  
//   const firstFragments = firstPart.split(/\s+/).length > 12 ? breakIntoFragments(firstPart) : [firstPart];
//   const secondFragments = secondPart.split(/\s+/).length > 12 ? breakIntoFragments(secondPart) : [secondPart];
  
//   fragments.push(...firstFragments, ...secondFragments);
  
//   return fragments.filter(f => f.trim().length > 0);
// };

// /**
//  * Find potential split points in a sentence
//  */
// export const findSplitPoints = (text: string): SplitPoint[] => {
//   const splitPoints: SplitPoint[] = [];
  
//   // High priority split points
//   const highPriorityPatterns = [
//     { regex: /,\s+(?:particularly|especially|specifically|including|such as|for example|however|meanwhile|furthermore|moreover|nevertheless|therefore|consequently|thus|hence)/gi, reason: 'Transitional phrase' },
//     { regex: /,\s+(?:which|who|that|where|when|while|although|though|because|since|if|unless|until)/gi, reason: 'Relative/subordinate clause' },
//     { regex: /;\s+/g, reason: 'Semicolon break' },
//     { regex: /:\s+/g, reason: 'Colon break' }
//   ];

//   // Medium priority split points
//   const mediumPriorityPatterns = [
//     { regex: /,\s+(?:and|but|or|yet|so|for|nor)\s+/gi, reason: 'Coordinating conjunction' },
//     { regex: /,\s+(?:during|after|before|while|since|until|when|where|as)\s+/gi, reason: 'Temporal/spatial clause' },
//     { regex: /\s+(?:during|after|before|while|since|until|when|where|as)\s+/gi, reason: 'Clause beginning' }
//   ];

//   // Low priority split points
//   const lowPriorityPatterns = [
//     { regex: /,\s+/g, reason: 'Comma break' },
//     { regex: /\s+(?:and|but|or)\s+/gi, reason: 'Simple conjunction' }
//   ];

//   // Find high priority splits
//   highPriorityPatterns.forEach(pattern => {
//     let match;
//     while ((match = pattern.regex.exec(text)) !== null) {
//       splitPoints.push({
//         position: match.index + match[0].length,
//         character: match[0],
//         reason: pattern.reason,
//         priority: 'high'
//       });
//     }
//   });

//   // Find medium priority splits (only if no high priority found)
//   if (splitPoints.length === 0) {
//     mediumPriorityPatterns.forEach(pattern => {
//       let match;
//       while ((match = pattern.regex.exec(text)) !== null) {
//         splitPoints.push({
//           position: match.index + match[0].length,
//           character: match[0],
//           reason: pattern.reason,
//           priority: 'medium'
//         });
//       }
//     });
//   }

//   // Find low priority splits (only if no others found)
//   if (splitPoints.length === 0) {
//     lowPriorityPatterns.forEach(pattern => {
//       let match;
//       while ((match = pattern.regex.exec(text)) !== null) {
//         splitPoints.push({
//           position: match.index + match[0].length,
//           character: match[0],
//           reason: pattern.reason,
//           priority: 'low'
//         });
//       }
//     });
//   }

//   // Sort by priority and position
//   return splitPoints.sort((a, b) => {
//     const priorityOrder = { high: 0, medium: 1, low: 2 };
//     if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
//       return priorityOrder[a.priority] - priorityOrder[b.priority];
//     }
//     return a.position - b.position;
//   });
// };

// /**
//  * Validate individual fragment
//  */
// export const validateFragment = (fragment: string): FragmentData => {
//   const text = fragment.trim();
//   const words = text.split(/\s+/).filter(word => word.length > 0);
//   const wordCount = words.length;

//   return {
//     text,
//     wordCount,
//     isLong: wordCount > 12,
//     isShort: wordCount < 4 && wordCount > 0,
//     isEmpty: text.length === 0,
//     canSplit: findSplitPoints(text).length > 0
//   };
// };

// /**
//  * Validate entire article's fragment structure
//  */
// export const validateFragments = (fragments: string[]): FragmentValidation => {
//   const fragmentData = fragments.map(validateFragment);
//   const totalWords = fragmentData.reduce((sum, f) => sum + f.wordCount, 0);

//   return {
//     totalFragments: fragments.length,
//     optimalRange: fragments.length >= 15 && fragments.length <= 25,
//     longFragments: fragmentData.filter(f => f.isLong).length,
//     shortFragments: fragmentData.filter(f => f.isShort).length,
//     emptyFragments: fragmentData.filter(f => f.isEmpty).length,
//     averageWordCount: totalWords > 0 ? Math.round(totalWords / fragments.length) : 0
//   };
// };

// /**
//  * Merge two consecutive fragments
//  */
// export const mergeFragments = (fragments: string[], index: number): string[] => {
//   if (index < 0 || index >= fragments.length - 1) {
//     return fragments;
//   }

//   const newFragments = [...fragments];
//   const mergedText = `${fragments[index]} ${fragments[index + 1]}`;
  
//   newFragments.splice(index, 2, mergedText);
//   return newFragments;
// };

// /**
//  * Split a fragment at a specific position
//  */
// export const splitFragmentAt = (fragments: string[], fragmentIndex: number, splitPosition: number): string[] => {
//   if (fragmentIndex < 0 || fragmentIndex >= fragments.length) {
//     return fragments;
//   }

//   const fragment = fragments[fragmentIndex];
//   if (splitPosition <= 0 || splitPosition >= fragment.length) {
//     return fragments;
//   }

//   const newFragments = [...fragments];
//   let firstPart = fragment.substring(0, splitPosition).trim();
//   let secondPart = fragment.substring(splitPosition).trim();

//   // Clean up split - ensure proper spacing
//   if (firstPart.endsWith(',') || firstPart.endsWith(';') || firstPart.endsWith(':')) {
//     // Keep punctuation with first part
//   } else if (secondPart.startsWith(',') || secondPart.startsWith(';') || secondPart.startsWith(':')) {
//     // Move punctuation to first part
//     firstPart += secondPart.charAt(0);
//     secondPart = secondPart.substring(1).trim();
//   }

//   newFragments.splice(fragmentIndex, 1, firstPart, secondPart);
//   return newFragments.filter(f => f.trim().length > 0);
// };

// /**
//  * Smart split using detected split points
//  */
// export const smartSplitFragment = (fragments: string[], fragmentIndex: number): string[] => {
//   if (fragmentIndex < 0 || fragmentIndex >= fragments.length) {
//     return fragments;
//   }

//   const fragment = fragments[fragmentIndex];
//   const splitPoints = findSplitPoints(fragment);
  
//   if (splitPoints.length === 0) {
//     // Fallback to middle split
//     const middlePosition = Math.floor(fragment.length / 2);
//     const splitAt = fragment.lastIndexOf(' ', middlePosition);
//     return splitFragmentAt(fragments, fragmentIndex, splitAt > 0 ? splitAt : middlePosition);
//   }

//   // Use the best split point
//   const bestSplit = splitPoints.find(sp => sp.priority === 'high') || splitPoints[0];
//   return splitFragmentAt(fragments, fragmentIndex, bestSplit.position);
// };

// /**
//  * Undo/Redo functionality
//  */
// export interface FragmentHistory {
//   fragments: string[];
//   timestamp: number;
//   action: string;
// }

// export class FragmentEditor {
//   private history: FragmentHistory[] = [];
//   private currentIndex: number = -1;
//   private maxHistorySize: number = 50;

//   constructor(initialFragments: string[]) {
//     this.saveState(initialFragments, 'Initial');
//   }

//   private saveState(fragments: string[], action: string) {
//     // Remove any future history if we're not at the end
//     if (this.currentIndex < this.history.length - 1) {
//       this.history = this.history.slice(0, this.currentIndex + 1);
//     }

//     // Add new state
//     this.history.push({
//       fragments: [...fragments],
//       timestamp: Date.now(),
//       action
//     });

//     // Limit history size
//     if (this.history.length > this.maxHistorySize) {
//       this.history = this.history.slice(-this.maxHistorySize);
//     }

//     this.currentIndex = this.history.length - 1;
//   }

//   merge(fragments: string[], index: number): string[] {
//     const newFragments = mergeFragments(fragments, index);
//     this.saveState(newFragments, `Merge fragments ${index} and ${index + 1}`);
//     return newFragments;
//   }

//   split(fragments: string[], index: number, position?: number): string[] {
//     const newFragments = position !== undefined 
//       ? splitFragmentAt(fragments, index, position)
//       : smartSplitFragment(fragments, index);
//     this.saveState(newFragments, `Split fragment ${index}`);
//     return newFragments;
//   }

//   edit(fragments: string[], index: number, newText: string): string[] {
//     const newFragments = [...fragments];
//     newFragments[index] = newText;
//     this.saveState(newFragments, `Edit fragment ${index}`);
//     return newFragments;
//   }

//   undo(): string[] | null {
//     if (this.currentIndex <= 0) return null;
//     this.currentIndex--;
//     return [...this.history[this.currentIndex].fragments];
//   }

//   redo(): string[] | null {
//     if (this.currentIndex >= this.history.length - 1) return null;
//     this.currentIndex++;
//     return [...this.history[this.currentIndex].fragments];
//   }

//   canUndo(): boolean {
//     return this.currentIndex > 0;
//   }

//   canRedo(): boolean {
//     return this.currentIndex < this.history.length - 1;
//   }

//   getCurrentState(): string[] {
//     return this.currentIndex >= 0 ? [...this.history[this.currentIndex].fragments] : [];
//   }

//   getHistory(): FragmentHistory[] {
//     return [...this.history];
//   }
// }

// /**
//  * Generate article statistics for teacher review
//  */
// export const getFragmentStats = (text: string) => {
//   const fragments = splitIntoSentenceFragments(text);
//   const validation = validateFragments(fragments);

//   const characterCount = text.length;
//   const wordCount = text.split(/\s+/).filter(word => word.length > 0).length;
//   const estimatedReadingTime = Math.ceil(wordCount / 200);

//   return {
//     text: {
//       characters: characterCount,
//       words: wordCount,
//       estimatedReadingTime
//     },
//     fragments: {
//       count: fragments.length,
//       validation,
//       list: fragments.map(validateFragment)
//     }
//   };
// };

// // Maintain backward compatibility
// export const splitIntoSentences = splitIntoSentenceFragments;
// export const validateSentence = validateFragment;
// export const validateArticle = validateFragments;
// export const mergeSentences = mergeFragments;
// export const splitSentence = splitFragmentAt;
// export const getArticleStats = getFragmentStats;

C:\Users\User\Desktop\jink-demo\src\utils\sentenceFragmentSplitter.ts

// src/utils/sentenceFragmentSplitter.ts

export interface FragmentData {
  text: string;
  wordCount: number;
  isLong: boolean;
  isShort: boolean;
  isEmpty: boolean;
  canSplit: boolean;
}

export interface SplitPoint {
  position: number;
  character: string;
  reason: string;
  priority: 'high' | 'medium' | 'low';
}

export interface FragmentValidation {
  totalFragments: number;
  optimalRange: boolean; // 15??5
  longFragments: number; // >20 words (increased tolerance)
  shortFragments: number; // <3 words
  emptyFragments: number;
  averageWordCount: number;
}

// Updated limits - more tolerant
const MAX_RECURSION_DEPTH = 8;
const MAX_WORDS_PER_FRAGMENT = 20; // Increased from 12
const MIN_WORDS_PER_FRAGMENT = 2; // Decreased from 3
const MIN_ARTICLE_WORDS = 20; // New minimum
const MAX_ARTICLE_WORDS = 1500; // New maximum

/**
 * Split text into sentence fragments - simplified and punctuation-preserving
 */
export const splitIntoSentenceFragments = (text: string): string[] => {
  if (!text || typeof text !== 'string') return [];

  // Validate article length
  const wordCount = text.split(/\s+/).filter(w => w.length > 0).length;
  if (wordCount < MIN_ARTICLE_WORDS) {
    throw new Error(`Article too short. Minimum ${MIN_ARTICLE_WORDS} words required.`);
  }
  if (wordCount > MAX_ARTICLE_WORDS) {
    throw new Error(`Article too long. Maximum ${MAX_ARTICLE_WORDS} words allowed.`);
  }

  // First, split by sentence endings to get complete sentences
  const sentences = splitBySentenceEndings(text);
  
  const fragments: string[] = [];
  for (const sentence of sentences) {
    const sentenceFragments = breakIntoFragments(sentence, 0);
    fragments.push(...sentenceFragments);
  }

  return fragments.filter(f => f.trim().length > 0);
};

/**
 * Split by sentence endings while preserving exact punctuation and spacing
 */
const splitBySentenceEndings = (text: string): string[] => {
  const sentences: string[] = [];
  let currentSentence = '';
  let i = 0;
  
  while (i < text.length) {
    const char = text[i];
    currentSentence += char;
    
    // Check for sentence endings
    if (['.', '!', '?'].includes(char)) {
      // Look ahead to see if this is really a sentence ending
      let j = i + 1;
      
      // Skip whitespace
      while (j < text.length && /\s/.test(text[j])) {
        currentSentence += text[j];
        j++;
      }
      
      // If next char is uppercase or end of text, this is likely a sentence ending
      if (j >= text.length || /[A-Z]/.test(text[j])) {
        sentences.push(currentSentence.trim());
        currentSentence = '';
        i = j;
        continue;
      }
    }
    
    i++;
  }
  
  // Add any remaining text
  if (currentSentence.trim()) {
    sentences.push(currentSentence.trim());
  }
  
  return sentences.filter(s => s.length > 0);
};

/**
 * Break a single sentence into fragments - simplified rules
 */
const breakIntoFragments = (sentence: string, depth: number): string[] => {
  if (depth >= MAX_RECURSION_DEPTH) return [sentence];

  const trimmed = sentence.trim();
  if (!trimmed) return [];

  const words = trimmed.split(/\s+/);
  if (words.length <= MAX_WORDS_PER_FRAGMENT) return [trimmed];

  // Find split points - SIMPLIFIED: only commas and periods
  const splitPoints = findSimpleSplitPoints(trimmed);

  // Choose best split position
  let splitPos: number | null = null;
  if (splitPoints.length > 0) {
    // Prefer splits closer to the middle
    const middle = Math.floor(trimmed.length / 2);
    splitPoints.sort((a, b) => 
      Math.abs(a.position - middle) - Math.abs(b.position - middle)
    );
    splitPos = splitPoints[0].position;
  } else {
    // Fallback: find middle word boundary
    const middleWordIndex = Math.floor(words.length / 2);
    let charCount = 0;
    for (let i = 0; i < middleWordIndex; i++) {
      charCount += words[i].length;
      if (i < middleWordIndex - 1) charCount += 1; // space
    }
    splitPos = charCount;
  }

  if (splitPos === null || splitPos <= 1 || splitPos >= trimmed.length - 1) {
    return [trimmed];
  }

  // Split while preserving exact spacing and punctuation
  const first = trimmed.substring(0, splitPos).trim();
  const second = trimmed.substring(splitPos).trim();

  if (!first || !second) return [trimmed];
  if (first === trimmed || second === trimmed) return [trimmed];

  // Recurse only if still too long
  const firstWords = first.split(/\s+/).length;
  const secondWords = second.split(/\s+/).length;
  
  const leftFragments = firstWords > MAX_WORDS_PER_FRAGMENT 
    ? breakIntoFragments(first, depth + 1) 
    : [first];
    
  const rightFragments = secondWords > MAX_WORDS_PER_FRAGMENT 
    ? breakIntoFragments(second, depth + 1) 
    : [second];

  return [...leftFragments, ...rightFragments];
};

/**
 * Find split points - SIMPLIFIED: only commas and periods
 */
export const findSimpleSplitPoints = (text: string): SplitPoint[] => {
  const points: SplitPoint[] = [];
  
  // High priority: periods followed by space (but not sentence ending)
  const periodRegex = /\.\s+(?![A-Z])/g;
  let match;
  while ((match = periodRegex.exec(text)) !== null) {
    points.push({
      position: match.index + match[0].length,
      character: match[0],
      reason: 'Period break',
      priority: 'high'
    });
  }
  
  // Medium priority: commas followed by space
  const commaRegex = /,\s+/g;
  while ((match = commaRegex.exec(text)) !== null) {
    points.push({
      position: match.index + match[0].length,
      character: match[0],
      reason: 'Comma break',
      priority: 'medium'
    });
  }
  
  return points.sort((a, b) => {
    const priorityOrder = { high: 0, medium: 1, low: 2 };
    if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
      return priorityOrder[a.priority] - priorityOrder[b.priority];
    }
    return a.position - b.position;
  });
};

/**
 * Find ALL possible split points for manual splitting UI
 */
export const findAllSplitPoints = (text: string): Array<{position: number; word: string; reason: string}> => {
  const points: Array<{position: number; word: string; reason: string}> = [];
  const words = text.split(/(\s+)/); // Include spaces
  
  let position = 0;
  for (let i = 0; i < words.length; i += 2) { // Skip spaces (odd indices)
    if (i > 0) {
      points.push({
        position: position,
        word: words[i],
        reason: `Split before "${words[i]}"`
      });
    }
    position += words[i].length;
    if (i + 1 < words.length) {
      position += words[i + 1].length; // Add space length
    }
  }
  
  return points;
};

/**
 * Split fragment at exact character position
 */
export const splitFragmentAt = (fragments: string[], fragmentIndex: number, splitPosition: number): string[] => {
  if (fragmentIndex < 0 || fragmentIndex >= fragments.length) return fragments;

  const fragment = fragments[fragmentIndex];
  if (splitPosition <= 0 || splitPosition >= fragment.length) return fragments;

  // Find the exact word boundary near the split position
  let actualSplit = splitPosition;
  
  // If we're in the middle of a word, move to the nearest word boundary
  if (fragment[actualSplit] !== ' ') {
    // Look backwards for space
    let backPos = actualSplit;
    while (backPos > 0 && fragment[backPos] !== ' ') {
      backPos--;
    }
    
    // Look forwards for space
    let frontPos = actualSplit;
    while (frontPos < fragment.length && fragment[frontPos] !== ' ') {
      frontPos++;
    }
    
    // Choose the closer boundary
    const backDist = actualSplit - backPos;
    const frontDist = frontPos - actualSplit;
    actualSplit = backDist <= frontDist ? backPos : frontPos;
  }

  const first = fragment.substring(0, actualSplit).trim();
  const second = fragment.substring(actualSplit).trim();

  if (!first || !second) return fragments;

  const result = [...fragments];
  result.splice(fragmentIndex, 1, first, second);
  return result;
};

/**
 * Merge fragments while preserving exact spacing
 */
export const mergeFragments = (fragments: string[], index: number): string[] => {
  if (index < 0 || index >= fragments.length - 1) return fragments;
  
  // Merge with single space (teachers can adjust spacing manually if needed)
  const merged = `${fragments[index]} ${fragments[index + 1]}`;
  
  const result = [...fragments];
  result.splice(index, 2, merged);
  return result;
};

/**
 * Validate that merged fragments recreate original text
 */
export const validateFragmentMerge = (fragments: string[], originalText: string): boolean => {
  const merged = fragments.join(' ').replace(/\s+/g, ' ').trim();
  const normalized = originalText.replace(/\s+/g, ' ').trim();
  return merged === normalized;
};

// Rest of the validation and stats functions...
export const validateFragment = (fragment: string): FragmentData => {
  const text = fragment.trim();
  const words = text.split(/\s+/).filter(w => w.length > 0);
  const wordCount = words.length;

  return {
    text,
    wordCount,
    isLong: wordCount > MAX_WORDS_PER_FRAGMENT,
    isShort: wordCount < MIN_WORDS_PER_FRAGMENT && wordCount > 0,
    isEmpty: text.length === 0,
    canSplit: findAllSplitPoints(text).length > 1
  };
};

export const validateFragments = (fragments: string[]): FragmentValidation => {
  const data = fragments.map(validateFragment);
  const totalWords = data.reduce((sum, f) => sum + f.wordCount, 0);

  return {
    totalFragments: fragments.length,
    optimalRange: fragments.length >= 15 && fragments.length <= 25,
    longFragments: data.filter(f => f.isLong).length,
    shortFragments: data.filter(f => f.isShort).length,
    emptyFragments: data.filter(f => f.isEmpty).length,
    averageWordCount: totalWords > 0 ? Math.round(totalWords / fragments.length) : 0
  };
};

// History and editor classes remain the same...
export interface FragmentHistory {
  fragments: string[];
  timestamp: number;
  action: string;
}

export class FragmentEditor {
  private history: FragmentHistory[] = [];
  private currentIndex = -1;
  private maxHistorySize = 50;

  constructor(initialFragments: string[]) {
    this.saveState(initialFragments, 'Initial');
  }

  private saveState(fragments: string[], action: string) {
    if (this.currentIndex < this.history.length - 1) {
      this.history = this.history.slice(0, this.currentIndex + 1);
    }
    this.history.push({ fragments: [...fragments], timestamp: Date.now(), action });
    if (this.history.length > this.maxHistorySize) {
      this.history = this.history.slice(-this.maxHistorySize);
    }
    this.currentIndex = this.history.length - 1;
  }

  merge(fragments: string[], index: number): string[] {
    const result = mergeFragments(fragments, index);
    this.saveState(result, `Merge fragments ${index} & ${index + 1}`);
    return result;
  }

  split(fragments: string[], index: number, position: number): string[] {
    const result = splitFragmentAt(fragments, index, position);
    this.saveState(result, `Split fragment ${index} at position ${position}`);
    return result;
  }

  undo(): string[] | null {
    if (this.currentIndex <= 0) return null;
    this.currentIndex--;
    return [...this.history[this.currentIndex].fragments];
  }

  redo(): string[] | null {
    if (this.currentIndex >= this.history.length - 1) return null;
    this.currentIndex++;
    return [...this.history[this.currentIndex].fragments];
  }

  canUndo(): boolean {
    return this.currentIndex > 0;
  }

  canRedo(): boolean {
    return this.currentIndex < this.history.length - 1;
  }

  getCurrentState(): string[] {
    return this.currentIndex >= 0 ? [...this.history[this.currentIndex].fragments] : [];
  }
}

// Stats function
export const getFragmentStats = (text: string) => {
  const fragments = splitIntoSentenceFragments(text);
  const validation = validateFragments(fragments);
  const characters = text.length;
  const words = text.split(/\s+/).filter(w => w.length > 0).length;
  const estimatedReadingTime = Math.ceil(words / 200);

  return {
    text: { characters, words, estimatedReadingTime },
    fragments: {
      count: fragments.length,
      validation,
      list: fragments.map(validateFragment)
    }
  };
};

// Backward compatibility
export const splitIntoSentences = splitIntoSentenceFragments;
export const validateSentence = validateFragment;
export const validateArticle = validateFragments;
export const mergeSentences = mergeFragments;
export const splitSentence = splitFragmentAt;
export const getArticleStats = getFragmentStats;

// Name validation helpers
export const validateArticleName = (name: string): boolean => {
  const regex = /^[a-zA-Z0-9_\-\(\)]{3,50}$/;
  return regex.test(name);
};

export const suggestArticleNameFromTitle = (title: string): string => {
  return title
    .toLowerCase()
    .replace(/[^a-zA-Z0-9_\-]/g, '_')
    .replace(/_{2,}/g, '_')
    .replace(/^_|_$/g, '')
    .substring(0, 40);
};

C:\Users\User\Desktop\jink-demo\src\utils\sentenceSplitter.ts

// src/utils/sentenceSplitter.ts
import { validateSentence } from './sentenceFragmentSplitter';

export interface SentenceData {
  text: string;
  wordCount: number;
  isLong: boolean;
  isShort: boolean;
  isEmpty: boolean;
}

export interface SentenceValidation {
  totalSentences: number;
  optimalRange: boolean; // 15-25 sentences
  longSentences: number; // >15 words
  shortSentences: number; // <5 words
  emptySentences: number;
  averageWordCount: number;
}

// /**
//  * Split text into sentences using regex-based approach
//  * This provides immediate client-side feedback to teachers
//  */
// export const splitIntoSentences = (text: string): string[] => {
//   if (!text || typeof text !== 'string') {
//     return [];
//   }

//   return text
//     // Normalize whitespace and newlines
//     .replace(/\s+/g, ' ')
//     .trim()
    
//     // Handle common abbreviations that shouldn't end sentences
//     .replace(/\b(Mr|Mrs|Ms|Dr|Prof|Inc|Ltd|etc|vs|e\.g|i\.e)\./gi, '$1<ABBREV>')
    
//     // Handle decimal numbers
//     .replace(/\d+\.\d+/g, (match) => match.replace('.', '<DECIMAL>'))
    
//     // Split on sentence endings followed by whitespace and capital letter or end of string
//     .split(/[.!?]+\s+(?=[A-Z])|[.!?]+\s*$/)
    
//     // Clean up and restore abbreviations
//     .map(sentence => 
//       sentence
//         .replace(/<ABBREV>/g, '.')
//         .replace(/<DECIMAL>/g, '.')
//         .trim()
//     )
    
//     // Filter out empty sentences
//     .filter(sentence => sentence.length > 0)
    
//     // Ensure sentences end with proper punctuation
//     .map(sentence => {
//       const lastChar = sentence.slice(-1);
//       if (!['.', '!', '?'].includes(lastChar)) {
//         return sentence + '.';
//       }
//       return sentence;
//     });
// };

// /**
//  * Validate individual sentence
//  */
// export const validateSentence = (sentence: string): SentenceData => {
//   const text = sentence.trim();
//   const words = text.split(/\s+/).filter(word => word.length > 0);
//   const wordCount = words.length;

//   return {
//     text,
//     wordCount,
//     isLong: wordCount > 15,
//     isShort: wordCount < 5 && wordCount > 0,
//     isEmpty: text.length === 0
//   };
// };

// /**
//  * Validate entire article's sentence structure
//  */
// export const validateArticle = (sentences: string[]): SentenceValidation => {
//   const sentenceData = sentences.map(validateSentence);
//   const totalWords = sentenceData.reduce((sum, s) => sum + s.wordCount, 0);

//   return {
//     totalSentences: sentences.length,
//     optimalRange: sentences.length >= 15 && sentences.length <= 25,
//     longSentences: sentenceData.filter(s => s.isLong).length,
//     shortSentences: sentenceData.filter(s => s.isShort).length,
//     emptySentences: sentenceData.filter(s => s.isEmpty).length,
//     averageWordCount: totalWords > 0 ? Math.round(totalWords / sentences.length) : 0
//   };
// };

// /**
//  * Merge two consecutive sentences
//  */
// export const mergeSentences = (sentences: string[], index: number): string[] => {
//   if (index < 0 || index >= sentences.length - 1) {
//     return sentences;
//   }

//   const newSentences = [...sentences];
//   const mergedText = `${sentences[index].replace(/[.!?]+$/, '')} ${sentences[index + 1]}`;
  
//   newSentences.splice(index, 2, mergedText);
//   return newSentences;
// };

// /**
//  * Split a sentence at a specific position
//  */
// export const splitSentence = (sentences: string[], sentenceIndex: number, splitPosition: number): string[] => {
//   if (sentenceIndex < 0 || sentenceIndex >= sentences.length) {
//     return sentences;
//   }

//   const sentence = sentences[sentenceIndex];
//   if (splitPosition <= 0 || splitPosition >= sentence.length) {
//     return sentences;
//   }

//   const newSentences = [...sentences];
//   const firstPart = sentence.substring(0, splitPosition).trim();
//   const secondPart = sentence.substring(splitPosition).trim();

//   // Ensure proper punctuation
//   const firstSentence = firstPart.match(/[.!?]$/) ? firstPart : firstPart + '.';
//   const secondSentence = secondPart.charAt(0).toUpperCase() + secondPart.slice(1);

//   newSentences.splice(sentenceIndex, 1, firstSentence, secondSentence);
//   return newSentences;
// };

/**
 * Auto-suggest sentence improvements
 */
export const getSentenceSuggestions = (sentences: string[]): Array<{
  index: number;
  type: 'long' | 'short' | 'merge' | 'split';
  message: string;
  severity: 'warning' | 'suggestion';
}> => {
  const suggestions: Array<{
    index: number;
    type: 'long' | 'short' | 'merge' | 'split';
    message: string;
    severity: 'warning' | 'suggestion';
  }> = [];

  sentences.forEach((sentence, index) => {
    const validation = validateSentence(sentence);

    if (validation.isLong) {
      suggestions.push({
        index,
        type: 'long',
        message: `This sentence has ${validation.wordCount} words. Consider splitting it for better dictation.`,
        severity: 'warning'
      });
    }

    if (validation.isShort && !validation.isEmpty) {
      suggestions.push({
        index,
        type: 'short',
        message: `This sentence is quite short (${validation.wordCount} words). Consider merging with adjacent sentence.`,
        severity: 'suggestion'
      });
    }
  });

  return suggestions;
};

// /**
//  * Generate article statistics for teacher review
//  */
// export const getArticleStats = (text: string) => {
//   const sentences = splitIntoSentences(text);
//   const validation = validateArticle(sentences);
//   const suggestions = getSentenceSuggestions(sentences);

//   const characterCount = text.length;
//   const wordCount = text.split(/\s+/).filter(word => word.length > 0).length;
//   const estimatedReadingTime = Math.ceil(wordCount / 200); // Average reading speed

//   return {
//     text: {
//       characters: characterCount,
//       words: wordCount,
//       estimatedReadingTime
//     },
//     sentences: {
//       count: sentences.length,
//       validation,
//       suggestions,
//       list: sentences.map(validateSentence)
//     }
//   };
// };

/**
 * Generate sentence ID from article name and order
 */
export const generateSentenceId = (articleName: string, order: number): string => {
  return `${articleName}_${order}`;
};

/**
 * Parse sentence ID to get article name and order
 */
export const parseSentenceId = (sentenceId: string): { articleName: string; order: number } | null => {
  const lastUnderscoreIndex = sentenceId.lastIndexOf('_');
  if (lastUnderscoreIndex === -1) {
    return null;
  }
  
  const articleName = sentenceId.substring(0, lastUnderscoreIndex);
  const orderStr = sentenceId.substring(lastUnderscoreIndex + 1);
  const order = parseInt(orderStr, 10);
  
  if (isNaN(order)) {
    return null;
  }
  
  return { articleName, order };
};

/**
 * Validate article name format
 */
export const validateArticleName = (name: string): boolean => {
  const regex = /^[a-zA-Z0-9_\-\(\)]{3,50}$/;
  return regex.test(name);
};

/**
 * Clean title to suggest article name
 */
export const suggestArticleNameFromTitle = (title: string): string => {
  return title.toLowerCase()
    .replace(/[^a-zA-Z0-9_\-]/g, '_')
    .replace(/_{2,}/g, '_')
    .replace(/^_|_$/g, '')
    .substring(0, 40);
};


export * from './sentenceFragmentSplitter';



C:\Users\User\Desktop\jink-demo\src\App.css

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

C:\Users\User\Desktop\jink-demo\src\App.tsx

import { Routes, Route, Navigate } from 'react-router-dom';
import { RoleGuard } from './routes/guards/RoleGuard';

// Import your existing pages
import Login from './pages/Login';
import AdminDashboard from './pages/AdminDashboard';
// import TeacherDashboard from './pages/TeacherDashboard';
import StudentDashboard from './pages/StudentDashboard';
import Users from './pages/Users';
import Unauthorized from './pages/Unauthorized';
import NotFound from './pages/NotFound';

// Import new admin pages
import Groups from './pages/admin/Groups';
import BulkOperations from './pages/admin/BulkOperations';

import UserDetail from './pages/UserDetail';
import UserProfile from './pages/UserProfile';
import Navbar from './components/Navbar';
import { useLocation } from 'react-router-dom';


import { TeacherDashboard, ArticleList, ArticleUpload, ArticleDetail } from './pages/teacher';



function App() {

  const location = useLocation();
  const hideNavbar = ["/login", "/unauthorized"].includes(location.pathname);
  return (
    <>
      {!hideNavbar && <Navbar />}
      <Routes>
        {/* Public routes */}
        <Route path="/login" element={<Login />} />
        <Route path="/unauthorized" element={<Unauthorized />} />


        <Route element={<RoleGuard />}>
          <Route path="/profile" element={<UserProfile />} />
        </Route>

        {/* Admin routes */}
        <Route element={<RoleGuard allow={["admin"]} />}>
          {/* <Route path="/admin" element={<AdminDashboard />} />
          <Route path="/admin/users" element={<Users />} />
          <Route path="/admin/groups" element={<Groups />} />
          <Route path="/admin/bulk-operations" element={<BulkOperations />} /> */}


            <Route path="/admin" element={<AdminDashboard />} />
            <Route path="/admin/users" element={<Users />} />
            <Route path="/admin/users/:username" element={<UserDetail />} />
            <Route path="/admin/groups" element={<Groups />} />
            <Route path="/admin/bulk-operations" element={<BulkOperations />} />
        </Route>

        {/* Teacher routes */}
        <Route element={<RoleGuard allow={["teacher"]} />}>
          <Route path="/teacher" element={<TeacherDashboard />} />
          <Route path="/teacher/dashboard" element={<TeacherDashboard />} />
          <Route path="/teacher/articles" element={<ArticleList />} />
          <Route path="/teacher/articles/create" element={<ArticleUpload />} />
          <Route path="/teacher/articles/:articleName" element={<ArticleDetail />} />
          <Route path="/teacher/articles/:articleName/edit" element={<ArticleUpload />} />
        </Route>

        {/* Student routes */}
        <Route element={<RoleGuard allow={["student"]} />}>
          <Route path="/student" element={<StudentDashboard />} />
        </Route>

        {/* Default redirect */}
        <Route path="/" element={<Navigate to="/login" replace />} />
        <Route path="*" element={<NotFound />} />
      </Routes>    
    </>

  );
}

export default App;

C:\Users\User\Desktop\jink-demo\src\App2.css


* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  margin: 20px;
  padding: 0;
}

h1 {
  margin-top: 0;
  font-size: 22px;
}

h2 {
  margin-top: 0;
  font-size: 20px;
}

h3 {
  margin-top: 0;
  font-size: 18px;
}

h4 {
  margin-top: 0;
  font-size: 16px;
}

h5 {
  margin-top: 0;
  font-size: 14px;
}

h6 {
  margin-top: 0;
  font-size: 12px;
}

code {
  font-size: 1.2em;
}

ul {
  padding-inline-start: 20px;
}

* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  margin: 20px;
  padding: 0;
}

.square {
  background: #fff;
  border: 1px solid #999;
  float: left;
  font-size: 24px;
  font-weight: bold;
  line-height: 34px;
  height: 34px;
  margin-right: -1px;
  margin-top: -1px;
  padding: 0;
  text-align: center;
  width: 34px;
}

.board-row:after {
  clear: both;
  content: '';
  display: table;
}

.status {
  margin-bottom: 10px;
}
.game {
  display: flex;
  flex-direction: row;
}

.game-info {
  margin-left: 20px;
}


C:\Users\User\Desktop\jink-demo\src\App2.tsx

// import { useState } from 'react'
// // import viteLogo from '/vite.svg'
// // import './App.css'
// import Square from './Board'
import {Game} from './Board'
import './App2.css'

function App2() {
  // const [count, setCount] = useState(0)

  return (
    <>
      <Game></Game>
    </>
  )
}

export default App2

C:\Users\User\Desktop\jink-demo\src\Board.tsx

// import React from "react";
import { useState } from "react";

// https://react.dev/learn/tutorial-tic-tac-toe#lifting-state-up-again
interface SquareProps {
  value: string;
  // Or value: string | number | null;
  onSquareClick: () => void;
}

interface BoardProps {
  xIsNext: boolean;
  squares: string[];
  onPlay: (sq: string[]) => void;
}

function Square({ value, onSquareClick }: SquareProps) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function calculateWinner(squares: String[]) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

export function Board({ xIsNext, squares, onPlay }: BoardProps) {
  function handleClick(i: number) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = "X";
    } else {
      nextSquares[i] = "O";
    }
    onPlay(nextSquares);
  }

  // const [squares, setSquares] = useState(Array(9).fill(''));
  // const [xIsNext, setXIsNext] = useState(true);

  // function handleClick(i:number) {

  //     if (squares[i] || calculateWinner(squares)) {
  //         return;
  //     }

  //     const nextSquares = squares.slice();
  //     if (xIsNext) {
  //     nextSquares[i] = "X";
  //     } else {
  //     nextSquares[i] = "O";
  //     }
  //     setSquares(nextSquares);
  //     setXIsNext(!xIsNext);
  // }

  const winner = calculateWinner(squares);
  let winstatus;
  if (winner) {
    winstatus = "Winner: " + winner;
  } else {
    winstatus = "Next player: " + (xIsNext ? "X" : "O");
  }

  return (
    <>
      <div className="status">{winstatus}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

export function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill("")]);
  // const currentSquares = history[history.length - 1];
  const [currentMove, setCurrentMove] = useState(0);
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares: string[]) {
  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
  setHistory(nextHistory);
  setCurrentMove(nextHistory.length - 1);
    setXIsNext(!xIsNext);
  }

  function jumpTo(nextMove: number) {
    setCurrentMove(nextMove);
    setXIsNext(nextMove % 2 === 0);
  }

  const moves = history.map((_squares, move) => {
    let description;
    if (move > 0) {
      description = "Go to move #" + move;
    } else {
      description = "Go to game start";
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

export default Square;

C:\Users\User\Desktop\jink-demo\src\index.css

@import "tailwindcss";

/* @tailwind base;
@tailwind components;
@tailwind utilities; */

/* :root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
} */

C:\Users\User\Desktop\jink-demo\src\main.tsx

// src/main.tsx (update your existing file)
import './index.css';
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { AuthProvider } from './context/AuthContext';
import App from './App';




// Create a client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: (failureCount, error: any) => {
        // Don't retry on 401/403 errors
        if (error?.response?.status === 401 || error?.response?.status === 403) {
          return false;
        }
        return failureCount < 3;
      },
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000,   // 10 minutes
    },
  },
});

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <QueryClientProvider client={queryClient}>
        <AuthProvider>
          <App />
        </AuthProvider>
        <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
    </BrowserRouter>
  </React.StrictMode>
);

C:\Users\User\Desktop\jink-demo\src\RouterApp.tsx


import {
  BrowserRouter,
  Routes,
  Route,
  Link,
  Outlet,
} from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import ProtectedRoute from './routes/ProtectedRoute';

import Home from './pages/Home';
import About from './pages/About';
import Users from './pages/Users';
import UserDetail from './pages/UserDetail';
import Login from './pages/Login';
import NotFound from './pages/NotFound';

function Layout() {
  return (
    <>
      <nav>
        <Link to="/">Home</Link> | <Link to="/about">About</Link> |{' '}
        <Link to="/users">Users</Link>
      </nav>
      <hr />
      <Outlet />
    </>
  );
}

export default function RouterApp() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route element={<Layout />}>
            <Route index element={<Home />} />
            <Route path="about" element={<About />} />

            {/* Public route */}
            <Route path="login" element={<Login />} />

            {/* Private routes */}
            <Route element={<ProtectedRoute />}>
              <Route path="users" element={<Users />} />
              <Route path="users/:username" element={<UserDetail />} />
            </Route>

            <Route path="*" element={<NotFound />} />
          </Route>
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  );
}

C:\Users\User\Desktop\jink-demo\src\vite-env.d.ts

/// <reference types="vite/client" />
