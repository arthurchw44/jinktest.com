
C:\Users\User\Desktop\jink-demo\src\api\apiArticles.ts

import type { AudioStatusResponse, FragmentTimingResponse, SignedAudioUrlResponse } from '../types/audio.types'
import api from './axios';

// Get audio status and timing information
export const apiGetAudioStatus = async (articleName: string): Promise<AudioStatusResponse> => {
  const { data } = await api.get<AudioStatusResponse>(`/articles/${articleName}/audio/status`)
  return data
}

// Get specific fragment timing
export const apiGetFragmentTiming = async (articleName: string, fragmentIndex: number): Promise<FragmentTimingResponse> => {
  const { data } = await api.get<FragmentTimingResponse>(`/articles/${articleName}/audio/fragment/${fragmentIndex}`)
  return data
}

// Get signed URL for audio file (30-minute expiry)
export const apiGetSignedAudioUrl = async (articleName: string): Promise<SignedAudioUrlResponse> => {
  const { data } = await api.get<SignedAudioUrlResponse>(`/articles/${articleName}/audio/url`)
  return data
}

// Generate audio with quality selection
export const apiGenerateAudio = async (articleName: string, quality: 'high' | 'medium' | 'low' = 'high') => {
  const { data } = await api.post(`/articles/${articleName}/generate-audio`, { quality })
  return data
}


C:\Users\User\Desktop\jink-demo\src\api\apiAuth.ts

import api from './axios';

export interface LoginRequest {
  username: string;
  password: string;
}

export interface UserResponse {
  id: string;
  username: string;
  fullname: string;
  role: 'admin' | 'teacher' | 'user' | 'student';
  isActive: boolean;
}

export interface LoginResponse {
  success: boolean;
  message: string;
  token: string;
  user: UserResponse;
}

export const apiLogin = async (payload: LoginRequest) => {
  const { data } = await api.post<LoginResponse>('/auth/login', payload);
  return data;
};

export const apiGetProfile = async () => {
  const { data } = await api.get<{ success: boolean; user: UserResponse }>(
    '/auth/profile'
  );
  return data.user;
};


export interface ChangePasswordRequest {
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordResponse {
  success: boolean;
  message: string;
}

export const apiChangeOwnPassword = async (payload: ChangePasswordRequest) => {
  // The endpoint and HTTP method are typical for this operation
  const { data } = await api.put<ChangePasswordResponse>(
    '/auth/password',
    payload
  );
  return data;
};

// Add this interface at the top with other interfaces
export interface LogoutAllResponse {
  success: boolean;
  message: string;
}

// Add this function after existing functions
export const apiLogoutAll = async (): Promise<LogoutAllResponse> => {
  const { data } = await api.post<LogoutAllResponse>('/auth/logout-all');
  return data;
};


// Add this interface at the top with other interfaces
export interface LogoutResponse {
  success: boolean;
  message: string;
}

// Add this function after existing functions
export const apiLogout = async (): Promise<LogoutResponse> => {
  const { data } = await api.post<LogoutResponse>('/auth/logout');
  return data;
};

C:\Users\User\Desktop\jink-demo\src\api\apiBulk.ts

// src/api/apiBulk.ts
import api from './axios';

export interface IBulkImportResult {
  imported: number;
  errorDetails: Array<{
    row: number;
    message: string;
    data?: any;
  }>;
}

export interface IExportFilters {
  role?: string;
  isActive?: boolean;
  createdAfter?: string;
  createdBefore?: string;
}

export const apiImportUsersCSV = async (csvFile: File): Promise<IBulkImportResult> => {
  const formData = new FormData();
  formData.append('csvFile', csvFile);
  
  const { data } = await api.post<IBulkImportResult>('/users/bulk/import', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });
  return data;
};

export const apiExportUsersCSV = async (filters?: IExportFilters): Promise<Blob> => {
  const response = await api.get('/users/bulk/export', {
    params: filters,
    responseType: 'blob',
  });
  return response.data;
};

export const apiDownloadCSVTemplate = async (): Promise<Blob> => {
  const response = await api.get('/users/bulk/template', {
    responseType: 'blob',
  });
  return response.data;
};


C:\Users\User\Desktop\jink-demo\src\api\apiGroups.ts

// src/api/apiGroups.ts
import api from './axios';

export interface IStudentGroup {
  _id?: string;
  name: string;
  description?: string;
  teacherUsername: string;
  studentUsernames: string[];
  isActive: boolean;
  createdAt?: Date;
  updatedAt?: Date;
  metadata?: {
    grade?: string;
    subject?: string;
    academicYear?: string;
  };
}

export interface IGroupCreate {
  name: string;
  description?: string;
  metadata?: {
    grade?: string;
    subject?: string;
    academicYear?: string;
  };
}

export interface IGroupUpdate {
  name?: string;
  description?: string;
  metadata?: {
    grade?: string;
    subject?: string;
    academicYear?: string;
  };
}

export const apiListGroups = async (): Promise<IStudentGroup[]> => {
  const { data } = await api.get<{ groups: IStudentGroup[] }>('/groups');
  return data.groups;
};

export const apiCreateGroup = async (groupData: IGroupCreate): Promise<IStudentGroup> => {
  const { data } = await api.post<{ group: IStudentGroup }>('/groups', groupData);
  return data.group;
};

export const apiGetGroup = async (groupId: string): Promise<IStudentGroup> => {
  const { data } = await api.get<{ group: IStudentGroup }>(`/groups/${groupId}`);
  return data.group;
};

export const apiUpdateGroup = async (groupId: string, groupData: IGroupUpdate): Promise<IStudentGroup> => {
  const { data } = await api.put<{ group: IStudentGroup }>(`/groups/${groupId}`, groupData);
  return data.group;
};

export const apiDeleteGroup = async (groupId: string): Promise<{ success: boolean }> => {
  const { data } = await api.delete<{ success: boolean }>(`/groups/${groupId}`);
  return data;
};

export const apiManageGroupMembers = async (
  groupId: string, 
  memberData: { add?: string[], remove?: string[] }
): Promise<IStudentGroup> => {
  const { data } = await api.put<{ group: IStudentGroup }>(`/groups/${groupId}/members`, memberData);
  return data.group;
};


C:\Users\User\Desktop\jink-demo\src\api\apiSessions.ts

import { api } from './axios';

export interface StudentOverallProgress {
  studentUsername: string;
  totalArticlesAttempted: number;
  completedArticles: number;
  averageScore: number; // 0-1
  totalTimeSpent: number; // seconds
  recentSessions: Array<{
    articleName: string;
    score: number;
    completionRate: number;
    timestamp: Date;
  }>;
  improvementTrend: 'improving' | 'declining' | 'stable';
}

export interface StudentArticleProgress {
  studentUsername: string;
  articleName: string;
  totalAttempts: number;
  bestScore: number; // 0-1
  averageScore: number; // 0-1
  totalTimeSpent: number; // seconds
  lastPracticed: Date;
  completionRate: number; // 0-100
}

// Get student's overall progress from server
export const apiGetStudentProgress = async (): Promise<StudentOverallProgress> => {
  const { data } = await api.get<{ success: boolean; progress: StudentOverallProgress }>('/sessions/my-progress');
  return data.progress;
};

// Get student's progress for specific article
export const apiGetStudentArticleProgress = async (articleName: string): Promise<StudentArticleProgress | null> => {
  const { data } = await api.get<{ success: boolean; progress: StudentArticleProgress | null }>(`/sessions/my-progress/${articleName}`);
  return data.progress;
};


export const apiGetStudentsProgress = async () => {
  const response = await api.get('/sessions/analytics/students');
  return response.data;
};


C:\Users\User\Desktop\jink-demo\src\api\apiUsers.ts

// src/api/apiUsers.ts
import api from './axios';

export interface IUser {
  username: string;
  fullname: string;
  role: 'admin' | 'teacher' | 'student' | 'user';
  isActive: boolean;
  email?: string;
}

export interface IUserCreate {
  username: string;
  fullname: string;
  email?: string;
  password: string;
  role?: 'admin' | 'teacher' | 'student' | 'user';
  isActive?: boolean;
}

export interface IUserUpdate {
  username?: string;
  fullname?: string;
  email?: string;
  role?: 'admin' | 'teacher' | 'student' | 'user';
  isActive?: boolean;
}

// Existing functions (enhanced)
export const apiListUsers = async (): Promise<IUser[]> => {
  const { data } = await api.get<{ users: IUser[] }>('/users');
  return data.users;
};

export const apiGetUserByUsername = async (username: string): Promise<IUser> => {
  const { data } = await api.get<{ user: IUser }>(`/users/${username}`);
  return data.user;
};

// NEW: Enhanced user management functions
export const apiCreateUser = async (userData: IUserCreate): Promise<IUser> => {
  const { data } = await api.post<{ user: IUser }>('/users', userData);
  return data.user;
};

export const apiUpdateUser = async (username: string, userData: IUserUpdate): Promise<IUser> => {
  const { data } = await api.put<{ user: IUser }>(`/users/${username}`, userData);
  return data.user;
};

export const apiDeleteUser = async (username: string): Promise<{ success: boolean }> => {
  const { data } = await api.delete<{ success: boolean }>(`/users/${username}`);
  return data;
};



export const apiToggleUserStatus = async (username: string): Promise<IUser> => {
  const { data } = await api.patch<{ user: IUser }>(`/users/${username}/status`);
  return data.user;
};

export const apiResetPassword = async (username: string, newPassword: string): Promise<{ success: boolean }> => {
  const { data } = await api.put<{ success: boolean }>(`/users/${username}/password`, { newPassword });
  return data;
};


C:\Users\User\Desktop\jink-demo\src\api\axios.ts

// src/api/axios.ts
import axios from 'axios';
import { getAuthToken, clearAuthToken } from '../utils/auth';

export const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL ?? 'http://localhost:3000/api',
});

// Request interceptor: attach JWT token
api.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor: handle 401/403 by redirecting to login
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401 ) {
      // Token expired or invalid - clear and redirect to login
      clearAuthToken();
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);




export default api;


C:\Users\User\Desktop\jink-demo\src\assets\react.svg

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

C:\Users\User\Desktop\jink-demo\src\components\admin\AdminDashboard.tsx

import React from 'react';
import { Link } from 'react-router-dom';

export const AdminDashboardCard: React.FC = () => {
  return (
    <div className="bg-white overflow-hidden shadow rounded-lg">
      <div className="p-5">
        <div className="flex items-center">
          <div className="flex-shrink-0">
            <svg className="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <div className="ml-5 w-0 flex-1">
            <dl>
              <dt className="text-sm font-medium text-gray-500 truncate">
                Article Management
              </dt>
              <dd>
                <div className="text-lg font-medium text-gray-900">
                  System Articles
                </div>
              </dd>
            </dl>
          </div>
        </div>
      </div>
      <div className="bg-gray-50 px-5 py-3">
        <div className="text-sm">
          <Link 
            to="/admin/articles" 
            className="font-medium text-cyan-700 hover:text-cyan-900 transition-colors"
          >
            View all articles
          </Link>
        </div>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\articles\tests\ArticleNameInput.test.tsx

import { render, screen, fireEvent } from '@testing-library/react';
import { ArticleNameInput } from '../ArticleNameInput';
import { describe, test, expect, vi } from 'vitest';

console.log('ENV', typeof window, typeof document, typeof navigator);

describe('ArticleNameInput', () => {
  test('shows validation message for short name', () => {
    const onChange = vi.fn();
    render(<ArticleNameInput value="ab" onChange={onChange} />);
    expect(screen.getByText(/at least 3 characters/i)).toBeInTheDocument();
  });

  test('calls onChange when typing', () => {
    const onChange = vi.fn();
    render(<ArticleNameInput value="" onChange={onChange} />);
    const input = screen.getByPlaceholderText(/enter unique article identifier/i);
    fireEvent.change(input, { target: { value: 'climate-2025' } });
    expect(onChange).toHaveBeenCalledWith('climate-2025');
  });
});


C:\Users\User\Desktop\jink-demo\src\components\articles\ArticleNameInput.tsx

// src/components/articles/ArticleNameInput.tsx
import React, { useEffect } from 'react';
import { validateArticleName, suggestArticleNameFromTitle } from '../../utils/sentenceFragmentSplitter';

interface ArticleNameInputProps {
  value: string;
  onChange: (value: string) => void;
  title?: string; // For auto-suggestion
  className?: string;
}

export const ArticleNameInput: React.FC<ArticleNameInputProps> = ({
  value,
  onChange,
  title = '',
  className = ''
}) => {
  const isValid = validateArticleName(value);
  const suggestion = title ? suggestArticleNameFromTitle(title) : '';

  // Auto-suggest article name when title changes (only if current value is empty)
  useEffect(() => {
    if (title && !value && suggestion) {
      onChange(suggestion);
    }
  }, [title, value, suggestion, onChange]);

  const handleSuggestionClick = () => {
    if (suggestion) {
      onChange(suggestion);
    }
  };

  const getValidationMessage = () => {
    if (!value) return null;
    
    if (value.length < 3) return 'Article name must be at least 3 characters';
    if (value.length > 50) return 'Article name must be 50 characters or less';
    if (!/^[a-zA-Z0-9_\-\(\)]+$/.test(value)) {
      return 'Only letters, numbers, underscore, dash, and parentheses allowed';
    }
    return null;
  };

  const validationMessage = getValidationMessage();

  return (
    <div className="space-y-2">
      <label className="block text-sm font-medium text-gray-700">
        Article Name *
      </label>
      
      <div className="relative">
        <input
          type="text"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder="Enter unique article identifier..."
          className={`w-full p-3 border rounded-lg focus:outline-none transition-colors ${
            !value
              ? 'border-gray-300 focus:border-blue-500'
              : isValid
              ? 'border-green-300 focus:border-green-500 bg-green-50'
              : 'border-red-300 focus:border-red-500 bg-red-50'
          } ${className}`}
          required
        />
        
        {isValid && value && (
          <div className="absolute right-3 top-3 text-green-600">
            ✓
          </div>
        )}
      </div>

      {/* Auto-suggestion */}
      {suggestion && suggestion !== value && (
        <div className="flex items-center space-x-2">
          <span className="text-xs text-gray-600">Suggested:</span>
          <button
            type="button"
            onClick={handleSuggestionClick}
            className="text-xs text-blue-600 hover:text-blue-800 underline"
          >
            {suggestion}
          </button>
        </div>
      )}

      {/* Validation message */}
      {validationMessage && (
        <div className="text-xs text-red-600">
          {validationMessage}
        </div>
      )}

      {/* Help text */}
      <div className="text-xs text-gray-500">
        Used for file naming and identification. Must be unique and contain only letters, 
        numbers, underscore, dash, or parentheses.
      </div>

      {/* Preview of generated filenames */}
      {value && isValid && (
        <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
          <div className="font-medium mb-1">Generated files:</div>
          <div>• {value}_full_audio.mp3</div>
          <div>• {value}_sentence_1.mp3, {value}_sentence_2.mp3, ...</div>
        </div>
      )}
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\articles\SentencePreview.tsx

import React, { useState } from 'react';
// import { findSplitPoints } from '../../utils/sentenceFragmentSplitter';

interface SentencePreviewProps {
  sentences: string[];
  articleName: string;
  showSentenceIds?: boolean;
  editable?: boolean;
  onSplit?: (index: number, position: number) => void;
  onMerge?: (index: number) => void;
  onEdit?: (index: number, newText: string) => void;
}

const SentencePreview: React.FC<SentencePreviewProps> = ({
  sentences,
  articleName,
  showSentenceIds = false,
  editable = true,
  onSplit,
  onMerge,
  onEdit
}) => {
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [editText, setEditText] = useState('');

  const handleSplitClick = (sentenceIndex: number, wordIndex: number, sentence: string) => {
    if (!onSplit) return;
    
    // Calculate the position to split at (after the word)
    const words = sentence.split(' ');
    const beforeWords = words.slice(0, wordIndex + 1);
    const position = beforeWords.join(' ').length;
    
    console.log(`Splitting sentence ${sentenceIndex} at position ${position}`);
    onSplit(sentenceIndex, position);
  };

  const handleMerge = (index: number) => {
    if (!onMerge) return;
    onMerge(index);
  };

  const handleEdit = (index: number) => {
    setEditingIndex(index);
    setEditText(sentences[index]);
  };

  const handleSaveEdit = () => {
    if (editingIndex !== null && onEdit) {
      onEdit(editingIndex, editText);
    }
    setEditingIndex(null);
    setEditText('');
  };

  const handleCancelEdit = () => {
    setEditingIndex(null);
    setEditText('');
  };

  const renderSentenceWithSplitPoints = (sentence: string, sentenceIndex: number) => {
    const words = sentence.split(' ');
    const elements: React.ReactNode[] = [];

    words.forEach((word, wordIndex) => {
      // Add the word with proper spacing
      elements.push(
        <span key={`word-${wordIndex}`} className="inline whitespace-pre">
          {word}
        </span>
      );

      // Add split point after each word (except the last one)
      if (wordIndex < words.length - 1) {
        // Check if this is a good split point (after comma or before new clause)
        const isGoodSplitPoint = word.endsWith(',') || word.endsWith(';');
        
        elements.push(
          <span key={`space-${wordIndex}`} className="inline-flex items-center whitespace-pre">
            {/* Use non-breaking space entity to ensure space is preserved */}
            <span className="text-gray-400">&nbsp;</span>
            {editable && (
              <button
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  handleSplitClick(sentenceIndex, wordIndex, sentence);
                }}
                className={`
                  inline-flex items-center justify-center mx-1 
                  transition-all duration-200 hover:scale-110 active:scale-95
                  ${isGoodSplitPoint 
                    ? 'w-6 h-6 bg-blue-500 hover:bg-blue-600' 
                    : 'w-4 h-4 bg-gray-300 hover:bg-blue-400'
                  }
                  rounded-full cursor-pointer shadow-sm hover:shadow-md
                `}
                title={`Split here (${isGoodSplitPoint ? 'Recommended' : 'Manual'})`}
                style={{ minWidth: '16px', minHeight: '16px' }}
              >
                <div className={`
                  w-0.5 h-3 bg-white rounded-full
                  ${isGoodSplitPoint ? 'opacity-100' : 'opacity-70'}
                `} />
              </button>
            )}
            {/* Add another space after the button */}
            <span className="text-transparent">&nbsp;</span>
          </span>
        );
      }
    });

    return <div className="leading-relaxed whitespace-pre-wrap">{elements}</div>;
  };

  // Alternative simpler approach - show text without split points in detail view
  const renderSentenceSimple = (sentence: string) => {
    return (
      <div className="text-gray-800 leading-relaxed whitespace-pre-wrap bg-gray-50 p-3 rounded">
        {sentence}
      </div>
    );
  };

  const getSentenceValidation = (sentence: string) => {
    const wordCount = sentence.split(' ').filter(word => word.trim().length > 0).length;
    const charCount = sentence.length;
    
    return {
      wordCount,
      charCount,
      isLong: wordCount > 20,
      isShort: wordCount < 2,
      isOptimal: wordCount >= 8 && wordCount <= 15
    };
  };

  const getValidationColor = (validation: ReturnType<typeof getSentenceValidation>) => {
    if (validation.isLong) return 'text-red-600 bg-red-50';
    if (validation.isShort) return 'text-orange-600 bg-orange-50';
    if (validation.isOptimal) return 'text-green-600 bg-green-50';
    return 'text-blue-600 bg-blue-50';
  };

  const getValidationIcon = (validation: ReturnType<typeof getSentenceValidation>) => {
    if (validation.isLong) return '⚠️';
    if (validation.isShort) return '📏';
    if (validation.isOptimal) return '✅';
    return '📝';
  };

  return (
    <div className="space-y-4">
      {/* Only show instructions if editable */}
      {editable && (
        <div className="text-sm text-gray-600 mb-4">
          <p><strong>Instructions:</strong> Click the blue circles between words to split fragments. 
          Larger circles indicate recommended split points.</p>
        </div>
      )}
      
      {sentences.map((sentence, index) => {
        const validation = getSentenceValidation(sentence);
        const isEditing = editingIndex === index;

        return (
          <div
            key={index}
            className="border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors"
          >
            {/* Header with stats and controls */}
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-3">
                <span className={`
                  px-2 py-1 rounded-full text-xs font-medium
                  ${getValidationColor(validation)}
                `}>
                  {getValidationIcon(validation)} #{index + 1}
                </span>
                
                <span className="text-sm text-gray-600">
                  <strong>{validation.wordCount}</strong> words, 
                  <strong> {validation.charCount}</strong> chars
                </span>
                
                {validation.isLong && (
                  <span className="text-xs text-red-600 bg-red-100 px-2 py-1 rounded">
                    Too long - consider splitting
                  </span>
                )}
              </div>

              {editable && (
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => handleEdit(index)}
                    className="px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 
                             text-gray-700 rounded transition-colors"
                    title="Edit this fragment"
                  >
                    ✏️ Edit
                  </button>
                  
                  {index < sentences.length - 1 && (
                    <button
                      onClick={() => handleMerge(index)}
                      className="px-3 py-1 text-xs bg-blue-100 hover:bg-blue-200 
                               text-blue-700 rounded transition-colors"
                      title="Merge with next fragment"
                    >
                      🔗 Merge
                    </button>
                  )}
                </div>
              )}
            </div>

            {/* Content */}
            {isEditing ? (
              <div className="space-y-3">
                <textarea
                  value={editText}
                  onChange={(e) => setEditText(e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md resize-none 
                           focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  rows={3}
                  placeholder="Edit fragment text..."
                />
                <div className="flex items-center space-x-2">
                  <button
                    onClick={handleSaveEdit}
                    className="px-4 py-2 bg-green-600 text-white rounded-md 
                             hover:bg-green-700 transition-colors text-sm"
                  >
                    ✅ Save
                  </button>
                  <button
                    onClick={handleCancelEdit}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md 
                             hover:bg-gray-400 transition-colors text-sm"
                  >
                    ❌ Cancel
                  </button>
                </div>
              </div>
            ) : (
              <>
                {/* Use simple rendering for detail view (non-editable) or complex for editable */}
                {editable ? 
                  renderSentenceWithSplitPoints(sentence, index) : 
                  renderSentenceSimple(sentence)
                }
              </>
            )}

            {/* Sentence ID display */}
            {showSentenceIds && (
              <div className="mt-2 text-xs text-gray-500 font-mono bg-gray-50 p-2 rounded">
                ID: {articleName}_{index + 1}
              </div>
            )}
          </div>
        );
      })}

      {sentences.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          <p>No fragments to display</p>
          <p className="text-sm">Paste your article text to see fragments</p>
        </div>
      )}
    </div>
  );
};

export default SentencePreview;

C:\Users\User\Desktop\jink-demo\src\components\articles\TextInput.tsx

// src/components/articles/TextInput.tsx
import React from 'react';
import { getFragmentStats } from '../../utils/sentenceFragmentSplitter';

interface TextInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
}

export const TextInput: React.FC<TextInputProps> = ({
  value,
  onChange,
  placeholder = "Enter your article text here...",
  className = ""
}) => {
  const getStats = () => {
    if (!value.trim()) {
      return {
        text: { characters: 0, words: 0, estimatedReadingTime: 0 },
        fragments: { 
          count: 0, 
          validation: { 
            totalFragments: 0,
            optimalRange: false,
            longFragments: 0,
            shortFragments: 0,
            emptyFragments: 0,
            averageWordCount: 0
          }, 
          list: [] 
        },
        error: null
      };
    }

    try {
      return { ...getFragmentStats(value), error: null };
    } catch (error) {
      return {
        text: { 
          characters: value.length, 
          words: value.split(/\s+/).filter(w => w.length > 0).length, 
          estimatedReadingTime: Math.ceil(value.split(/\s+/).filter(w => w.length > 0).length / 200) 
        },
        fragments: { 
          count: 0, 
          validation: { 
            totalFragments: 0,
            optimalRange: false,
            longFragments: 0,
            shortFragments: 0,
            emptyFragments: 0,
            averageWordCount: 0
          }, 
          list: [] 
        },
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  };

  const stats = getStats();

  const getWordCountClass = () => {
    const count = stats.text.words;
    if (count === 0) return 'text-gray-500';
    if (count < 20) return 'text-red-600'; // Below minimum
    if (count > 1500) return 'text-red-600'; // Above maximum  
    if (count < 50) return 'text-yellow-600'; // Very short but acceptable
    if (count > 1000) return 'text-yellow-600'; // Long but acceptable
    return 'text-green-600';
  };

  const getFragmentCountClass = () => {
    const count = stats.fragments.count;
    if (count === 0) return 'text-gray-500';
    if (count < 10) return 'text-yellow-600';
    if (count > 40) return 'text-yellow-600';
    return 'text-green-600';
  };

  const hasError = !!stats.error;
  const canProceed = !hasError && stats.text.words >= 20 && stats.text.words <= 1500;

  return (
    <div className="space-y-4">
      {/* Main Text Area */}
      <div className="relative">
        <textarea
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          className={`w-full p-4 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none resize-none transition-colors ${
            hasError ? 'border-red-300 bg-red-50' : ''
          } ${className}`}
          rows={12}
        />
        
        {/* Character count overlay */}
        <div className="absolute bottom-2 right-2 text-xs text-gray-400 bg-white px-2 py-1 rounded">
          {stats.text.characters} chars
        </div>
      </div>

      {/* Error Display */}
      {hasError && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center space-x-2">
            <span className="text-red-600">❌</span>
            <span className="text-sm text-red-700 font-medium">Article Validation Error</span>
          </div>
          <div className="text-sm text-red-600 mt-1">{stats.error}</div>
        </div>
      )}

      {/* Statistics Panel */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Text Statistics */}
        <div className="bg-white p-4 rounded-lg border shadow-sm">
          <h4 className="font-medium text-gray-700 mb-3">Text Statistics</h4>
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Word Count:</span>
              <span className={`font-mono font-bold ${getWordCountClass()}`}>
                {stats.text.words}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Characters:</span>
              <span className="font-mono text-sm">{stats.text.characters}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Est. Reading Time:</span>
              <span className="font-mono text-sm">{stats.text.estimatedReadingTime}min</span>
            </div>
          </div>
        </div>

        {/* Fragment Statistics */}
        <div className="bg-white p-4 rounded-lg border shadow-sm">
          <h4 className="font-medium text-gray-700 mb-3">Fragment Analysis</h4>
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Fragments:</span>
              <span className={`font-mono font-bold ${getFragmentCountClass()}`}>
                {stats.fragments.count}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Avg Words:</span>
              <span className="font-mono text-sm">{stats.fragments.validation.averageWordCount}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Long Fragments:</span>
              <span className={`font-mono text-sm ${
                stats.fragments.validation.longFragments > 0 ? 'text-yellow-600' : 'text-green-600'
              }`}>
                {stats.fragments.validation.longFragments}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Optimal Range:</span>
              <span className={`font-mono text-sm ${
                stats.fragments.validation.optimalRange ? 'text-green-600' : 'text-yellow-600'
              }`}>
                {stats.fragments.validation.optimalRange ? '✓ Yes' : '⚠ No'}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Guidelines */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-medium text-blue-800 mb-2">Article Guidelines</h4>
        <div className="text-sm text-blue-700 space-y-1">
          <div className="flex items-center space-x-2">
            <span className={stats.text.words >= 20 && stats.text.words <= 1500 ? '✅' : '❌'}>
            </span>
            <span>Word count: 20-1500 words (currently {stats.text.words})</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className={stats.fragments.validation.optimalRange ? '✅' : '⚠️'}>
            </span>
            <span>Optimal fragments: 15-25 (currently {stats.fragments.count})</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className={stats.fragments.validation.longFragments === 0 ? '✅' : '⚠️'}>
            </span>
            <span>Long fragments (&gt;20 words): {stats.fragments.validation.longFragments}</span>
          </div>
        </div>
        
        {!hasError && stats.text.words > 0 && (
          <div className="mt-3 pt-3 border-t border-blue-200">
            <div className="text-xs text-blue-600">
              💡 <strong>Tip:</strong> After creating the article, you can manually split and merge fragments using the editor.
              {stats.fragments.validation.longFragments > 0 && 
                " Some fragments are long - you can split them for better dictation pacing."
              }
            </div>
          </div>
        )}
      </div>

      {/* Validation Status */}
      {!hasError && (
        <div className={`p-3 rounded-lg border ${
          canProceed 
            ? 'bg-green-50 border-green-200' 
            : 'bg-yellow-50 border-yellow-200'
        }`}>
          <div className="flex items-center space-x-2">
            <span className="text-lg">
              {canProceed ? '✅' : '⚠️'}
            </span>
            <span className={`text-sm font-medium ${
              canProceed ? 'text-green-800' : 'text-yellow-800'
            }`}>
              {canProceed 
                ? 'Article is ready to be processed!' 
                : 'Article needs adjustments before processing'
              }
            </span>
          </div>
          {!canProceed && (
            <div className={`text-sm mt-2 ${
              stats.text.words < 20 || stats.text.words > 1500 ? 'text-yellow-700' : 'text-green-700'
            }`}>
              {stats.text.words < 20 && 'Article is too short. Add more content.'}
              {stats.text.words > 1500 && 'Article is too long. Consider shortening or splitting into multiple articles.'}
              {stats.text.words >= 20 && stats.text.words <= 1500 && 'Ready to proceed - you can fine-tune fragments after creation.'}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

C:\Users\User\Desktop\jink-demo\src\components\auth\LogoutAllConfirmModal.tsx

import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { LoadingSpinner } from '../common/LoadingSpinner';

interface LogoutAllConfirmModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => Promise<void>;
}

export const LogoutAllConfirmModal: React.FC<LogoutAllConfirmModalProps> = ({
  isOpen,
  onClose,
  onConfirm,
}) => {
  const { user } = useAuth();
  const [isLoggingOut, setIsLoggingOut] = useState(false);

  const handleConfirm = async () => {
    setIsLoggingOut(true);
    try {
      await onConfirm();
    } catch (error) {
      console.error('Logout all failed:', error);
    } finally {
      setIsLoggingOut(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="flex-shrink-0 w-10 h-10 mx-auto bg-orange-100 rounded-full flex items-center justify-center">
              <svg className="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-4a2 2 0 00-2-2H6a2 2 0 00-2 2v4a2 2 0 002 2zM11 5V3a2 2 0 112 0v2M7 7h10" />
              </svg>
            </div>
            <div className="ml-4">
              <h3 className="text-lg font-medium text-gray-900">Logout All Devices</h3>
              <p className="text-sm text-gray-500">End all active sessions</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={isLoggingOut}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div className="p-6">
          <div className="mb-4">
            <p className="text-gray-700 mb-3">
              Are you sure you want to logout from all devices signed in to{' '}
              <span className="font-semibold">{user?.fullname || 'your account'}</span>?
            </p>

            <div className="bg-blue-50 border border-blue-200 rounded-md p-3 mb-4">
              <div className="flex">
                <svg className="w-5 h-5 text-blue-400 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
                <div className="text-sm text-blue-800">
                  <p className="font-medium">This will:</p>
                  <ul className="mt-1 list-disc list-inside space-y-1">
                    <li>End your session on all devices and browsers</li>
                    <li>Require you to log in again everywhere</li>
                    <li>Invalidate all existing login tokens</li>
                    <li>Take effect immediately</li>
                  </ul>
                </div>
              </div>
            </div>

            <p className="text-sm text-gray-600">
              This is useful if you think someone else may have access to your account or if you want to ensure all old sessions are terminated.
            </p>
          </div>

          <div className="flex justify-end space-x-3">
            <button
              onClick={onClose}
              disabled={isLoggingOut}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              onClick={handleConfirm}
              disabled={isLoggingOut}
              className="px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {isLoggingOut ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Logging out...</span>
                </>
              ) : (
                'Logout All Devices'
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\bulk\BulkExport.tsx

// src/components/bulk/BulkExport.tsx
import React, { useState } from 'react';
import { useExportUsersCSV } from '../../hooks/useBulk';
import type { IExportFilters } from '../../api/apiBulk';

interface BulkExportProps {
  onCancel: () => void;
}

export const BulkExport: React.FC<BulkExportProps> = ({ onCancel }) => {
  const exportMutation = useExportUsersCSV();
  const [filters, setFilters] = useState<IExportFilters>({
    role: '',
    isActive: undefined,
    createdAfter: '',
    createdBefore: ''
  });

  const handleExport = async () => {
    try {
      const blob = await exportMutation.mutateAsync(filters);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `users-export-${new Date().toISOString().slice(0, 10)}.csv`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      onCancel();
    } catch (error) {
      alert('Export failed. Please try again later.');
    }
  };

  return (
    <div className="p-4">
      <div className="mb-4">
        <label className="mr-3">
          Role Filter:
          <select
            value={filters.role || ''}
            onChange={e => setFilters(f => ({ ...f, role: e.target.value || undefined }))}
            className="ml-2 border"
          >
            <option value="">All</option>
            <option value="admin">Admin</option>
            <option value="teacher">Teacher</option>
            <option value="student">Student</option>
            <option value="user">User</option>
          </select>
        </label>
      </div>
      <div className="mb-4">
        <label className="mr-3">
          Status:
          <select
            value={
              filters.isActive === undefined
                ? ''
                : filters.isActive
                ? 'true'
                : 'false'
            }
            onChange={e =>
              setFilters(f => ({
                ...f,
                isActive: e.target.value === ''
                  ? undefined
                  : e.target.value === 'true'
              }))
            }
            className="ml-2 border"
          >
            <option value="">All</option>
            <option value="true">Active Only</option>
            <option value="false">Inactive Only</option>
          </select>
        </label>
      </div>
      <button
        onClick={handleExport}
        disabled={exportMutation.isPending}
        className="mr-2 px-4 py-2 bg-green-600 text-white rounded"
      >
        Export CSV
      </button>
      <button
        onClick={onCancel}
        disabled={exportMutation.isPending}
        className="px-4 py-2 border border-gray-400 rounded"
      >
        Cancel
      </button>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\bulk\BulkImport.tsx

import React, { useState, useRef } from 'react';
import { useImportUsersCSV } from '../../hooks/useBulk';
import { LoadingSpinner } from '../common/LoadingSpinner';

interface BulkImportProps {
  onSuccess: () => void;
  onCancel: () => void;
}

export const BulkImport: React.FC<BulkImportProps> = ({
  onSuccess,
  onCancel
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [dragOver, setDragOver] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const importMutation = useImportUsersCSV();

  const handleFileSelect = (file: File) => {
    if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {
      alert('Please select a CSV file');
      return;
    }
    setSelectedFile(file);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleImport = async () => {
    if (!selectedFile) return;

    try {
      const result = await importMutation.mutateAsync(selectedFile);
      
      // console.log(result);

      if (result.errorDetails.length > 0) {
        alert(`Import completed with issues:\n- Imported: ${result.imported}\n- Errors: ${result.errorDetails.length}\n\nCheck console for error details.`);
        console.log('Import errors:', result.errorDetails);
      } else {
        alert(`Successfully imported ${result.imported} users!`);
      }
      
      onSuccess();
    } catch (error) {
      console.error('Import failed:', error);
      alert('Import failed. Please check the file format and try again.');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h2 className="text-xl font-bold mb-4">Bulk Import Users</h2>

        <div
          className={`border-2 border-dashed rounded-lg p-8 text-center mb-4 transition-colors ${
            dragOver
              ? 'border-blue-400 bg-blue-50'
              : selectedFile
              ? 'border-green-400 bg-green-50'
              : 'border-gray-300'
          }`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          {selectedFile ? (
            <div>
              <div className="text-green-600 mb-2">
                <svg className="w-12 h-12 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </div>
              <p className="font-medium text-green-700">{selectedFile.name}</p>
              <p className="text-sm text-gray-500">{(selectedFile.size / 1024).toFixed(1)} KB</p>
              <button
                onClick={() => setSelectedFile(null)}
                className="text-sm text-red-600 hover:text-red-800 mt-2"
              >
                Remove file
              </button>
            </div>
          ) : (
            <div>
              <div className="text-gray-400 mb-2">
                <svg className="w-12 h-12 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </div>
              <p className="text-gray-600">Drag & drop your CSV file here</p>
              <p className="text-sm text-gray-500 mt-1">or</p>
              <button
                onClick={() => fileInputRef.current?.click()}
                className="text-blue-600 hover:text-blue-800 font-medium"
              >
                browse files
              </button>
              <input
                ref={fileInputRef}
                type="file"
                accept=".csv"
                onChange={handleFileInputChange}
                className="hidden"
              />
            </div>
          )}
        </div>

        <div className="text-sm text-gray-600 mb-4">
          <p><strong>CSV Format:</strong> username, fullname, role, password (optional)</p>
          <p>Supported roles: admin, teacher, student, user</p>
        </div>

        {importMutation.isPending && (
          <div className="mb-4">
            <LoadingSpinner message="Importing users..." size="small" />
          </div>
        )}

        <div className="flex justify-end space-x-2">
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
            disabled={importMutation.isPending}
          >
            Cancel
          </button>
          <button
            onClick={handleImport}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
            disabled={!selectedFile || importMutation.isPending}
          >
            {importMutation.isPending ? 'Importing...' : 'Import Users'}
          </button>
        </div>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\bulk\CSVTemplateDownload.tsx

import React from 'react';
import { useDownloadCSVTemplate } from '../../hooks/useBulk';

export const CSVTemplateDownload: React.FC = () => {
  const downloadTemplateMutation = useDownloadCSVTemplate();

  const handleDownload = async () => {
    try {
      const blob = await downloadTemplateMutation.mutateAsync();
      
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'users-import-template.csv';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Template download failed:', error);
      alert('Template download failed. Please try again.');
    }
  };

  return (
    <button
      onClick={handleDownload}
      className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
      disabled={downloadTemplateMutation.isPending}
    >
      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      {downloadTemplateMutation.isPending ? 'Downloading...' : 'Download Template'}
    </button>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\common\ConfirmDialog.tsx

import React from 'react';

interface ConfirmDialogProps {
  isOpen: boolean;
  title: string;
  message: string;
  confirmText?: string;
  cancelText?: string;
  onConfirm: () => void;
  onCancel: () => void;
  type?: 'danger' | 'warning' | 'info';
}

export const ConfirmDialog: React.FC<ConfirmDialogProps> = ({
  isOpen,
  title,
  message,
  confirmText = 'Confirm',
  cancelText = 'Cancel',
  onConfirm,
  onCancel,
  type = 'warning'
}) => {
  if (!isOpen) return null;

  const typeStyles = {
    danger: 'bg-red-600 hover:bg-red-700',
    warning: 'bg-yellow-600 hover:bg-yellow-700',
    info: 'bg-blue-600 hover:bg-blue-700'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h3 className="text-lg font-semibold mb-2">{title}</h3>
        <p className="text-gray-600 mb-4">{message}</p>
        <div className="flex justify-end space-x-2">
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
          >
            {cancelText}
          </button>
          <button
            onClick={onConfirm}
            className={`px-4 py-2 text-white rounded-md ${typeStyles[type]}`}
          >
            {confirmText}
          </button>
        </div>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\common\LoadingSpinner.tsx

import React from 'react';

interface LoadingSpinnerProps {
  message?: string;
  size?: 'small' | 'medium' | 'large';
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  message = 'Loading...',
  size = 'medium'
}) => {
  const sizeClasses = {
    small: 'w-4 h-4',
    medium: 'w-8 h-8', 
    large: 'w-12 h-12'
  };

  return (
    <div className="flex flex-col items-center justify-center p-4">
      <div className={`animate-spin rounded-full border-2 border-gray-300 border-t-blue-600 ${sizeClasses[size]}`}></div>
      {message && <p className="mt-2 text-sm text-gray-600">{message}</p>}
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\common\RoleBasedComponent.tsx

import React from 'react';
import { useAuth } from '../../context/AuthContext';

interface RoleBasedComponentProps {
  allowedRoles: Array<'admin' | 'teacher' | 'student' | 'user'>;
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export const RoleBasedComponent: React.FC<RoleBasedComponentProps> = ({
  allowedRoles,
  children,
  fallback = null
}) => {
  const { user } = useAuth();

  if (!user || !allowedRoles.includes(user.role)) {
    return <>{fallback}</>;
  }

  return <>{children}</>;
};


C:\Users\User\Desktop\jink-demo\src\components\debug\SessionUploadTester.tsx

import React, { useState } from 'react';
import { createMockSession } from '../../utils/testSessionUpload';
import { useServerDictationProgress } from '../../hooks/useSessionUpload';

const SessionUploadTester: React.FC = () => {
  const [testResult, setTestResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  
  const { saveSession, isUploading, error } = useServerDictationProgress('test-article');

  const handleTestUpload = async () => {
    setIsLoading(true);
    setTestResult('');
    
    try {
      const mockSession = createMockSession('12345');//('test-upload-' + Date.now());
      await saveSession(mockSession);
      setTestResult('✅ Upload successful! Check browser network tab and server logs.');
    } catch (err) {
      setTestResult(`❌ Upload failed: ${err instanceof Error ? err.message : 'Unknown error'}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-sm border max-w-md">
      <h3 className="text-lg font-semibold mb-4">Session Upload Tester</h3>
      
      <button
        onClick={handleTestUpload}
        disabled={isLoading || isUploading}
        className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isLoading || isUploading ? 'Testing Upload...' : 'Test Session Upload'}
      </button>
      
      {testResult && (
        <div className={`mt-4 p-3 rounded text-sm ${
          testResult.includes('✅') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'
        }`}>
          {testResult}
        </div>
      )}
      
      {error && (
        <div className="mt-2 p-3 bg-red-50 text-red-700 rounded text-sm">
          Upload Error: {error.message}
        </div>
      )}
    </div>
  );
};

export default SessionUploadTester;


C:\Users\User\Desktop\jink-demo\src\components\dictation\FragmentDictation copy 2.tsx

// import React, { useState, useCallback, useEffect } from 'react';
// import { useFragmentAudioPlayer } from '../../hooks/useFragmentAudioPlayer';
// import type { FragmentTiming } from '../../hooks/useFragmentAudioPlayer';
// import { compareTexts, isAnswerAcceptable } from '../../utils/dictationUtils';
// import type { ComparisonResult } from '../../types/article.types';
// import { useServerDictationProgress } from '../../hooks/useSessionUpload'; // Updated import

// export interface DictationAttempt {
//   attempt: string;
//   result: ComparisonResult;
//   timestamp: Date;
// }

// export interface FragmentProgress {
//   fragmentIndex: number;
//   attempts: DictationAttempt[];
//   status: 'pending' | 'correct' | 'givenup';
//   bestScore: number;
//   timeSpent: number; // seconds
// }

// export interface DictationSession {
//   articleName: string;
//   articleTitle: string; // add
//   fragments: FragmentTiming[];
//   progress: FragmentProgress[];
//   currentFragmentIndex: number;
//   startTime: Date;
//   endTime?: Date;  
//   completedFragments: number;
//   totalScore: number;
//   isCompleted: boolean; // add
// }

// interface FragmentDictationProps {
//   articleName: string;
//   articleTitle: string;
//   fullAudioUrl: string;
//   fragments: FragmentTiming[];
//   onSessionComplete?: (session: DictationSession) => void;
//   onProgressUpdate?: (progress: FragmentProgress[]) => void;
//   showText?: boolean;
//   allowGiveUp?: boolean;
//   savedSession?: DictationSession | null ;
// }

// const FragmentDictation: React.FC<FragmentDictationProps> = ({
//   articleName,
//   articleTitle,
//   fullAudioUrl,
//   fragments,
//   onSessionComplete,
//   onProgressUpdate,
//   showText = false,
//   allowGiveUp = true,
//   savedSession,
// }) => {

//   // Initialize current fragment from saved session
//   const [currentFragmentIndex, setCurrentFragmentIndex] = useState(() => {
//     if (savedSession && savedSession.progress.length > 0) {
//       // Find the first incomplete fragment
//       const incompleteIndex = savedSession.progress.findIndex(p => p.status === 'pending')
//       return incompleteIndex !== -1 ? incompleteIndex : savedSession.progress.length - 1
//     }
//     return 0
//   });

//     // Initialize session state with saved data
//   const [session, setSession] = useState<DictationSession>(() => {
//     if (savedSession) {
//       // Resume from saved session
//       return savedSession
//     }
//     // Create new session
//     return {
//       sessionId: `${articleName}-${Date.now()}`,
//       articleName,
//       articleTitle,
//       startTime: new Date(),
//       endTime: undefined,
//       fragments,
//       progress: fragments.map((fragment, index) => ({
//         fragmentIndex: index,
//         text: fragment.text,
//         attempts: [],
//         status: 'pending' as const,
//         bestScore: 0,
//         timeSpent: 0,
//       })),
//       currentFragmentIndex: 0,
//       completedFragments: 0,
//       totalScore: 0,
//     }
//   });

//   const { state: audioState, controls: audioControls } = useFragmentAudioPlayer(
//     fullAudioUrl,
//     fragments,
//     true // autoStopAtFragmentEnd
//   );

//   // Use the enhanced server sync hook
//   const { saveSession, isUploading, error: uploadError } = useServerDictationProgress(articleName);

//   // // Session state
//   // const [session, setSession] = useState<DictationSession>({
//   //   articleName,
//   //   articleTitle, // add
//   //   fragments,
//   //   progress: fragments.map((_fragment, index) => ({
//   //     fragmentIndex: index,
//   //     attempts: [],
//   //     status: 'pending',
//   //     bestScore: 0,
//   //     timeSpent: 0,
//   //   })),
//   //   currentFragmentIndex: 0,
//   //   startTime: new Date(),
//   //   completedFragments: 0,
//   //   totalScore: 0,
//   //   isCompleted: false, // add
//   // });

//   // Current fragment state
//   const [currentInput, setCurrentInput] = useState('');
//   const [lastComparison, setLastComparison] = useState<ComparisonResult | null>(null);
//   const [showAnswer, setShowAnswer] = useState(false);
//   const [fragmentStartTime, setFragmentStartTime] = useState<Date | null>(null);

//   const currentFragment = fragments[session.currentFragmentIndex];
//   const currentProgress = session.progress[session.currentFragmentIndex];
//   const isLastFragment = session.currentFragmentIndex === fragments.length - 1;
//   const canProceed = currentProgress.status === 'correct' || currentProgress.status === 'givenup';

//   // Auto-start timing when fragment changes
//   useEffect(() => {
//     setFragmentStartTime(new Date());
//     setCurrentInput('');
//     setLastComparison(null);
//     setShowAnswer(false);
//   }, [session.currentFragmentIndex]);

//   // Audio controls
//   const handlePlayFragment = useCallback(() => {
//     audioControls.seekToFragment(session.currentFragmentIndex);
//     audioControls.play();
//   }, [audioControls, session.currentFragmentIndex]);

//   const handleReplayFragment = useCallback(() => {
//     audioControls.replayCurrentFragment();
//   }, [audioControls]);

//   const handlePlaybackRateChange = useCallback((rate: number) => {
//     audioControls.setPlaybackRate(rate);
//   }, [audioControls]);

//   // Dictation logic
//   const handleConfirm = useCallback(() => {
//     if (!currentInput.trim() || !currentFragment) return;

//     const result = compareTexts(currentFragment.text, currentInput.trim());
//     const attempt: DictationAttempt = {
//       attempt: currentInput.trim(),
//       result,
//       timestamp: new Date(),
//     };

//     // Calculate time spent on this fragment
//     const timeSpent = fragmentStartTime ? 
//       Math.round((Date.now() - fragmentStartTime.getTime()) / 1000) : 0;

//     setSession(prev => {
//       const newProgress = [...prev.progress];
//       const fragmentProgress = newProgress[session.currentFragmentIndex];
      
//       fragmentProgress.attempts.push(attempt);
//       fragmentProgress.bestScore = Math.max(fragmentProgress.bestScore, result.score);
//       fragmentProgress.timeSpent += timeSpent;
      
//       if (isAnswerAcceptable(result)) {
//         fragmentProgress.status = 'correct';
//       }

//       const completedFragments = newProgress.filter(p => p.status !== 'pending').length;
//       const totalScore = newProgress.reduce((sum, p) => sum + p.bestScore, 0) / newProgress.length;

//       const updatedSession = {
//         ...prev,
//         progress: newProgress,
//         completedFragments,
//         totalScore,
//       };

//       // Notify parent of progress update
//       onProgressUpdate?.(newProgress);
      
//       return updatedSession;
//     });

//     setLastComparison(result);
//     setFragmentStartTime(new Date()); // Reset timer for potential retry
//   }, [currentInput, currentFragment, fragmentStartTime, session.currentFragmentIndex, onProgressUpdate]);

//   const handleGiveUp = useCallback(() => {
//     if (!allowGiveUp || !currentFragment) return;

//     // Calculate time spent
//     const timeSpent = fragmentStartTime ? 
//       Math.round((Date.now() - fragmentStartTime.getTime()) / 1000) : 0;

//     setSession(prev => {
//       const newProgress = [...prev.progress];
//       const fragmentProgress = newProgress[session.currentFragmentIndex];
      
//       fragmentProgress.status = 'givenup';
//       fragmentProgress.timeSpent += timeSpent;

//       const completedFragments = newProgress.filter(p => p.status !== 'pending').length;
//       const totalScore = newProgress.reduce((sum, p) => sum + p.bestScore, 0) / newProgress.length;

//       const updatedSession = {
//         ...prev,
//         progress: newProgress,
//         completedFragments,
//         totalScore,
//       };

//       onProgressUpdate?.(newProgress);
      
//       return updatedSession;
//     });

//     setShowAnswer(true);
//     setLastComparison(null);
//   }, [allowGiveUp, currentFragment, fragmentStartTime, session.currentFragmentIndex, onProgressUpdate]);

//   const handleNext = useCallback(async () => {
//     if (!canProceed) return;

//     if (isLastFragment) {
//       // Session complete - mark as completed and auto-upload
//       const completedSession: DictationSession = {
//         ...session,
//         isCompleted: true,
//       };
      
//       try {
//         // Auto-upload to server
//         await saveSession(completedSession);
//         console.log('Session completed and uploaded to server');
//       } catch (error) {
//         console.error('Failed to upload completed session:', error);
//         // Continue with session completion even if upload fails
//       }

//       onSessionComplete?.(completedSession);
//     } else {
//       // Move to next fragment
//       setSession(prev => ({
//         ...prev,
//         currentFragmentIndex: prev.currentFragmentIndex + 1,
//       }));
//     }
//   }, [canProceed, isLastFragment, session, onSessionComplete, saveSession]);

//   return (
//     <div className="max-w-4xl mx-auto p-6 space-y-6">
//       {/* Header */}
//       <div className="text-center border-b pb-4">
//         <h1 className="text-2xl font-bold text-gray-900 mb-2">{articleTitle}</h1>
//         <div className="flex items-center justify-center space-x-4 text-sm text-gray-600">
//           <span>Fragment {session.currentFragmentIndex + 1} of {fragments.length}</span>
//           <span>•</span>
//           <span>{session.completedFragments} completed</span>
//           <span>•</span>
//           <span>Score: {Math.round(session.totalScore * 100)}%</span>
//         </div>
        
//         {/* Upload Status Indicator */}
//         <div className="mt-2">
//           {isUploading && (
//             <span className="text-sm text-blue-600">💾 Saving progress...</span>
//           )}
//           {uploadError && (
//             <span className="text-sm text-red-600">⚠️ Sync failed (saved locally)</span>
//           )}
//           {!isUploading && !uploadError && session.completedFragments > 0 && (
//             <span className="text-sm text-green-600">✓ Progress saved</span>
//           )}
//         </div>
//       </div>

//       {/* Progress Bar */}
//       <div className="w-full bg-gray-200 rounded-full h-2">
//         <div 
//           className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
//           style={{ width: `${(session.completedFragments / fragments.length) * 100}%` }}
//         />
//       </div>

//       {/* Audio Controls */}
//       <div className="bg-white rounded-lg shadow-sm border p-6">
//         <h2 className="text-lg font-semibold mb-4">Audio Controls</h2>
//         <div className="flex items-center space-x-4 mb-4">
//           <button
//             onClick={handlePlayFragment}
//             disabled={audioState.isLoading || !audioState.canPlay}
//             className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
//           >
//             {audioState.isPlaying ? '⏸️' : '▶️'} Play Fragment
//           </button>
          
//           <button
//             onClick={handleReplayFragment}
//             disabled={audioState.isLoading || !audioState.canPlay}
//             className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
//           >
//             🔄 Replay
//           </button>

//           {allowGiveUp && (
//             <button
//               onClick={handleGiveUp}
//               disabled={canProceed}
//               className="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 disabled:opacity-50 disabled:cursor-not-allowed"
//             >
//               Show Answer
//             </button>
//           )}
//         </div>

//         {/* Attempt Count */}
//         {currentProgress.attempts.length > 0 && (
//           <div className="text-sm text-gray-600">
//             Attempts: {currentProgress.attempts.length}
//             {currentProgress.bestScore > 0 && (
//               <span className="ml-2">Best score: {Math.round(currentProgress.bestScore * 100)}%</span>
//             )}
//           </div>
//         )}

//         {/* Speed Control */}
//         <div className="flex items-center space-x-2">
//           <label className="text-sm text-gray-700">Speed:</label>
//           <input
//             type="range"
//             min="0.5"
//             max="1.5"
//             step="0.1"
//             value={audioState.playbackRate}
//             onChange={(e) => handlePlaybackRateChange(Number(e.target.value))}
//             className="w-20"
//           />
//           <span className="text-sm text-gray-600">{audioState.playbackRate}x</span>
//         </div>
//       </div>

//       {/* Audio Error */}
//       {audioState.error && (
//         <div className="text-red-600 text-sm bg-red-50 p-2 rounded">
//           Error: {audioState.error}
//         </div>
//       )}

//       {/* Text Display (Optional) */}
//       {(showText || showAnswer) && (
//         <div className="bg-gray-50 rounded-lg p-4">
//           <p className="text-gray-800 text-center italic">{currentFragment.text}</p>
//         </div>
//       )}

//       {/* Input Section */}
//       <div className="bg-white rounded-lg shadow-sm border p-6">
//         <h2 className="text-lg font-semibold mb-4">Your Answer</h2>
//         <div className="space-y-4">
//           <textarea
//             value={currentInput}
//             onChange={(e) => setCurrentInput(e.target.value)}
//             placeholder="Type what you heard..."
//             disabled={canProceed}
//             className="w-full h-24 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500"
//           />
          
//           <div className="flex items-center space-x-3">
//             <button
//               onClick={handleConfirm}
//               disabled={!currentInput.trim() || canProceed}
//               className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
//             >
//               Confirm Answer
//             </button>

//             {canProceed && (
//               <button
//                 onClick={handleNext}
//                 className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
//               >
//                 {isLastFragment ? 'Complete Session' : 'Next Fragment'} →
//               </button>
//             )}
//           </div>
//         </div>
//       </div>

//       {/* Feedback Section */}
//       {(lastComparison || showAnswer) && (
//         <div className="bg-white rounded-lg shadow-sm border p-6">
//           <h2 className="text-lg font-semibold mb-4">Feedback</h2>
          
//           {lastComparison && !isAnswerAcceptable(lastComparison) && (
//             <div className="space-y-3">
//               <div className="flex items-center space-x-2">
//                 <span className="text-red-600 text-lg">❌</span>
//                 <span className="text-red-700 font-medium">
//                   {lastComparison.correctTokens}/{lastComparison.totalTokens} words correct 
//                   ({Math.round(lastComparison.score * 100)}%)
//                 </span>
//               </div>
              
//               <div className="bg-red-50 p-3 rounded border">
//                 <p className="text-sm text-gray-700 mb-1"><strong>Hint:</strong></p>
//                 <p className="font-mono text-red-800 text-lg">{lastComparison.feedback}</p>
//               </div>
              
//               <p className="text-sm text-gray-600">
//                 Try again or click "Show Answer" if you need help.
//               </p>
//             </div>
//           )}

//           {lastComparison && isAnswerAcceptable(lastComparison) && (
//             <div className="flex items-center space-x-2">
//               <span className="text-green-600 text-lg">✅</span>
//               <span className="text-green-700 font-medium">
//                 Excellent! {Math.round(lastComparison.score * 100)}% accuracy
//               </span>
//             </div>
//           )}

//           {showAnswer && (
//             <div className="bg-blue-50 p-3 rounded border">
//               <p className="text-sm text-gray-700 mb-1"><strong>Correct Answer:</strong></p>
//               <p className="font-mono text-blue-800 text-lg">{currentFragment.text}</p>
//             </div>
//           )}
//         </div>
//       )}
//     </div>
//   );
// };

// export default FragmentDictation;


C:\Users\User\Desktop\jink-demo\src\components\dictation\FragmentDictation copy.tsx

// // src/components/dictation/FragmentDictation.tsx

// import React, { useState, useCallback, useEffect } from "react";
// import { useFragmentAudioPlayer } from "../../hooks/useFragmentAudioPlayer";
// import type { FragmentTiming } from "../../hooks/useFragmentAudioPlayer";
// import { compareTexts, isAnswerAcceptable } from "../../utils/dictationUtils";
// import type { ComparisonResult } from "../../types/article.types";

// export interface DictationAttempt {
//   attempt: string;
//   result: ComparisonResult;
//   timestamp: Date;
// }

// export interface FragmentProgress {
//   fragmentIndex: number;
//   attempts: DictationAttempt[];
//   status: "pending" | "correct" | "given_up";
//   bestScore: number;
//   timeSpent: number; // seconds
// }

// export interface DictationSession {
//   articleName: string;
//   articleTitle: string;
//   startTime: Date;
//   endTime?: Date; // Add this optional field
//   fragments: FragmentTiming[];
//   progress: FragmentProgress[];
//   currentFragmentIndex: number;
//   completedFragments: number;
//   totalScore: number;
//   isCompleted: boolean;
// }

// // export interface DictationSession {
// //   articleName: string;
// //   articleTitle: string; // add
// //   fragments: FragmentTiming[];
// //   progress: FragmentProgress[];
// //   currentFragmentIndex: number;
// //   startTime: Date;
// //   endTime?: Date; // add
// //   completedFragments: number;
// //   totalScore: number;
// //   isCompleted: boolean; // add
// // }

// interface FragmentDictationProps {
//   articleName: string;
//   articleTitle: string;
//   fullAudioUrl: string;
//   fragments: FragmentTiming[];
//   onSessionComplete?: (session: DictationSession) => void;
//   onProgressUpdate?: (progress: FragmentProgress[]) => void;
//   showText?: boolean;
//   allowGiveUp?: boolean;
// }

// const FragmentDictation: React.FC<FragmentDictationProps> = ({
//   articleName,
//   articleTitle,
//   fullAudioUrl,
//   fragments,
//   onSessionComplete,
//   onProgressUpdate,
//   showText = false,
//   allowGiveUp = true,
// }) => {
//   const { state: audioState, controls: audioControls } = useFragmentAudioPlayer(
//     fullAudioUrl,
//     fragments,
//     true // autoStopAtFragmentEnd
//   );

//   // Session state
//   // const [session, setSession] = useState<DictationSession>(() => ({
//   //   articleName,
//   //   fragments,
//   //   progress: fragments.map((_fragment, index) => ({
//   //     fragmentIndex: index,
//   //     attempts: [],
//   //     status: 'pending',
//   //     bestScore: 0,
//   //     timeSpent: 0
//   //   })),
//   //   currentFragmentIndex: 0,
//   //   startTime: new Date(),
//   //   completedFragments: 0,
//   //   totalScore: 0
//   // }));

//   const [session, setSession] = useState<DictationSession>(() => ({
//     articleName,
//     articleTitle, // add
//     fragments,
//     progress: fragments.map((_fragment, index) => ({
//       fragmentIndex: index,
//       attempts: [],
//       status: "pending",
//       bestScore: 0,
//       timeSpent: 0,
//     })),
//     currentFragmentIndex: 0,
//     startTime: new Date(),
//     completedFragments: 0,
//     totalScore: 0,
//     isCompleted: false, // add
//   }));

//   // Current fragment state
//   const [currentInput, setCurrentInput] = useState("");
//   const [lastComparison, setLastComparison] = useState<ComparisonResult | null>(
//     null
//   );
//   const [showAnswer, setShowAnswer] = useState(false);
//   const [fragmentStartTime, setFragmentStartTime] = useState<Date | null>(null);

//   const currentFragment = fragments[session.currentFragmentIndex];
//   const currentProgress = session.progress[session.currentFragmentIndex];
//   const isLastFragment = session.currentFragmentIndex === fragments.length - 1;
//   const canProceed =
//     currentProgress.status === "correct" ||
//     currentProgress.status === "given_up";

//   // Auto-start timing when fragment changes
//   useEffect(() => {
//     setFragmentStartTime(new Date());
//     setCurrentInput("");
//     setLastComparison(null);
//     setShowAnswer(false);
//   }, [session.currentFragmentIndex]);

//   // Audio controls
//   const handlePlayFragment = useCallback(() => {
//     audioControls.seekToFragment(session.currentFragmentIndex);
//     audioControls.play();
//   }, [audioControls, session.currentFragmentIndex]);

//   const handleReplayFragment = useCallback(() => {
//     audioControls.replayCurrentFragment();
//   }, [audioControls]);

//   const handlePlaybackRateChange = useCallback(
//     (rate: number) => {
//       audioControls.setPlaybackRate(rate);
//     },
//     [audioControls]
//   );

//   // Dictation logic
//   const handleConfirm = useCallback(() => {
//     if (!currentInput.trim() || !currentFragment) return;

//     const result = compareTexts(currentFragment.text, currentInput.trim());
//     const attempt: DictationAttempt = {
//       attempt: currentInput.trim(),
//       result,
//       timestamp: new Date(),
//     };

//     // Calculate time spent on this fragment
//     const timeSpent = fragmentStartTime
//       ? Math.round((Date.now() - fragmentStartTime.getTime()) / 1000)
//       : 0;

//     setSession((prev) => {
//       const newProgress = [...prev.progress];
//       const fragmentProgress = newProgress[session.currentFragmentIndex];

//       fragmentProgress.attempts.push(attempt);
//       fragmentProgress.bestScore = Math.max(
//         fragmentProgress.bestScore,
//         result.score
//       );
//       fragmentProgress.timeSpent += timeSpent;

//       if (isAnswerAcceptable(result)) {
//         fragmentProgress.status = "correct";
//       }

//       const completedFragments = newProgress.filter(
//         (p) => p.status !== "pending"
//       ).length;
//       const totalScore =
//         newProgress.reduce((sum, p) => sum + p.bestScore, 0) /
//         newProgress.length;

//       const updatedSession = {
//         ...prev,
//         progress: newProgress,
//         completedFragments,
//         totalScore,
//       };

//       // Notify parent of progress update
//       onProgressUpdate?.(newProgress);

//       return updatedSession;
//     });

//     setLastComparison(result);
//     setFragmentStartTime(new Date()); // Reset timer for potential retry
//   }, [
//     currentInput,
//     currentFragment,
//     fragmentStartTime,
//     session.currentFragmentIndex,
//     onProgressUpdate,
//   ]);

//   const handleGiveUp = useCallback(() => {
//     if (!allowGiveUp || !currentFragment) return;

//     // Calculate time spent
//     const timeSpent = fragmentStartTime
//       ? Math.round((Date.now() - fragmentStartTime.getTime()) / 1000)
//       : 0;

//     setSession((prev) => {
//       const newProgress = [...prev.progress];
//       const fragmentProgress = newProgress[session.currentFragmentIndex];

//       fragmentProgress.status = "given_up";
//       fragmentProgress.timeSpent += timeSpent;

//       const completedFragments = newProgress.filter(
//         (p) => p.status !== "pending"
//       ).length;
//       const totalScore =
//         newProgress.reduce((sum, p) => sum + p.bestScore, 0) /
//         newProgress.length;

//       const updatedSession = {
//         ...prev,
//         progress: newProgress,
//         completedFragments,
//         totalScore,
//       };

//       onProgressUpdate?.(newProgress);
//       return updatedSession;
//     });

//     setShowAnswer(true);
//     setLastComparison(null);
//   }, [
//     allowGiveUp,
//     currentFragment,
//     fragmentStartTime,
//     session.currentFragmentIndex,
//     onProgressUpdate,
//   ]);

//   const handleNext = useCallback(() => {
//     if (!canProceed) return;

//     if (isLastFragment) {
//       // Session complete
//       onSessionComplete?.(session);
//     } else {
//       setSession((prev) => ({
//         ...prev,
//         currentFragmentIndex: prev.currentFragmentIndex + 1,
//       }));
//     }
//   }, [canProceed, isLastFragment, session, onSessionComplete]);

//   const handlePrevious = useCallback(() => {
//     if (session.currentFragmentIndex > 0) {
//       setSession((prev) => ({
//         ...prev,
//         currentFragmentIndex: prev.currentFragmentIndex - 1,
//       }));
//     }
//   }, [session.currentFragmentIndex]);

//   // Keyboard shortcuts
//   useEffect(() => {
//     const handleKeyDown = (e: KeyboardEvent) => {
//       if (
//         e.target instanceof HTMLTextAreaElement ||
//         e.target instanceof HTMLInputElement
//       ) {
//         // Allow normal typing in input fields
//         if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
//           e.preventDefault();
//           handleConfirm();
//         }
//         return;
//       }

//       switch (e.key) {
//         case " ":
//           e.preventDefault();
//           audioControls.togglePlayback();
//           break;
//         case "r":
//           e.preventDefault();
//           handleReplayFragment();
//           break;
//         case "Enter":
//           e.preventDefault();
//           if (canProceed) {
//             handleNext();
//           } else {
//             handleConfirm();
//           }
//           break;
//       }
//     };

//     window.addEventListener("keydown", handleKeyDown);
//     return () => window.removeEventListener("keydown", handleKeyDown);
//   }, [
//     audioControls,
//     handleConfirm,
//     handleNext,
//     handleReplayFragment,
//     canProceed,
//   ]);

//   if (!currentFragment) {
//     return (
//       <div className="flex items-center justify-center min-h-screen">
//         <div className="text-center">
//           <h2 className="text-xl font-semibold text-gray-900 mb-2">
//             No fragments available
//           </h2>
//           <p className="text-gray-600">
//             Please check the article configuration.
//           </p>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div className="max-w-4xl mx-auto p-6 space-y-6">
//       {/* Header */}
//       <div className="text-center border-b pb-4">
//         <h1 className="text-2xl font-bold text-gray-900 mb-2">
//           {articleTitle}
//         </h1>
//         <div className="flex items-center justify-center space-x-4 text-sm text-gray-600">
//           <span>
//             Fragment {session.currentFragmentIndex + 1} of {fragments.length}
//           </span>
//           <span>•</span>
//           <span>{session.completedFragments} completed</span>
//           <span>•</span>
//           <span>Score: {Math.round(session.totalScore * 100)}%</span>
//         </div>
//       </div>

//       {/* Progress Bar */}
//       <div className="w-full bg-gray-200 rounded-full h-2">
//         <div
//           className="bg-blue-600 h-2 rounded-full transition-all duration-300"
//           style={{
//             width: `${(session.completedFragments / fragments.length) * 100}%`,
//           }}
//         />
//       </div>

//       {/* Audio Controls */}
//       <div className="bg-white rounded-lg shadow-sm border p-6">
//         <h2 className="text-lg font-semibold mb-4">Audio Controls</h2>

//         <div className="flex items-center space-x-4 mb-4">
//           <button
//             onClick={handlePlayFragment}
//             disabled={audioState.isLoading || !audioState.canPlay}
//             className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
//           >
//             {audioState.isPlaying ? "⏸️" : "▶️"} Play Fragment
//           </button>

//           <button
//             onClick={handleReplayFragment}
//             disabled={audioState.isLoading || !audioState.canPlay}
//             className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
//           >
//             🔄 Replay
//           </button>

//           <div className="flex items-center space-x-2">
//             <label className="text-sm text-gray-700">Speed:</label>
//             <input
//               type="range"
//               min="0.5"
//               max="1.5"
//               step="0.1"
//               value={audioState.playbackRate}
//               onChange={(e) => handlePlaybackRateChange(Number(e.target.value))}
//               className="w-20"
//             />
//             <span className="text-sm text-gray-600">
//               {audioState.playbackRate}x
//             </span>
//           </div>
//         </div>

//         {audioState.error && (
//           <div className="text-red-600 text-sm bg-red-50 p-2 rounded">
//             Error: {audioState.error}
//           </div>
//         )}
//       </div>

//       {/* Text Display (Optional) */}
//       {showText && !showAnswer && (
//         <div className="bg-gray-50 rounded-lg p-4">
//           <p className="text-gray-800 text-center italic">
//             "{currentFragment.text}"
//           </p>
//         </div>
//       )}

//       {/* Input Section */}
//       <div className="bg-white rounded-lg shadow-sm border p-6">
//         <h2 className="text-lg font-semibold mb-4">Your Answer</h2>

//         <div className="space-y-4">
//           <textarea
//             value={currentInput}
//             onChange={(e) => setCurrentInput(e.target.value)}
//             placeholder="Type what you heard..."
//             disabled={canProceed}
//             className="w-full h-24 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500"
//           />

//           <div className="flex items-center space-x-3">
//             <button
//               onClick={handleConfirm}
//               disabled={!currentInput.trim() || canProceed}
//               className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
//             >
//               Confirm Answer
//             </button>

//             {allowGiveUp && (
//               <button
//                 onClick={handleGiveUp}
//                 disabled={canProceed}
//                 className="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 disabled:opacity-50 disabled:cursor-not-allowed"
//               >
//                 Show Answer
//               </button>
//             )}
//           </div>

//           {/* Attempt Count */}
//           {currentProgress.attempts.length > 0 && (
//             <div className="text-sm text-gray-600">
//               Attempts: {currentProgress.attempts.length}
//               {currentProgress.bestScore > 0 && (
//                 <span className="ml-2">
//                   • Best score: {Math.round(currentProgress.bestScore * 100)}%
//                 </span>
//               )}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Feedback Section */}
//       {(lastComparison || showAnswer) && (
//         <div className="bg-white rounded-lg shadow-sm border p-6">
//           <h2 className="text-lg font-semibold mb-4">Feedback</h2>

//           {lastComparison && !isAnswerAcceptable(lastComparison) && (
//             <div className="space-y-3">
//               <div className="flex items-center space-x-2">
//                 <span className="text-red-600 text-lg">❌</span>
//                 <span className="text-red-700 font-medium">
//                   {lastComparison.correctTokens}/{lastComparison.totalTokens}{" "}
//                   words correct ({Math.round(lastComparison.score * 100)}%)
//                 </span>
//               </div>

//               <div className="bg-red-50 p-3 rounded border">
//                 <p className="text-sm text-gray-700 mb-1">Hint:</p>
//                 <p className="font-mono text-red-800 text-lg">
//                   {lastComparison.feedback}
//                 </p>
//               </div>

//               <p className="text-sm text-gray-600">
//                 Try again or click "Show Answer" if you need help.
//               </p>
//             </div>
//           )}

//           {lastComparison && isAnswerAcceptable(lastComparison) && (
//             <div className="space-y-3">
//               <div className="flex items-center space-x-2">
//                 <span className="text-green-600 text-lg">✅</span>
//                 <span className="text-green-700 font-medium">
//                   Perfect! Well done!
//                 </span>
//               </div>

//               <div className="bg-green-50 p-3 rounded border">
//                 <p className="font-medium text-green-800">
//                   "{currentFragment.text}"
//                 </p>
//               </div>
//             </div>
//           )}

//           {showAnswer && (
//             <div className="space-y-3">
//               <div className="flex items-center space-x-2">
//                 <span className="text-blue-600 text-lg">💡</span>
//                 <span className="text-blue-700 font-medium">
//                   Correct Answer:
//                 </span>
//               </div>

//               <div className="bg-blue-50 p-3 rounded border">
//                 <p className="font-medium text-blue-800">
//                   "{currentFragment.text}"
//                 </p>
//               </div>
//             </div>
//           )}
//         </div>
//       )}

//       {/* Navigation */}
//       <div className="flex justify-between items-center pt-4">
//         <button
//           onClick={handlePrevious}
//           disabled={session.currentFragmentIndex === 0}
//           className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 disabled:opacity-50 disabled:cursor-not-allowed"
//         >
//           ← Previous
//         </button>

//         <div className="text-center">
//           <p className="text-sm text-gray-600">
//             Press <kbd className="px-2 py-1 bg-gray-100 rounded">Space</kbd> to
//             play/pause,
//             <kbd className="px-2 py-1 bg-gray-100 rounded ml-1">R</kbd> to
//             replay
//           </p>
//         </div>

//         <button
//           onClick={handleNext}
//           disabled={!canProceed}
//           className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
//         >
//           {isLastFragment ? "Finish" : "Next"} →
//         </button>
//       </div>
//     </div>
//   );
// };

// export default FragmentDictation;


C:\Users\User\Desktop\jink-demo\src\components\dictation\FragmentDictation.tsx

import React, { useState, useCallback, useEffect } from 'react';
import { useFragmentAudioPlayer } from '../../hooks/useFragmentAudioPlayer';
import type { FragmentTiming } from '../../hooks/useFragmentAudioPlayer';
import { compareTexts, isAnswerAcceptable } from '../../utils/dictationUtils';
import type { ComparisonResult } from '../../types/article.types';
import { useServerDictationProgress } from '../../hooks/useSessionUpload';

export interface DictationAttempt {
  attempt: string;
  result: ComparisonResult;
  timestamp: Date;
}

export interface FragmentProgress {
  fragmentIndex: number;
  attempts: DictationAttempt[];
  status: 'pending' | 'correct' | 'givenup';
  bestScore: number;
  timeSpent: number; // seconds
}

export interface DictationSession {
  articleName: string;
  articleTitle: string;
  fragments: FragmentTiming[];
  progress: FragmentProgress[];
  currentFragmentIndex: number;
  startTime: Date;
  endTime?: Date;
  completedFragments: number;
  totalScore: number;
  isCompleted: boolean;
}

interface FragmentDictationProps {
  articleName: string;
  articleTitle: string;
  fullAudioUrl: string;
  fragments: FragmentTiming[];
  onSessionComplete?: (session: DictationSession) => void;
  onProgressUpdate?: (progress: FragmentProgress[]) => void;
  showText?: boolean;
  allowGiveUp?: boolean;
  savedSession?: DictationSession | null;
}

const FragmentDictation: React.FC<FragmentDictationProps> = ({
  articleName,
  articleTitle,
  fullAudioUrl,
  fragments,
  onSessionComplete,
  onProgressUpdate,
  showText = false,
  allowGiveUp = true,
  savedSession,
}) => {
  
  // REMOVED: Separate currentFragmentIndex state (redundant with session.currentFragmentIndex)
  // const [currentFragmentIndex, setCurrentFragmentIndex] = useState(() => { ... });

  // Helper function to validate if savedSession can be safely reused
  const canReuseSaved = (s: DictationSession | null|undefined): s is DictationSession => {
    if (!s) return false;
    
    // Check if fragment count matches
    if (!Array.isArray(s.fragments) || s.fragments.length !== fragments.length) return false;
    
    // Light validation: compare first and last fragment text as a safeguard
    const headMatches = s.fragments[0]?.text === fragments[0]?.text;
    const tailMatches = s.fragments[fragments.length - 1]?.text === fragments[fragments.length - 1]?.text;
    
    return !!(headMatches && tailMatches);
  };

  // FIXED: Session state initializer that always returns a proper DictationSession
  const [session, setSession] = useState<DictationSession>(() => {
    if (canReuseSaved(savedSession)) {
      // Restore from savedSession with current fragments
      const progress: FragmentProgress[] = fragments.map((_, idx) => {
        const savedProgress = savedSession.progress[idx];
        return savedProgress
          ? {
              fragmentIndex: idx, // Ensure index matches current position
              attempts: savedProgress.attempts || [],
              status: savedProgress.status || 'pending',
              bestScore: savedProgress.bestScore || 0,
              timeSpent: savedProgress.timeSpent || 0,
            }
          : {
              fragmentIndex: idx,
              attempts: [],
              status: 'pending' as const,
              bestScore: 0,
              timeSpent: 0,
            };
      });

      const completedFragments = progress.filter(p => p.status !== 'pending').length;
      const totalScore = progress.reduce((sum, p) => sum + (p.bestScore || 0), 0) / Math.max(progress.length, 1);
      
      // Find first incomplete fragment to resume from
      const firstPendingIndex = progress.findIndex(p => p.status === 'pending');
      const resumeIndex = firstPendingIndex >= 0 ? firstPendingIndex : Math.max(progress.length - 1, 0);

      return {
        articleName,
        articleTitle,
        fragments, // Use current fragments, not saved ones
        progress,
        currentFragmentIndex: resumeIndex,
        startTime: savedSession.startTime || new Date(),
        endTime: savedSession.endTime,
        completedFragments,
        totalScore,
        isCompleted: savedSession.isCompleted || (completedFragments === fragments.length),
      };
    }

    // FIXED: Create fresh session that strictly conforms to DictationSession interface
    const initialProgress: FragmentProgress[] = fragments.map((_, index) => ({
      fragmentIndex: index,
      attempts: [], // No attempts yet
      status: 'pending' as const,
      bestScore: 0,
      timeSpent: 0,
      // REMOVED: text field (not part of FragmentProgress interface)
    }));

    return {
      articleName,
      articleTitle,
      fragments,
      progress: initialProgress,
      currentFragmentIndex: 0,
      startTime: new Date(),
      endTime: undefined,
      completedFragments: 0,
      totalScore: 0,
      isCompleted: false, // ADDED: Required field that was missing
      // REMOVED: sessionId field (not part of DictationSession interface)
    };
  });

  const { state: audioState, controls: audioControls } = useFragmentAudioPlayer(
    fullAudioUrl,
    fragments,
    true
  );

  // Use the enhanced server sync hook
  const { saveSession, isUploading, error: uploadError } = useServerDictationProgress(articleName);

  // Current fragment state
  const [currentInput, setCurrentInput] = useState('');
  const [lastComparison, setLastComparison] = useState<ComparisonResult | null>(null);
  const [showAnswer, setShowAnswer] = useState(false);
  const [fragmentStartTime, setFragmentStartTime] = useState<Date | null>(null);

  const currentFragment = fragments[session.currentFragmentIndex];
  const currentProgress = session.progress[session.currentFragmentIndex];
  const isLastFragment = session.currentFragmentIndex === fragments.length - 1;
  const canProceed = currentProgress.status === 'correct' || currentProgress.status === 'givenup';

  // Optional: Handle savedSession updates after initial mount (e.g., async restoration)
  useEffect(() => {
    if (!canReuseSaved(savedSession)) return;
    
    setSession(prev => {
      // Don't overwrite if user has already made progress in this session
      if (prev.completedFragments > 0 || prev.progress.some(p => p.attempts.length > 0)) {
        return prev;
      }

      const progress: FragmentProgress[] = fragments.map((_, idx) => {
        const savedProgress = savedSession.progress[idx];
        return savedProgress
          ? { ...savedProgress, fragmentIndex: idx }
          : { fragmentIndex: idx, attempts: [], status: 'pending' as const, bestScore: 0, timeSpent: 0 };
      });

      const completedFragments = progress.filter(p => p.status !== 'pending').length;
      const totalScore = progress.reduce((s, p) => s + (p.bestScore || 0), 0) / Math.max(progress.length, 1);
      const firstPendingIndex = progress.findIndex(p => p.status === 'pending');

      return {
        ...prev,
        progress,
        currentFragmentIndex: firstPendingIndex >= 0 ? firstPendingIndex : Math.max(progress.length - 1, 0),
        completedFragments,
        totalScore,
        startTime: savedSession.startTime || prev.startTime,
        endTime: savedSession.endTime,
        isCompleted: savedSession.isCompleted || (completedFragments === fragments.length),
      };
    });
  }, [savedSession, fragments]);

  // Auto-start timing when fragment changes
  useEffect(() => {
    setFragmentStartTime(new Date());
    setCurrentInput('');
    setLastComparison(null);
    setShowAnswer(false);
  }, [session.currentFragmentIndex]);

  // Audio controls
  const handlePlayFragment = useCallback(() => {
    audioControls.seekToFragment(session.currentFragmentIndex);
    audioControls.play();
  }, [audioControls, session.currentFragmentIndex]);

  const handleReplayFragment = useCallback(() => {
    audioControls.replayCurrentFragment();
  }, [audioControls]);

  const handlePlaybackRateChange = useCallback((rate: number) => {
    audioControls.setPlaybackRate(rate);
  }, [audioControls]);

  // Dictation logic
  const handleConfirm = useCallback(() => {
    if (!currentInput.trim() || !currentFragment) return;

    const result = compareTexts(currentFragment.text, currentInput.trim());
    const attempt: DictationAttempt = {
      attempt: currentInput.trim(),
      result,
      timestamp: new Date(),
    };

    // Calculate time spent on this fragment
    const timeSpent = fragmentStartTime ? 
      Math.round((Date.now() - fragmentStartTime.getTime()) / 1000) : 0;

    setSession(prev => {
      const newProgress = [...prev.progress];
      const fragmentProgress = newProgress[session.currentFragmentIndex];
      
      fragmentProgress.attempts.push(attempt);
      fragmentProgress.bestScore = Math.max(fragmentProgress.bestScore, result.score);
      fragmentProgress.timeSpent += timeSpent;
      
      if (isAnswerAcceptable(result)) {
        fragmentProgress.status = 'correct';
      }

      const completedFragments = newProgress.filter(p => p.status !== 'pending').length;
      const totalScore = newProgress.reduce((sum, p) => sum + p.bestScore, 0) / newProgress.length;

      const updatedSession = {
        ...prev,
        progress: newProgress,
        completedFragments,
        totalScore,
      };

      // Notify parent of progress update
      onProgressUpdate?.(newProgress);
      
      return updatedSession;
    });

    setLastComparison(result);
    setFragmentStartTime(new Date()); // Reset timer for potential retry
  }, [currentInput, currentFragment, fragmentStartTime, session.currentFragmentIndex, onProgressUpdate]);

  const handleGiveUp = useCallback(() => {
    if (!allowGiveUp || !currentFragment) return;

    // Calculate time spent
    const timeSpent = fragmentStartTime ? 
      Math.round((Date.now() - fragmentStartTime.getTime()) / 1000) : 0;

    setSession(prev => {
      const newProgress = [...prev.progress];
      const fragmentProgress = newProgress[session.currentFragmentIndex];
      
      fragmentProgress.status = 'givenup';
      fragmentProgress.timeSpent += timeSpent;

      const completedFragments = newProgress.filter(p => p.status !== 'pending').length;
      const totalScore = newProgress.reduce((sum, p) => sum + p.bestScore, 0) / newProgress.length;

      const updatedSession = {
        ...prev,
        progress: newProgress,
        completedFragments,
        totalScore,
      };

      onProgressUpdate?.(newProgress);
      
      return updatedSession;
    });

    setShowAnswer(true);
    setLastComparison(null);
  }, [allowGiveUp, currentFragment, fragmentStartTime, session.currentFragmentIndex, onProgressUpdate]);

  const handleNext = useCallback(async () => {
    if (!canProceed) return;

    if (isLastFragment) {
      // Session complete - mark as completed and auto-upload
      const completedSession: DictationSession = {
        ...session,
        isCompleted: true,
        endTime: new Date(), // Add completion timestamp
      };
      
      try {
        // Auto-upload to server
        await saveSession(completedSession);
        console.log('Session completed and uploaded to server');
      } catch (error) {
        console.error('Failed to upload completed session:', error);
        // Continue with session completion even if upload fails
      }

      onSessionComplete?.(completedSession);
    } else {
      // Move to next fragment
      setSession(prev => ({
        ...prev,
        currentFragmentIndex: prev.currentFragmentIndex + 1,
      }));
    }
  }, [canProceed, isLastFragment, session, onSessionComplete, saveSession]);

  // Rest of the component remains the same...
  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="text-center border-b pb-4">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">{articleTitle}</h1>
        <div className="flex items-center justify-center space-x-4 text-sm text-gray-600">
          <span>Fragment {session.currentFragmentIndex + 1} of {fragments.length}</span>
          <span>•</span>
          <span>{session.completedFragments} completed</span>
          <span>•</span>
          <span>Score: {Math.round(session.totalScore * 100)}%</span>
        </div>
        
        {/* Upload Status Indicator */}
        <div className="mt-2">
          {isUploading && (
            <span className="text-sm text-blue-600">💾 Saving progress...</span>
          )}
          {uploadError && (
            <span className="text-sm text-red-600">⚠️ Sync failed (saved locally)</span>
          )}
          {!isUploading && !uploadError && session.completedFragments > 0 && (
            <span className="text-sm text-green-600">✓ Progress saved</span>
          )}
        </div>
      </div>

      {/* Progress Bar */}
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div 
          className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
          style={{ width: `${(session.completedFragments / fragments.length) * 100}%` }}
        />
      </div>

      {/* Audio Controls */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-lg font-semibold mb-4">Audio Controls</h2>
        <div className="flex items-center space-x-4 mb-4">
          <button
            onClick={handlePlayFragment}
            disabled={audioState.isLoading || !audioState.canPlay}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
          >
            {audioState.isPlaying ? '⏸️' : '▶️'} Play Fragment
          </button>
          
          <button
            onClick={handleReplayFragment}
            disabled={audioState.isLoading || !audioState.canPlay}
            className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            🔄 Replay
          </button>

          {allowGiveUp && (
            <button
              onClick={handleGiveUp}
              disabled={canProceed}
              className="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Show Answer
            </button>
          )}
        </div>

        {/* Attempt Count */}
        {currentProgress.attempts.length > 0 && (
          <div className="text-sm text-gray-600">
            Attempts: {currentProgress.attempts.length}
            {currentProgress.bestScore > 0 && (
              <span className="ml-2">Best score: {Math.round(currentProgress.bestScore * 100)}%</span>
            )}
          </div>
        )}

        {/* Speed Control */}
        <div className="flex items-center space-x-2">
          <label className="text-sm text-gray-700">Speed:</label>
          <input
            type="range"
            min="0.5"
            max="1.5"
            step="0.1"
            value={audioState.playbackRate}
            onChange={(e) => handlePlaybackRateChange(Number(e.target.value))}
            className="w-20"
          />
          <span className="text-sm text-gray-600">{audioState.playbackRate}x</span>
        </div>
      </div>

      {/* Audio Error */}
      {audioState.error && (
        <div className="text-red-600 text-sm bg-red-50 p-2 rounded">
          Error: {audioState.error}
        </div>
      )}

      {/* Text Display (Optional) */}
      {(showText || showAnswer) && (
        <div className="bg-gray-50 rounded-lg p-4">
          <p className="text-gray-800 text-center italic">{currentFragment.text}</p>
        </div>
      )}

      {/* Input Section */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-lg font-semibold mb-4">Your Answer</h2>
        <div className="space-y-4">
          <textarea
            value={currentInput}
            onChange={(e) => setCurrentInput(e.target.value)}
            placeholder="Type what you heard..."
            disabled={canProceed}
            className="w-full h-24 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500"
          />
          
          <div className="flex items-center space-x-3">
            <button
              onClick={handleConfirm}
              disabled={!currentInput.trim() || canProceed}
              className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Confirm Answer
            </button>

            {canProceed && (
              <button
                onClick={handleNext}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                {isLastFragment ? 'Complete Session' : 'Next Fragment'} →
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Feedback Section */}
      {(lastComparison || showAnswer) && (
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <h2 className="text-lg font-semibold mb-4">Feedback</h2>
          
          {lastComparison && !isAnswerAcceptable(lastComparison) && (
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <span className="text-red-600 text-lg">❌</span>
                <span className="text-red-700 font-medium">
                  {lastComparison.correctTokens}/{lastComparison.totalTokens} words correct 
                  ({Math.round(lastComparison.score * 100)}%)
                </span>
              </div>
              
              <div className="bg-red-50 p-3 rounded border">
                <p className="text-sm text-gray-700 mb-1"><strong>Hint:</strong></p>
                <p className="font-mono text-red-800 text-lg">{lastComparison.feedback}</p>
              </div>
              
              <p className="text-sm text-gray-600">
                Try again or click "Show Answer" if you need help.
              </p>
            </div>
          )}

          {lastComparison && isAnswerAcceptable(lastComparison) && (
            <div className="flex items-center space-x-2">
              <span className="text-green-600 text-lg">✅</span>
              <span className="text-green-700 font-medium">
                Excellent! {Math.round(lastComparison.score * 100)}% accuracy
              </span>
            </div>
          )}

          {showAnswer && (
            <div className="bg-blue-50 p-3 rounded border">
              <p className="text-sm text-gray-700 mb-1"><strong>Correct Answer:</strong></p>
              <p className="font-mono text-blue-800 text-lg">{currentFragment.text}</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default FragmentDictation;


C:\Users\User\Desktop\jink-demo\src\components\dictation\SessionResults.tsx


// src/components/dictation/SessionResults.tsx

import React from 'react';
import type { DictationSession } from './FragmentDictation';
import { DictationService } from '../../services/dictationService';

// import type { SessionAnalytics } from '../../services/dictationService';

interface SessionResultsProps {
  session: DictationSession;
  onRetry?: () => void;
  onReturnToList?: () => void;
  onViewProgress?: () => void;
}

const SessionResults: React.FC<SessionResultsProps> = ({
  session,
  onRetry,
  onReturnToList,
  onViewProgress
}) => {
  const analytics = DictationService.analyzeSession(session);
  const performanceLevel = DictationService.getPerformanceLevel(analytics.averageScore);
  const accuracyTrend = DictationService.getAccuracyTrend(session.progress);
  const recommendations = DictationService.getRecommendations(session);

  const formatPercentage = (value: number) => Math.round(value * 100);

  // const getDuration = () => {
  //   if (!session.endTime) return 'N/A';
    
  //   const duration = (new Date(session.endTime).getTime() - new Date(session.startTime).getTime()) / 1000;
  //   const minutes = Math.floor(duration / 60);
  //   const seconds = Math.floor(duration % 60);
  //   return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  // };


  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="text-center bg-white rounded-lg shadow-sm border p-8">
        <div className="mb-4">
          {analytics.completionRate === 1 ? (
            <div className="text-6xl mb-2">🎉</div>
          ) : (
            <div className="text-6xl mb-2">📊</div>
          )}
        </div>
        
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          {analytics.completionRate === 1 ? 'Congratulations!' : 'Session Complete'}
        </h1>
        
        <p className="text-xl text-gray-600 mb-4">
          {session.fragments[0]?.text ? session.fragments[0].text.substring(0, 50) + '...' : 'Dictation Practice'}
        </p>

        <div className={`inline-flex items-center px-4 py-2 rounded-full font-semibold ${performanceLevel.color}`}>
          {performanceLevel.level}
        </div>
        
        <p className="text-gray-600 mt-2">{performanceLevel.description}</p>
      </div>

      {/* Key Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow-sm border p-6 text-center">
          <div className="text-3xl font-bold text-blue-600 mb-2">
            {formatPercentage(analytics.averageScore)}%
          </div>
          <div className="text-sm text-gray-600">Overall Accuracy</div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border p-6 text-center">
          <div className="text-3xl font-bold text-green-600 mb-2">
            {analytics.fragmentsCompleted}
          </div>
          <div className="text-sm text-gray-600">
            Fragments Completed
            <div className="text-xs text-gray-500">out of {analytics.totalFragments}</div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border p-6 text-center">
          <div className="text-3xl font-bold text-purple-600 mb-2">
            {DictationService.formatTime(analytics.totalTimeSpent)}
          </div>
          <div className="text-sm text-gray-600">Time Spent</div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border p-6 text-center">
          <div className="text-3xl font-bold text-orange-600 mb-2">
            {analytics.averageAttemptsPerFragment.toFixed(1)}
          </div>
          <div className="text-sm text-gray-600">Avg Attempts</div>
        </div>
      </div>

      {/* Progress Breakdown */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-xl font-semibold mb-4">Progress Breakdown</h2>
        
        <div className="space-y-4">
          {/* Completion Rate Bar */}
          <div>
            <div className="flex justify-between text-sm text-gray-600 mb-1">
              <span>Completion Rate</span>
              <span>{formatPercentage(analytics.completionRate)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-1000"
                style={{ width: `${formatPercentage(analytics.completionRate)}%` }}
              />
            </div>
          </div>

          {/* Accuracy Trend */}
          {session.progress.length > 3 && (
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-600">Accuracy Trend:</span>
              <div className="flex items-center space-x-1">
                {accuracyTrend.trend === 'improving' && (
                  <>
                    <span className="text-green-600">📈</span>
                    <span className="text-green-600 text-sm font-medium">Improving</span>
                  </>
                )}
                {accuracyTrend.trend === 'declining' && (
                  <>
                    <span className="text-red-600">📉</span>
                    <span className="text-red-600 text-sm font-medium">Declining</span>
                  </>
                )}
                {accuracyTrend.trend === 'stable' && (
                  <>
                    <span className="text-gray-600">➡️</span>
                    <span className="text-gray-600 text-sm font-medium">Stable</span>
                  </>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Fragment Details */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-xl font-semibold mb-4">Fragment Performance</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
          {session.progress.map((progress, index) => {
            const fragment = session.fragments[index];
            if (!fragment) return null;

            let statusColor = 'bg-gray-100 text-gray-600';
            let statusIcon = '⏳';
            
            if (progress.status === 'correct') {
              statusColor = 'bg-green-100 text-green-700';
              statusIcon = '✅';
            } else if (progress.status === 'givenup') {
              statusColor = 'bg-yellow-100 text-yellow-700';
              statusIcon = '💡';
            }

            return (
              <div key={index} className={`p-3 rounded-lg border-2 ${statusColor} border-opacity-20`}>
                <div className="flex items-center justify-between mb-1">
                  <span className="text-xs font-medium">Fragment {index + 1}</span>
                  <span className="text-lg">{statusIcon}</span>
                </div>
                
                <div className="text-xs mb-1 truncate" title={fragment.text}>
                  {fragment.text}
                </div>
                
                <div className="flex justify-between text-xs">
                  <span>Score: {formatPercentage(progress.bestScore)}%</span>
                  <span>Tries: {progress.attempts.length}</span>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* Strengths and Areas for Improvement */}
      {(analytics.strengths.length > 0 || analytics.improvements.length > 0) && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {analytics.strengths.length > 0 && (
            <div className="bg-green-50 rounded-lg border border-green-200 p-6">
              <h3 className="text-lg font-semibold text-green-800 mb-3 flex items-center">
                <span className="mr-2">💪</span>
                Strengths
              </h3>
              <ul className="space-y-2">
                {analytics.strengths.map((strength, index) => (
                  <li key={index} className="text-green-700 text-sm flex items-start">
                    <span className="text-green-600 mr-2 mt-1">•</span>
                    {strength}
                  </li>
                ))}
              </ul>
            </div>
          )}

          {analytics.improvements.length > 0 && (
            <div className="bg-blue-50 rounded-lg border border-blue-200 p-6">
              <h3 className="text-lg font-semibold text-blue-800 mb-3 flex items-center">
                <span className="mr-2">🎯</span>
                Areas for Improvement
              </h3>
              <ul className="space-y-2">
                {analytics.improvements.map((improvement, index) => (
                  <li key={index} className="text-blue-700 text-sm flex items-start">
                    <span className="text-blue-600 mr-2 mt-1">•</span>
                    {improvement}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

      {/* Recommendations */}
      {recommendations.length > 0 && (
        <div className="bg-purple-50 rounded-lg border border-purple-200 p-6">
          <h3 className="text-lg font-semibold text-purple-800 mb-3 flex items-center">
            <span className="mr-2">💡</span>
            Personalized Recommendations
          </h3>
          <ul className="space-y-2">
            {recommendations.map((recommendation, index) => (
              <li key={index} className="text-purple-700 text-sm flex items-start">
                <span className="text-purple-600 mr-2 mt-1">→</span>
                {recommendation}
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Difficult Fragments */}
      {analytics.difficultFragments.length > 0 && (
        <div className="bg-orange-50 rounded-lg border border-orange-200 p-6">
          <h3 className="text-lg font-semibold text-orange-800 mb-3 flex items-center">
            <span className="mr-2">⚠️</span>
            Challenging Fragments
          </h3>
          <p className="text-orange-700 text-sm mb-3">
            These fragments might benefit from extra practice:
          </p>
          <div className="space-y-2">
            {analytics.difficultFragments.map((progress) => {
              const fragment = session.fragments[progress.fragmentIndex];
              return (
                <div key={progress.fragmentIndex} className="bg-white p-3 rounded border">
                  <div className="flex justify-between items-start mb-1">
                    <span className="text-xs font-medium text-gray-600">
                      Fragment {progress.fragmentIndex + 1}
                    </span>
                    <div className="text-xs text-gray-500">
                      {progress.attempts.length} attempts • {formatPercentage(progress.bestScore)}% best score
                    </div>
                  </div>
                  <p className="text-sm text-gray-800">{fragment?.text}</p>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 pt-4">
        {onRetry && (
          <button
            onClick={onRetry}
            className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold"
          >
            Practice Again
          </button>
        )}
        
        {onViewProgress && (
          <button
            onClick={onViewProgress}
            className="flex-1 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-semibold"
          >
            View Detailed Progress
          </button>
        )}
        
        {onReturnToList && (
          <button
            onClick={onReturnToList}
            className="flex-1 px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-semibold"
          >
            Back to Articles
          </button>
        )}
      </div>

      {/* Share Results */}
      <div className="text-center border-t pt-4">
        <p className="text-sm text-gray-600 mb-2">
          Session completed on {session.startTime.toLocaleDateString()}
        </p>
        <div className="text-xs text-gray-500">
          <span>Total Score: {formatPercentage(analytics.averageScore)}%</span>
          <span className="mx-2">•</span>
          <span>Time: {DictationService.formatTime(analytics.totalTimeSpent)}</span>
          <span className="mx-2">•</span>
          <span>Completion: {formatPercentage(analytics.completionRate)}%</span>
        </div>
      </div>
    </div>
  );
};

export default SessionResults;


C:\Users\User\Desktop\jink-demo\src\components\groups\GroupDetail.tsx

// src/components/groups/GroupDetail.tsx
import React, { useState } from 'react';
import { useUsers } from '../../hooks/useUsers';
import { useAuth } from '../../context/AuthContext';
import { useManageGroupMembers } from '../../hooks/useGroups';
import { RoleBasedComponent } from '../common/RoleBasedComponent';
import { ConfirmDialog } from '../common/ConfirmDialog';
import { MemberPicker } from './MemberPicker';
import type { IStudentGroup } from '../../api/apiGroups';

interface GroupDetailProps {
  group: IStudentGroup;
  onClose: () => void;
  onEdit: () => void;
}

export const GroupDetail: React.FC<GroupDetailProps> = ({
  group,
  onClose,
  onEdit
}) => {
  const { user } = useAuth();
  const { data: allUsers } = useUsers();
  const manageGroupMembers = useManageGroupMembers();
  const [showMemberPicker, setShowMemberPicker] = useState(false);
  const [removeDialog, setRemoveDialog] = useState<{
    isOpen: boolean;
    username: string | null;
    fullname: string | null;
  }>({ isOpen: false, username: null, fullname: null });

  // Filter users for members in this group
  const groupMembers = allUsers?.filter(
    u => group.studentUsernames?.includes(u.username)
  ) || [];

  const canManage =
    user &&
    (user.role === 'admin' ||
      (user.role === 'teacher' && user.username === group.teacherUsername));

  const handleRemoveConfirm = async () => {
    if (removeDialog.username) {
      await manageGroupMembers.mutateAsync({
        groupId: group._id!,
        memberData: { remove: [removeDialog.username] }
      });
      setRemoveDialog({ isOpen: false, username: null, fullname: null });
    }
  };

  return (
    <>
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded p-6 max-w-4xl w-full max-h-[90vh] overflow-auto">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">{group.name}</h2>
            <button onClick={onClose} aria-label="Close">&times;</button>
          </div>
          <p>{group.description}</p>
          <div className="grid grid-cols-2 gap-4 my-4">
            <span>Teacher: {group.teacherUsername}</span>
            {group.metadata?.grade && <span>Grade: {group.metadata.grade}</span>}
            {group.metadata?.subject && <span>Subject: {group.metadata.subject}</span>}
            {group.metadata?.academicYear && <span>Year: {group.metadata.academicYear}</span>}
          </div>
          <div className="mb-4">
            <div className="flex justify-between mb-2">
              <h3 className="font-medium">Members</h3>
              <RoleBasedComponent allowedRoles={['admin', 'teacher']}>
                {canManage && (
                  <button onClick={() => setShowMemberPicker(true)} className="text-blue-600">
                    Add Students
                  </button>
                )}
              </RoleBasedComponent>
            </div>
            <ul>
              {groupMembers.map(m => (
                <li key={m.username} className="flex justify-between items-center">
                  <span>
                    {m.fullname} ({m.username})
                  </span>
                  {canManage && (
                    <button
                      className="text-red-600 text-sm"
                      onClick={() => setRemoveDialog({
                        isOpen: true,
                        username: m.username,
                        fullname: m.fullname
                      })}
                    >
                      Remove
                    </button>
                  )}
                </li>
              ))}
              {groupMembers.length === 0 && <li className="text-gray-500">No students yet.</li>}
            </ul>
          </div>
          <div className="mt-4 flex justify-end space-x-2">
            <button onClick={onClose} className="border px-4 py-2 rounded">Close</button>
            {canManage && (
              <button onClick={onEdit} className="bg-blue-600 text-white px-4 py-2 rounded">Edit Group</button>
            )}
          </div>
        </div>
      </div>
      {/* MemberPicker Modal */}
      {showMemberPicker && (
        <MemberPicker
          group={group}
          onSuccess={() => setShowMemberPicker(false)}
          onCancel={() => setShowMemberPicker(false)}
        />
      )}
      {/* Remove member confirmation */}
      <ConfirmDialog
        isOpen={removeDialog.isOpen}
        title="Remove Student"
        message={`Are you sure you want to remove "${removeDialog.fullname}" from this group?`}
        confirmText="Remove"
        cancelText="Cancel"
        type="warning"
        onConfirm={handleRemoveConfirm}
        onCancel={() => setRemoveDialog({ isOpen: false, username: null, fullname: null })}
      />
    </>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\groups\GroupForm.tsx

import React, { useState, useEffect } from 'react';
import { useCreateGroup, useUpdateGroup } from '../../hooks/useGroups';
import type { IStudentGroup, IGroupCreate, IGroupUpdate } from '../../api/apiGroups';

interface GroupFormProps {
  group?: IStudentGroup;
  onSuccess: () => void;
  onCancel: () => void;
}

export const GroupForm: React.FC<GroupFormProps> = ({
  group,
  onSuccess,
  onCancel
}) => {
  const createGroupMutation = useCreateGroup();
  const updateGroupMutation = useUpdateGroup();
  const isEditing = !!group;

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    grade: '',
    subject: '',
    academicYear: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (group) {
      setFormData({
        name: group.name || '',
        description: group.description || '',
        grade: group.metadata?.grade || '',
        subject: group.metadata?.subject || '',
        academicYear: group.metadata?.academicYear || ''
      });
    }
  }, [group]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Group name is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      const groupData = {
        name: formData.name.trim(),
        description: formData.description.trim() || undefined,
        metadata: {
          grade: formData.grade.trim() || undefined,
          subject: formData.subject.trim() || undefined,
          academicYear: formData.academicYear.trim() || undefined
        }
      };

      if (isEditing) {
        await updateGroupMutation.mutateAsync({
          groupId: group!._id!,
          groupData: groupData as IGroupUpdate
        });
      } else {
        await createGroupMutation.mutateAsync(groupData as IGroupCreate);
      }

      onSuccess();
    } catch (error) {
      console.error('Error saving group:', error);
    }
  };

  const isSubmitting = createGroupMutation.isPending || updateGroupMutation.isPending;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
        <h2 className="text-xl font-bold mb-4">
          {isEditing ? 'Edit Group' : 'Create New Group'}
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Group Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              className={`w-full p-2 border rounded-md ${errors.name ? 'border-red-500' : 'border-gray-300'}`}
              placeholder="Enter group name"
            />
            {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Description
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="w-full p-2 border border-gray-300 rounded-md"
              rows={3}
              placeholder="Enter group description (optional)"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Grade
              </label>
              <input
                type="text"
                value={formData.grade}
                onChange={(e) => setFormData(prev => ({ ...prev, grade: e.target.value }))}
                className="w-full p-2 border border-gray-300 rounded-md"
                placeholder="e.g., 10th"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Subject
              </label>
              <input
                type="text"
                value={formData.subject}
                onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}
                className="w-full p-2 border border-gray-300 rounded-md"
                placeholder="e.g., Mathematics"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Academic Year
            </label>
            <input
              type="text"
              value={formData.academicYear}
              onChange={(e) => setFormData(prev => ({ ...prev, academicYear: e.target.value }))}
              className="w-full p-2 border border-gray-300 rounded-md"
              placeholder="e.g., 2024-2025"
            />
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button
              type="button"
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              disabled={isSubmitting}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Saving...' : isEditing ? 'Update Group' : 'Create Group'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\groups\GroupsList.tsx

import React, { useState } from 'react';
import { useGroups, useDeleteGroup } from '../../hooks/useGroups';
import { useAuth } from '../../context/AuthContext';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { ConfirmDialog } from '../common/ConfirmDialog';
import { RoleBasedComponent } from '../common/RoleBasedComponent';
import type { IStudentGroup } from '../../api/apiGroups';

interface GroupsListProps {
  onCreateGroup: () => void;
  onEditGroup: (group: IStudentGroup) => void;
  onViewGroup: (group: IStudentGroup) => void;
}

export const GroupsList: React.FC<GroupsListProps> = ({
  onCreateGroup,
  onEditGroup,
  onViewGroup
}) => {
  const { user } = useAuth();
  const { data: groups, isLoading, error } = useGroups();
  const deleteGroupMutation = useDeleteGroup();
  const [deleteDialog, setDeleteDialog] = useState<{
    isOpen: boolean;
    group: IStudentGroup | null;
  }>({ isOpen: false, group: null });

  const handleDeleteClick = (group: IStudentGroup) => {
    setDeleteDialog({ isOpen: true, group });
  };

  const handleDeleteConfirm = async () => {
    if (deleteDialog.group) {
      await deleteGroupMutation.mutateAsync(deleteDialog.group._id!);
      setDeleteDialog({ isOpen: false, group: null });
    }
  };

  const canEditGroup = (group: IStudentGroup) => {
    if (user?.role === 'admin') return true;
    if (user?.role === 'teacher' && group.teacherUsername === user.username) return true;
    return false;
  };

  if (isLoading) return <LoadingSpinner message="Loading groups..." />;
  if (error) return <div className="text-red-600">Error loading groups: {(error as Error).message}</div>;

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Groups</h2>
        <RoleBasedComponent allowedRoles={['admin', 'teacher']}>
          <button
            onClick={onCreateGroup}
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
          >
            Create Group
          </button>
        </RoleBasedComponent>
      </div>

      {!groups || groups.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          No groups found. Create your first group to get started.
        </div>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {groups.map((group) => (
            <div key={group._id} className="bg-white rounded-lg shadow border p-4">
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-lg font-semibold">{group.name}</h3>
                <span className="text-sm text-gray-500">
                  {group.studentUsernames?.length || 0} students
                </span>
              </div>
              
              {group.description && (
                <p className="text-gray-600 text-sm mb-2">{group.description}</p>
              )}
              
              <div className="text-xs text-gray-500 mb-3">
                Teacher: {group.teacherUsername}
                {group.metadata?.grade && ` • Grade: ${group.metadata.grade}`}
                {group.metadata?.subject && ` • Subject: ${group.metadata.subject}`}
              </div>

              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => onViewGroup(group)}
                  className="text-blue-600 hover:text-blue-800 text-sm"
                >
                  View
                </button>
                {canEditGroup(group) && (
                  <>
                    <button
                      onClick={() => onEditGroup(group)}
                      className="text-green-600 hover:text-green-800 text-sm"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDeleteClick(group)}
                      className="text-red-600 hover:text-red-800 text-sm"
                    >
                      Delete
                    </button>
                  </>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      <ConfirmDialog
        isOpen={deleteDialog.isOpen}
        title="Delete Group"
        message={`Are you sure you want to delete "${deleteDialog.group?.name}"? This action cannot be undone.`}
        confirmText="Delete"
        cancelText="Cancel"
        type="danger"
        onConfirm={handleDeleteConfirm}
        onCancel={() => setDeleteDialog({ isOpen: false, group: null })}
      />
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\groups\MemberPicker.tsx

import React, { useState, useMemo } from 'react';
import { useUsers } from '../../hooks/useUsers';
import { useManageGroupMembers } from '../../hooks/useGroups';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IStudentGroup } from '../../api/apiGroups';

interface MemberPickerProps {
  group: IStudentGroup;
  onSuccess: () => void;
  onCancel: () => void;
}

export const MemberPicker: React.FC<MemberPickerProps> = ({
  group,
  onSuccess,
  onCancel,
}) => {
  const { data: allUsers, isLoading } = useUsers();
  const manageGroupMembers = useManageGroupMembers();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);

  const availableStudents = useMemo(() => {
    if (!allUsers) return [];
    return allUsers
      .filter(
        (user) =>
          user.role === 'student' &&
          !group.studentUsernames?.includes(user.username)
      )
      .filter(
        (user) =>
          searchTerm === '' ||
          user.fullname.toLowerCase().includes(searchTerm.toLowerCase()) ||
          user.username.toLowerCase().includes(searchTerm.toLowerCase())
      );
  }, [allUsers, group.studentUsernames, searchTerm]);

  const handleUserToggle = (username: string) => {
    setSelectedUsers((prev) =>
      prev.includes(username)
        ? prev.filter((u) => u !== username)
        : [...prev, username]
    );
  };

  const handleAddMembers = async () => {
    if (selectedUsers.length === 0) return;
    try {
      await manageGroupMembers.mutateAsync({
        groupId: group._id!,
        memberData: { add: selectedUsers },
      });
      onSuccess();
    } catch (error) {
      alert('Failed to add members');
    }
  };

  if (isLoading) return <LoadingSpinner message="Loading students..." />;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden flex flex-col">
        <h2 className="text-xl font-bold mb-4">Add Students to "{group.name}"</h2>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Search students..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div className="flex-1 overflow-y-auto mb-4">
          {availableStudents.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              {searchTerm ? 'No students found matching your search.' : 'No students available to add.'}
            </div>
          ) : (
            <div className="space-y-2">
              {availableStudents.map((student) => (
                <label
                  key={student.username}
                  className="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={selectedUsers.includes(student.username)}
                    onChange={() => handleUserToggle(student.username)}
                    className="mr-3"
                  />
                  <div className="flex-1">
                    <div className="font-medium">{student.fullname}</div>
                    <div className="text-sm text-gray-500">@{student.username}</div>
                  </div>
                </label>
              ))}
            </div>
          )}
        </div>
        <div className="flex justify-between items-center pt-4 border-t">
          <div className="text-sm text-gray-600">
            {selectedUsers.length} student{selectedUsers.length !== 1 ? 's' : ''} selected
          </div>
          <div className="flex space-x-2">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              disabled={manageGroupMembers.isPending}
            >
              Cancel
            </button>
            <button
              onClick={handleAddMembers}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              disabled={selectedUsers.length === 0 || manageGroupMembers.isPending}
            >
              {manageGroupMembers.isPending
                ? 'Adding...'
                : `Add ${selectedUsers.length} Student${selectedUsers.length !== 1 ? 's' : ''}`}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\groups\StudentPicker.tsx

import React, { useState, useMemo } from 'react';
import { useUsers } from '../../hooks/useUsers';
import { useManageGroupMembers } from '../../hooks/useGroups';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IStudentGroup } from '../../api/apiGroups';

interface StudentPickerProps {
  group: IStudentGroup;
  onSuccess: () => void;
  onCancel: () => void;
}

export const StudentPicker: React.FC<StudentPickerProps> = ({
  group,
  onSuccess,
  onCancel,
}) => {
  const { data: allUsers, isLoading } = useUsers();
  const manageGroupMembers = useManageGroupMembers();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);

  const availableStudents = useMemo(() => {
    if (!allUsers) return [];
    return allUsers
      .filter(
        (user) =>
          user.role === 'student' &&
          !group.studentUsernames?.includes(user.username)
      )
      .filter(
        (user) =>
          searchTerm === '' ||
          user.fullname.toLowerCase().includes(searchTerm.toLowerCase()) ||
          user.username.toLowerCase().includes(searchTerm.toLowerCase())
      );
  }, [allUsers, group.studentUsernames, searchTerm]);

  const handleUserToggle = (username: string) => {
    setSelectedUsers((prev) =>
      prev.includes(username)
        ? prev.filter((u) => u !== username)
        : [...prev, username]
    );
  };

  const handleAddMembers = async () => {
    if (selectedUsers.length === 0) return;
    try {
      await manageGroupMembers.mutateAsync({
        groupId: group._id!,
        memberData: { add: selectedUsers },
      });
      onSuccess();
    } catch (error) {
      alert('Failed to add members');
    }
  };

  if (isLoading) return <LoadingSpinner message="Loading students..." />;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden flex flex-col">
        <h2 className="text-xl font-bold mb-4">Add Students to "{group.name}"</h2>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Search students..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div className="flex-1 overflow-y-auto mb-4">
          {availableStudents.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              {searchTerm ? 'No students found matching your search.' : 'No students available to add.'}
            </div>
          ) : (
            <div className="space-y-2">
              {availableStudents.map((student) => (
                <label
                  key={student.username}
                  className="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={selectedUsers.includes(student.username)}
                    onChange={() => handleUserToggle(student.username)}
                    className="mr-3"
                  />
                  <div className="flex-1">
                    <div className="font-medium">{student.fullname}</div>
                    <div className="text-sm text-gray-500">@{student.username}</div>
                  </div>
                </label>
              ))}
            </div>
          )}
        </div>
        <div className="flex justify-between items-center pt-4 border-t">
          <div className="text-sm text-gray-600">
            {selectedUsers.length} student{selectedUsers.length !== 1 ? 's' : ''} selected
          </div>
          <div className="flex space-x-2">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              disabled={manageGroupMembers.isPending}
            >
              Cancel
            </button>
            <button
              onClick={handleAddMembers}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              disabled={selectedUsers.length === 0 || manageGroupMembers.isPending}
            >
              {manageGroupMembers.isPending
                ? 'Adding...'
                : `Add ${selectedUsers.length} Student${selectedUsers.length !== 1 ? 's' : ''}`}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\student\RecentActivity.tsx

// src/components/student/RecentActivity.tsx
import React from 'react';
import { Link } from 'react-router-dom';

interface RecentActivityProps {
  progressData?: {
    recentSessions: Array<{
      articleName: string;
      articleTitle: string;
      score: number;
      completionRate: number;
      timestamp: Date;
      fragments: number;
    }>;
  } | null;
}

const RecentActivity: React.FC<RecentActivityProps> = ({ progressData }) => {
  const recentSessions = progressData?.recentSessions || [];

  if (recentSessions.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">Recent Activity</h2>
        <div className="text-center py-8 text-gray-500">
          <div className="text-4xl mb-2">🌟</div>
          <p>Start practicing to see your recent activity here!</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <h2 className="text-xl font-semibold text-gray-900 mb-4">Recent Activity</h2>
      
      <div className="space-y-3">
        {recentSessions.slice(0, 5).map((session, index) => (
          <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div className="flex-1">
              <Link
                to={`/student/practice/${session.articleName}`}
                className="font-medium text-gray-900 hover:text-blue-600"
              >
                {session.articleTitle}
              </Link>
              <div className="text-sm text-gray-500">
                {session.fragments} fragments • {Math.round(session.completionRate)}% completed
              </div>
            </div>
            
            <div className="text-right">
              <div className={`font-semibold ${
                session.score >= 80 ? 'text-green-600' : 
                session.score >= 60 ? 'text-yellow-600' : 'text-red-600'
              }`}>
                {Math.round(session.score)}%
              </div>
              <div className="text-xs text-gray-500">
                {new Date(session.timestamp).toLocaleDateString()}
              </div>
            </div>
          </div>
        ))}
      </div>

      {recentSessions.length > 5 && (
        <div className="text-center mt-4">
          <button className="text-blue-600 hover:text-blue-700 text-sm font-medium">
            View all activity →
          </button>
        </div>
      )}
    </div>
  );
};

export default RecentActivity;

C:\Users\User\Desktop\jink-demo\src\components\student\StudentArticleCard.tsx

// src/components/student/StudentArticleCard.tsx
import React from 'react';
import { Link } from 'react-router-dom';
import type { IArticle } from '../../types/article.types';

// interface ArticleProgress {
//   isCompleted: boolean;
//   bestScore: number;
//   completionRate: number;
//   lastAttempt: Date;
//   totalAttempts: number;
// }

import type { ArticleProgress } from '../../types/progress.types';

interface StudentArticleCardProps {
  article: IArticle;
  progress?: ArticleProgress;
  showQuickStart?: boolean;
}

const StudentArticleCard: React.FC<StudentArticleCardProps> = ({ 
  article, 
  progress, 
  // showQuickStart = false 
}) => {
  const getDifficultyColor = (difficulty?: string) => {
    switch (difficulty) {
      case 'A1': return 'bg-green-100 text-green-800';
      case 'A2': return 'bg-green-100 text-green-800';
      case 'B1': return 'bg-yellow-100 text-yellow-800';
      case 'B2': return 'bg-yellow-100 text-yellow-800';
      case 'C1': return 'bg-red-100 text-red-800';
      case 'C2': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getProgressColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    if (score >= 50) return 'text-orange-600';
    return 'text-red-600';
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric'
    });
  };


  return (
    <div className="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow">
      {/* Header */}
      <div className="p-6 pb-4">
        <div className="flex justify-between items-start mb-3">
          <h3 className="text-lg font-semibold text-gray-900 line-clamp-2">
            {article.title}
          </h3>
          
          {progress?.isCompleted && (
            <div className="text-green-600 text-xl ml-2" title="Completed">
              ✓
            </div>
          )}
        </div>

        {/* Metadata */}
        <div className="flex flex-wrap gap-2 mb-3">
          {article.metadata?.difficulty && (
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(article.metadata.difficulty)}`}>
              {article.metadata.difficulty} Level
            </span>
          )}
          
          {article.metadata?.subject && (
            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
              {article.metadata.subject}
            </span>
          )}

          <span className="px-2 py-1 bg-gray-100 text-gray-600 rounded-full text-xs">
            {article.sentences?.length || 0} fragments
          </span>
        </div>

        {/* Progress Bar (if any progress exists) */}
        {progress && (
          <div className="mb-3">
            <div className="flex justify-between text-sm mb-1">
              <span className="text-gray-600">Progress</span>
              <span className={`font-medium ${getProgressColor(progress.bestScore)}`}>
                {Math.round(progress.bestScore)}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${progress.completionRate}%` }}
              />
            </div>
          </div>
        )}

        {/* Stats */}
        <div className="flex justify-between text-sm text-gray-600">
          <span>By {article.teacherUsername}</span>
          <span>{article.createdAt? formatDate(article.createdAt):""}</span>
        </div>
      </div>

      {/* Footer */}
      <div className="px-6 pb-6">





        {progress ? (
          <div className="space-y-2">
            {/* Progress Summary */}
            <div className="text-xs text-gray-500 flex justify-between">
              <span>{progress.totalAttempts} attempts</span>
              <span>
                Last: {new Date(progress.lastAttempt).toLocaleDateString()}
              </span>
            </div>

            {/* Action Button */}
            <Link
              to={`/student/practice/${article.articleName}`}
              className={`block w-full px-4 py-2 rounded-lg text-center font-medium transition-colors ${
                progress.isCompleted
                  ? 'bg-green-600 text-white hover:bg-green-700'
                  : 'bg-blue-600 text-white hover:bg-blue-700'
              }`}
            >
              {progress.isCompleted ? 'Practice Again' : 'Continue'}
            </Link>
          </div>




        ) : (
          <Link
            to={`/student/practice/${article.articleName}`}
            className="block w-full px-4 py-2 bg-blue-600 text-white rounded-lg text-center font-medium hover:bg-blue-700 transition-colors"
          >
            Start Practice
          </Link>
        )}
{(progress?.totalAttempts?progress?.totalAttempts:10) > 0 && (
  <Link
    to={`/student/progress/${article.articleName}`}
    className="inline-flex items-center px-3 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 transition-colors"
  >
    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
    </svg>
    View Progress
  </Link>
)}


      </div>
    </div>
  );
};

export default StudentArticleCard;

C:\Users\User\Desktop\jink-demo\src\components\student\StudentStats.tsx

// src/components/student/StudentStats.tsx
import React from 'react';

interface StudentStatsProps {
  progressData?: {
    totalArticlesAttempted: number;
    completedArticles: string[];
    averageScore: number;
    totalTimeSpent: number;
  } | null;
}

const StudentStats: React.FC<StudentStatsProps> = ({ progressData }) => {
  const formatTime = (minutes: number) => {
    if (minutes < 60) return `${Math.round(minutes)}m`;
    const hours = Math.floor(minutes / 60);
    const mins = Math.round(minutes % 60);
    return `${hours}h ${mins}m`;
  };

  const stats = [
    {
      label: 'Articles Attempted',
      value: progressData?.totalArticlesAttempted || 0,
      icon: '📚',
      color: 'text-blue-600'
    },
    {
      label: 'Completed',
      value: progressData?.completedArticles?.length || 0,
      icon: '✅',
      color: 'text-green-600'
    },
    {
      label: 'Average Score',
      value: progressData?.averageScore ? `${Math.round(progressData.averageScore)}%` : '0%',
      icon: '🎯',
      color: 'text-yellow-600'
    },
    {
      label: 'Practice Time',
      value: formatTime(progressData?.totalTimeSpent || 0),
      icon: '⏱️',
      color: 'text-purple-600'
    }
  ];

  return (
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
      {stats.map((stat, index) => (
        <div key={index} className="bg-white rounded-lg shadow-sm border p-6 text-center">
          <div className="text-2xl mb-2">{stat.icon}</div>
          <div className={`text-2xl font-bold ${stat.color} mb-1`}>
            {stat.value}
          </div>
          <div className="text-sm text-gray-600">{stat.label}</div>
        </div>
      ))}
    </div>
  );
};

export default StudentStats;

C:\Users\User\Desktop\jink-demo\src\components\teacher\AnalyticsPlaceholders.tsx

import React from 'react';

const AnalyticsPlaceholders: React.FC = () => {
  const placeholderSections = [
    {
      title: 'Article Performance Analytics',
      description: 'Detailed breakdown of how students perform on individual articles and specific fragments.',
      features: ['Fragment difficulty analysis', 'Completion rate trends', 'Common error patterns', 'Time-to-completion metrics'],
      icon: '📈'
    },
    {
      title: 'Individual Student Reports',
      description: 'Comprehensive per-student analytics with learning progression and personalized insights.',
      features: ['Progress timeline', 'Skill development tracking', 'Personalized recommendations', 'Detailed session history'],
      icon: '👤'
    },
    {
      title: 'Export & Reporting',
      description: 'Export class and individual student data for external analysis and reporting.',
      features: ['CSV/PDF exports', 'Custom date ranges', 'Grade book integration', 'Parent/admin reports'],
      icon: '📊'
    }
  ];

  return (
    <div className="space-y-6">
      <div className="border-t pt-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">Coming Soon</h2>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {placeholderSections.map((section, index) => (
            <div
              key={index}
              className="bg-gray-50 border-2 border-dashed border-gray-200 rounded-lg p-6 text-center"
            >
              <div className="text-4xl mb-4 opacity-50">{section.icon}</div>
              <h3 className="text-lg font-semibold text-gray-700 mb-2">
                {section.title}
              </h3>
              <p className="text-sm text-gray-600 mb-4">
                {section.description}
              </p>
              <ul className="text-left text-xs text-gray-500 space-y-1">
                {section.features.map((feature, idx) => (
                  <li key={idx} className="flex items-center">
                    <span className="w-1.5 h-1.5 bg-gray-400 rounded-full mr-2 flex-shrink-0"></span>
                    {feature}
                  </li>
                ))}
              </ul>
              <div className="mt-4">
                <span className="inline-flex px-3 py-1 bg-gray-200 text-gray-500 text-xs rounded-full">
                  In Development
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AnalyticsPlaceholders;


C:\Users\User\Desktop\jink-demo\src\components\teacher\ClassStatisticsCard.tsx

import React from 'react';

interface StudentData {
  studentUsername: string;
  articlesAttempted: number;
  totalSessions: number;
  averageScore: number;
  completedArticles: number;
  totalTimeSpent: number;
}

interface ClassStatisticsCardProps {
  students: StudentData[];
}

const ClassStatisticsCard: React.FC<ClassStatisticsCardProps> = ({ students }) => {
  // Calculate class-wide statistics
  const totalStudents = students.length;
  const activeStudents = students.filter(s => s.totalSessions > 0).length;
  const totalSessions = students.reduce((sum, s) => sum + s.totalSessions, 0);
  const averageScore = totalSessions > 0 
    ? Math.round(students.reduce((sum, s) => sum + (s.averageScore * s.totalSessions), 0) / totalSessions)
    : 0;
  const totalTimeSpent = Math.round(students.reduce((sum, s) => sum + s.totalTimeSpent, 0) / 60); // Convert to minutes

  const stats = [
    {
      label: 'Total Students',
      value: totalStudents,
      icon: '👥',
      color: 'text-blue-600',
      bgColor: 'bg-blue-50'
    },
    {
      label: 'Active Students',
      value: activeStudents,
      icon: '✅',
      color: 'text-green-600',
      bgColor: 'bg-green-50'
    },
    {
      label: 'Class Average',
      value: `${averageScore}%`,
      icon: '📊',
      color: 'text-purple-600',
      bgColor: 'bg-purple-50'
    },
    {
      label: 'Practice Time',
      value: `${totalTimeSpent}min`,
      icon: '⏱️',
      color: 'text-orange-600',
      bgColor: 'bg-orange-50'
    }
  ];

  return (
    <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
      {stats.map((stat, index) => (
        <div key={index} className="bg-white rounded-lg shadow-sm border p-6">
          <div className={`inline-flex items-center justify-center w-12 h-12 rounded-lg ${stat.bgColor} mb-4`}>
            <span className="text-2xl">{stat.icon}</span>
          </div>
          <div className={`text-3xl font-bold ${stat.color} mb-1`}>
            {stat.value}
          </div>
          <div className="text-sm text-gray-600">{stat.label}</div>
        </div>
      ))}
    </div>
  );
};

export default ClassStatisticsCard;


C:\Users\User\Desktop\jink-demo\src\components\teacher\PublishControls.tsx

import React, { useState } from 'react';
import { useUpdateArticleStatus } from '../../hooks/useArticles';
import { useAudioStatus } from '../../hooks/useAudioStatus';
import type { IArticle } from '../../types/article.types';
import {useAuth} from '../../context/AuthContext'; // adjust relative path as needed
import { Link } from 'react-router-dom';

interface PublishControlsProps {
  article: IArticle;
  onStatusChange?: () => void;
}

const PublishControls: React.FC<PublishControlsProps> = ({ article, onStatusChange }) => {
  const [showConfirm, setShowConfirm] = useState<'publish' | 'unpublish' | null>(null);
  const updateStatusMutation = useUpdateArticleStatus();
  const { data: audioStatus } = useAudioStatus(article.articleName, true);

  const { user } = useAuth();

  // FIXED: Audio availability check (not status-based)
  const hasAudio = audioStatus?.audio?.hasAudio || 
                   (audioStatus?.audio?.totalFragments ?? 0) > 0 || 
                   Boolean(article.fullAudioUrl);

  // FIXED: Clear status logic
  const isEditing = article.status === 'editing';
  const isProcessing = article.status === 'processing';
  const isPublished = article.status === 'ready'; // ONLY means published for students
  const isError = article.status === 'error';


    const previewPath =
    user?.role === 'teacher' || user?.role === 'admin'
      ? `/teacher/practice/${article.articleName}`
      : `/student/practice/${article.articleName}`;
  // UPDATED: Publishing rules with clear flow
  // - Can publish: editing status AND has audio AND not processing
  // - Can unpublish: currently published (ready status)
  const canPublish = isEditing && hasAudio && !updateStatusMutation.isPending;
  const canUnpublish = isPublished && !updateStatusMutation.isPending;

  const handlePublish = async () => {
    try {
      await updateStatusMutation.mutateAsync({
        articleName: article.articleName,
        status: 'ready', // Publish = set to ready
      });
      setShowConfirm(null);
      onStatusChange?.();
    } catch (error) {
      console.error('Publishing failed:', error);
    }
  };

  const handleUnpublish = async () => {
    try {
      await updateStatusMutation.mutateAsync({
        articleName: article.articleName,
        status: 'editing', // Unpublish = back to editing
      });
      setShowConfirm(null);
      onStatusChange?.();
    } catch (error) {
      console.error('Unpublishing failed:', error);
    }
  };

  // Helper function for button tooltip
  const getPublishTooltip = () => {
    if (isProcessing) return 'Audio is still processing';
    if (!hasAudio) return 'Generate audio first';
    if (isError) return 'Fix audio generation errors first';
    return undefined;
  };

  return (
    <div className="space-y-2">
      {/* UPDATED: Status Indicator with clearer labels */}
      <div className={`text-xs px-2 py-1 rounded-full text-center font-medium ${
        isPublished ? 'bg-green-100 text-green-800' :
        isProcessing ? 'bg-blue-100 text-blue-800' :
        isError ? 'bg-red-100 text-red-800' :
        hasAudio ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
      }`}>
        {isPublished ? '🎯 Published for Students' :
         isProcessing ? '🔄 Generating Audio...' :
         isError ? '❌ Generation Failed' :
         hasAudio ? '✅ Ready to Publish' : '📝 Draft'
        }
      </div>

      {/* Error Message */}
      {isError && article.processingError && (
        <div className="text-xs text-red-600 bg-red-50 p-2 rounded">
          Error: {article.processingError}
        </div>
      )}

      {/* Publish Button - Only for editing articles with audio */}
      {!isPublished && (
        <button
          onClick={() => setShowConfirm('publish')}
          disabled={!canPublish}
          className={`w-full px-4 py-2 rounded-md text-sm font-medium transition-colors ${
            canPublish
              ? 'bg-green-600 text-white hover:bg-green-700'
              : 'bg-gray-300 text-gray-500 cursor-not-allowed'
          }`}
          title={getPublishTooltip()}
        >
          {updateStatusMutation.isPending ? 'Publishing...' : '🎯 Publish for Students'}
        </button>
      )}

      {/* Unpublish Button - Only for published articles */}
      {isPublished && (
        <button
          onClick={() => setShowConfirm('unpublish')}
          disabled={!canUnpublish}
          className="w-full px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 text-sm font-medium transition-colors disabled:opacity-60"
        >
          {updateStatusMutation.isPending ? 'Unpublishing...' : '📝 Unpublish & Edit'}
        </button>
      )}

      {/* Preview Button - Only for published articles */}
      {isPublished && (
        <Link
          to={previewPath}
          className="block w-full px-4 py-2 border border-blue-300 text-blue-700 rounded-md hover:bg-blue-50 text-sm font-medium text-center transition-colors"
        >
          👁️ Preview Student Experience
        </Link>
      )}

      {/* UPDATED: Audio Ready Indicator - For editing articles with audio */}
      {isEditing && hasAudio && (
        <div className="text-xs text-green-600 bg-green-50 p-2 rounded">
          ✅ Audio generated successfully. Click publish to make available to students.
        </div>
      )}

      {/* ADDED: No Audio Warning - For editing articles without audio */}
      {isEditing && !hasAudio && !isProcessing && (
        <div className="text-xs text-yellow-600 bg-yellow-50 p-2 rounded">
          ⚠️ Generate audio before publishing for students.
        </div>
      )}

      {/* Confirmation Modals */}
      {showConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-2">
              {showConfirm === 'publish' ? '🎯 Publish Article' : '📝 Unpublish Article'}
            </h3>
            <p className="text-gray-600 mb-6">
              {showConfirm === 'publish'
                ? `Publish "${article.title}" for student practice? Students will be able to access this article immediately.`
                : `Unpublish "${article.title}" and return to editing? Students will no longer be able to access this article.`}
            </p>

            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowConfirm(null)}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={showConfirm === 'publish' ? handlePublish : handleUnpublish}
                disabled={updateStatusMutation.isPending}
                className={`px-4 py-2 text-white rounded-md disabled:opacity-50 ${
                  showConfirm === 'publish'
                    ? 'bg-green-600 hover:bg-green-700'
                    : 'bg-orange-600 hover:bg-orange-700'
                }`}
              >
                {showConfirm === 'publish' ? 'Publish' : 'Unpublish'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PublishControls;


C:\Users\User\Desktop\jink-demo\src\components\teacher\StudentProgressDashboard.tsx

import React from 'react';
import { useQuery } from '@tanstack/react-query';
import api from '../../api/axios';

const StudentProgressDashboard: React.FC = () => {
  const { data: studentsProgress, isLoading } = useQuery({
    queryKey: ['teacher-analytics', 'students'],
    queryFn: async () => {
      const response = await api.get('/sessions/analytics/students');
      return response.data.students;
    }
  });

  if (isLoading) return <div>Loading student progress...</div>;

  return (
    <div className="p-6">
      <h2 className="text-2xl font-semibold mb-6">Student Progress Analytics</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {studentsProgress?.map((student: any) => (
          <div key={`${student.studentUsername}-${student.articleName}`} 
               className="bg-white p-6 rounded-lg shadow">
            <h3 className="font-semibold text-lg mb-2">{student.studentUsername}</h3>
            <p className="text-gray-600 mb-2">{student.articleName}</p>
            
            <div className="space-y-2">
              <div>
                <span className="text-sm text-gray-500">Best Score:</span>
                <span className="ml-2 font-medium">{Math.round(student.bestScore * 100)}%</span>
              </div>
              
              <div>
                <span className="text-sm text-gray-500">Average Score:</span>
                <span className="ml-2 font-medium">{Math.round(student.averageScore * 100)}%</span>
              </div>
              
              <div>
                <span className="text-sm text-gray-500">Completion Rate:</span>
                <span className="ml-2 font-medium">{Math.round(student.completionRate)}%</span>
              </div>
              
              <div>
                <span className="text-sm text-gray-500">Time Spent:</span>
                <span className="ml-2 font-medium">{Math.round(student.totalTimeSpent / 60)} min</span>
              </div>
              
              <div>
                <span className="text-sm text-gray-500">Last Practiced:</span>
                <span className="ml-2 text-sm">{new Date(student.lastPracticed).toLocaleDateString()}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default StudentProgressDashboard;


C:\Users\User\Desktop\jink-demo\src\components\teacher\StudentProgressList.tsx

import React from 'react';

interface StudentData {
  studentUsername: string;
  articlesAttempted: number;
  totalSessions: number;
  averageScore: number;
  completedArticles: number;
  totalTimeSpent: number;
  recentActivity?: Array<{
    articleName: string;
    score: number;
    timestamp: string;
  }>;
}

interface StudentProgressListProps {
  students: StudentData[];
}

const StudentProgressList: React.FC<StudentProgressListProps> = ({ students }) => {
  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600 bg-green-50';
    if (score >= 70) return 'text-yellow-600 bg-yellow-50';
    if (score >= 50) return 'text-orange-600 bg-orange-50';
    return 'text-red-600 bg-red-50';
  };

  const getActivityStatus = (student: StudentData) => {
    if (student.totalSessions === 0) return { text: 'No Activity', color: 'text-gray-500' };
    
    const lastActivity = student.recentActivity?.[0];
    if (lastActivity) {
      const daysSince = Math.floor((Date.now() - new Date(lastActivity.timestamp).getTime()) / (1000 * 60 * 60 * 24));
      if (daysSince === 0) return { text: 'Active Today', color: 'text-green-600' };
      if (daysSince <= 3) return { text: `${daysSince}d ago`, color: 'text-blue-600' };
      if (daysSince <= 7) return { text: `${daysSince}d ago`, color: 'text-yellow-600' };
    }
    return { text: 'Inactive', color: 'text-gray-500' };
  };

  if (students.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="text-6xl mb-4">📚</div>
        <h3 className="text-xl font-semibold text-gray-900 mb-2">
          No Student Data Available
        </h3>
        <p className="text-gray-600 max-w-md mx-auto">
          Students haven't started practicing yet. Once they begin using the system, 
          their progress will appear here.
        </p>
      </div>
    );
  }

  // Sort students by activity (total sessions descending)
  const sortedStudents = [...students].sort((a, b) => b.totalSessions - a.totalSessions);

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Student
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Articles
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Sessions
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Average Score
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {sortedStudents.map((student) => {
            const status = getActivityStatus(student);
            return (
              <tr key={student.studentUsername} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                      <span className="text-blue-600 font-medium text-sm">
                        {student.studentUsername.charAt(0).toUpperCase()}
                      </span>
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">
                        {student.studentUsername}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <div className="space-y-1">
                    <div>{student.articlesAttempted} attempted</div>
                    <div className="text-xs text-gray-500">
                      {student.completedArticles} completed
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {student.totalSessions}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                  {student.totalSessions > 0 ? (
                    <span className={`inline-flex px-2 py-1 rounded-full text-xs font-semibold ${getScoreColor(student.averageScore)}`}>
                      {Math.round(student.averageScore)}%
                    </span>
                  ) : (
                    <span className="text-gray-400">—</span>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`text-sm font-medium ${status.color}`}>
                    {status.text}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    disabled
                    className="text-gray-400 cursor-not-allowed"
                    title="Coming Soon"
                  >
                    View Details
                  </button>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default StudentProgressList;


C:\Users\User\Desktop\jink-demo\src\components\user\ChangePasswordModal.tsx

import React, { useState } from 'react';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { apiChangeOwnPassword } from '../../api/apiAuth';

interface ChangePasswordModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export const ChangePasswordModal: React.FC<ChangePasswordModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
}) => {
  const [formData, setFormData] = useState({
    oldPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.oldPassword.trim())
      newErrors.oldPassword = 'Current password is required';

    if (!formData.newPassword.trim())
      newErrors.newPassword = 'New password is required';
    else if (formData.newPassword.length < 6)
      newErrors.newPassword = 'Password must be at least 6 characters long';

    if (!formData.confirmPassword.trim())
      newErrors.confirmPassword = 'Please confirm the new password';
    else if (formData.newPassword !== formData.confirmPassword)
      newErrors.confirmPassword = 'Passwords do not match';

    if (
      formData.oldPassword === formData.newPassword &&
      formData.oldPassword.trim()
    )
      newErrors.newPassword =
        'New password must be different from current password';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsSubmitting(true);

    try {
      const result = await apiChangeOwnPassword({
        oldPassword: formData.oldPassword,
        newPassword: formData.newPassword,
      });

      if (!result.success) {
        throw new Error(result.message || 'Failed to change password');
      }

      setFormData({
        oldPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
      setErrors({});
      onSuccess();
      onClose();
    } catch (error: any) {
      setErrors({
        general:
          error?.response?.data?.message ||
          error?.message ||
          'Failed to change password. Please try again.',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (
    field: keyof typeof formData,
    value: string
  ) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">
            Change Password
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={isSubmitting}
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          {/* Current Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Current Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.oldPassword}
              onChange={(e) =>
                handleInputChange('oldPassword', e.target.value)
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.oldPassword
                  ? 'border-red-500 bg-red-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter current password"
              disabled={isSubmitting}
            />
            {errors.oldPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.oldPassword}</p>
            )}
          </div>

          {/* New Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.newPassword}
              onChange={(e) =>
                handleInputChange('newPassword', e.target.value)
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.newPassword
                  ? 'border-red-500 bg-red-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter new password (min. 6 characters)"
              disabled={isSubmitting}
            />
            {errors.newPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.newPassword}</p>
            )}
          </div>

          {/* Confirm New Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Confirm New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.confirmPassword}
              onChange={(e) =>
                handleInputChange('confirmPassword', e.target.value)
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.confirmPassword
                  ? 'border-red-500 bg-red-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Confirm new password"
              disabled={isSubmitting}
            />
            {errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">
                {errors.confirmPassword}
              </p>
            )}
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={isSubmitting}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {isSubmitting ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Changing...</span>
                </>
              ) : (
                'Change Password'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\user\CreateUserModal.tsx

import React, { useState } from 'react';
import { useCreateUser } from '../../hooks/useUsers';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IUserCreate } from '../../api/apiUsers';

interface CreateUserModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export const CreateUserModal: React.FC<CreateUserModalProps> = ({ 
  isOpen, 
  onClose, 
  onSuccess 
}) => {
  const createUserMutation = useCreateUser();
  
  const [formData, setFormData] = useState<IUserCreate>({
    username: '',
    fullname: '',
    email: '',
    password: '',
    role: 'student',
    isActive: true
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
    } else if (!/^[a-zA-Z0-9_]{3,20}$/.test(formData.username)) {
      newErrors.username = 'Username must be 3-20 characters with letters, numbers, and underscores only';
    }

    if (!formData.fullname.trim()) {
      newErrors.fullname = 'Full name is required';
    } else if (formData.fullname.length < 2) {
      newErrors.fullname = 'Full name must be at least 2 characters long';
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Please provide a valid email address';
    }

    if (!formData.password.trim()) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters long';
    }

    if (!formData.role) {
      newErrors.role = 'Role is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      await createUserMutation.mutateAsync(formData);
      
      // Reset form
      setFormData({
        username: '',
        fullname: '',
        email: '',
        password: '',
        role: 'student',
        isActive: true
      });
      setErrors({});
      
      onSuccess();
      onClose();
    } catch (error: any) {
      if (error.response?.status === 409) {
        setErrors({ username: 'Username already exists' });
      } else {
        setErrors({ general: 'Failed to create user. Please try again.' });
      }
    }
  };

  const handleInputChange = (field: keyof IUserCreate, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Create New User</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={createUserMutation.isPending}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          {/* Username Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Username <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.username}
              onChange={(e) => handleInputChange('username', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.username ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter username"
              disabled={createUserMutation.isPending}
            />
            {errors.username && (
              <p className="mt-1 text-sm text-red-600">{errors.username}</p>
            )}
          </div>

          {/* Full Name Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Full Name <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.fullname}
              onChange={(e) => handleInputChange('fullname', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.fullname ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter full name"
              disabled={createUserMutation.isPending}
            />
            {errors.fullname && (
              <p className="mt-1 text-sm text-red-600">{errors.fullname}</p>
            )}
          </div>

          {/* Email Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email (Optional)
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.email ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter email address"
              disabled={createUserMutation.isPending}
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>

          {/* Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={formData.password}
              onChange={(e) => handleInputChange('password', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.password ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter password (min. 6 characters)"
              disabled={createUserMutation.isPending}
            />
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>

          {/* Role Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Role <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.role}
              onChange={(e) => handleInputChange('role', e.target.value as any)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.role ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              disabled={createUserMutation.isPending}
            >
              <option value="student">Student</option>
              <option value="teacher">Teacher</option>
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
            {errors.role && (
              <p className="mt-1 text-sm text-red-600">{errors.role}</p>
            )}
          </div>

          {/* Active Status Field */}
          <div className="flex items-center">
            <input
              type="checkbox"
              id="isActive"
              checked={formData.isActive}
              onChange={(e) => handleInputChange('isActive', e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              disabled={createUserMutation.isPending}
            />
            <label htmlFor="isActive" className="ml-2 block text-sm text-gray-700">
              User is active
            </label>
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={createUserMutation.isPending}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={createUserMutation.isPending}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {createUserMutation.isPending ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Creating...</span>
                </>
              ) : (
                'Create User'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\user\EditUserModal.tsx

import React, { useState, useEffect } from 'react';
import { useUpdateUser } from '../../hooks/useUsers';
import { LoadingSpinner } from '../common/LoadingSpinner';
import type { IUser, IUserUpdate } from '../../api/apiUsers';

interface EditUserModalProps {
  isOpen: boolean;
  user: IUser | null;
  onClose: () => void;
  onSuccess: () => void;
}

export const EditUserModal: React.FC<EditUserModalProps> = ({ 
  isOpen, 
  user, 
  onClose, 
  onSuccess 
}) => {
  const updateUserMutation = useUpdateUser();
  
  const [formData, setFormData] = useState<IUserUpdate>({
    username: '',
    fullname: '',
    email: '',
    role: 'student',
    isActive: true
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (user) {
      setFormData({
        username: user.username,
        fullname: user.fullname,
        email: user.email || '',
        role: user.role,
        isActive: user.isActive
      });
    }
  }, [user]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.username?.trim()) {
      newErrors.username = 'Username is required';
    } else if (!/^[a-zA-Z0-9_]{3,20}$/.test(formData.username)) {
      newErrors.username = 'Username must be 3-20 characters with letters, numbers, and underscores only';
    }

    if (!formData.fullname?.trim()) {
      newErrors.fullname = 'Full name is required';
    } else if (formData.fullname.length < 2) {
      newErrors.fullname = 'Full name must be at least 2 characters long';
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Please provide a valid email address';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user || !validateForm()) return;

    try {
      await updateUserMutation.mutateAsync({
        username: user.username,
        userData: formData
      });
      
      setErrors({});
      onSuccess();
      onClose();
    } catch (error: any) {
      if (error.response?.status === 409) {
        setErrors({ username: 'Username already exists' });
      } else {
        setErrors({ general: 'Failed to update user. Please try again.' });
      }
    }
  };

  const handleInputChange = (field: keyof IUserUpdate, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen || !user) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Edit User: {user.username}</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={updateUserMutation.isPending}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          {/* Username Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Username <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.username}
              onChange={(e) => handleInputChange('username', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.username ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter username"
              disabled={updateUserMutation.isPending}
            />
            {errors.username && (
              <p className="mt-1 text-sm text-red-600">{errors.username}</p>
            )}
          </div>

          {/* Full Name Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Full Name <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.fullname}
              onChange={(e) => handleInputChange('fullname', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.fullname ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter full name"
              disabled={updateUserMutation.isPending}
            />
            {errors.fullname && (
              <p className="mt-1 text-sm text-red-600">{errors.fullname}</p>
            )}
          </div>

          {/* Email Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.email ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter email address"
              disabled={updateUserMutation.isPending}
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>

          {/* Role Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Role <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.role}
              onChange={(e) => handleInputChange('role', e.target.value as any)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 hover:border-gray-400 transition-colors"
              disabled={updateUserMutation.isPending}
            >
              <option value="student">Student</option>
              <option value="teacher">Teacher</option>
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          {/* Active Status Field */}
          <div className="flex items-center">
            <input
              type="checkbox"
              id="isActive"
              checked={formData.isActive}
              onChange={(e) => handleInputChange('isActive', e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              disabled={updateUserMutation.isPending}
            />
            <label htmlFor="isActive" className="ml-2 block text-sm text-gray-700">
              User is active
            </label>
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={updateUserMutation.isPending}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={updateUserMutation.isPending}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {updateUserMutation.isPending ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Updating...</span>
                </>
              ) : (
                'Update User'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\user\PasswordResetModal.tsx

import React, { useState } from 'react';
import { useResetPassword } from '../../hooks/useUsers';
import { LoadingSpinner } from '../common/LoadingSpinner';

interface PasswordResetModalProps {
  isOpen: boolean;
  username: string;
  fullname: string;
  onClose: () => void;
  onSuccess: () => void;
}

export const PasswordResetModal: React.FC<PasswordResetModalProps> = ({ 
  isOpen, 
  username, 
  fullname, 
  onClose, 
  onSuccess 
}) => {
  const resetPasswordMutation = useResetPassword();
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!newPassword.trim()) {
      newErrors.newPassword = 'New password is required';
    } else if (newPassword.length < 6) {
      newErrors.newPassword = 'Password must be at least 6 characters long';
    }

    if (!confirmPassword.trim()) {
      newErrors.confirmPassword = 'Please confirm the new password';
    } else if (newPassword !== confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      await resetPasswordMutation.mutateAsync({
        username,
        newPassword
      });
      
      setNewPassword('');
      setConfirmPassword('');
      setErrors({});
      
      onSuccess();
      onClose();
    } catch (error: any) {
      setErrors({ 
        general: error.response?.data?.message || 'Failed to reset password. Please try again.' 
      });
    }
  };

  const handleInputChange = (field: string, value: string) => {
    if (field === 'newPassword') {
      setNewPassword(value);
    } else {
      setConfirmPassword(value);
    }
    
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">Reset Password</h2>
            <p className="text-sm text-gray-600 mt-1">
              Reset password for <span className="font-medium">{fullname}</span> ({username})
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={resetPasswordMutation.isPending}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}

          <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-md text-sm">
            <div className="flex">
              <svg className="w-5 h-5 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <div>
                <p className="font-medium">Important:</p>
                <p>This will reset the user's password and invalidate all their existing sessions. The user will need to log in again with the new password.</p>
              </div>
            </div>
          </div>

          {/* New Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={newPassword}
              onChange={(e) => handleInputChange('newPassword', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.newPassword ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Enter new password (min. 6 characters)"
              disabled={resetPasswordMutation.isPending}
            />
            {errors.newPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.newPassword}</p>
            )}
          </div>

          {/* Confirm Password Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Confirm New Password <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.confirmPassword ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
              }`}
              placeholder="Confirm new password"
              disabled={resetPasswordMutation.isPending}
            />
            {errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>
            )}
          </div>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              disabled={resetPasswordMutation.isPending}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={resetPasswordMutation.isPending}
              className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors disabled:opacity-50 flex items-center"
            >
              {resetPasswordMutation.isPending ? (
                <>
                  <LoadingSpinner size="small" />
                  <span className="ml-2">Resetting...</span>
                </>
              ) : (
                'Reset Password'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\user\UserStatusToggle.tsx

import React, { useState } from 'react';
import { useToggleUserStatus } from '../../hooks/useUsers';

interface UserStatusToggleProps {
  username: string;
  isActive: boolean;
  onSuccess?: () => void;
  size?: 'small' | 'medium';
}

export const UserStatusToggle: React.FC<UserStatusToggleProps> = ({ 
  username, 
  isActive, 
  onSuccess,
  size = 'medium'
}) => {
  const toggleStatusMutation = useToggleUserStatus();
  const [isToggling, setIsToggling] = useState(false);

  const handleToggle = async () => {
    setIsToggling(true);
    try {
      await toggleStatusMutation.mutateAsync(username);
      onSuccess?.();
    } catch (error) {
      console.error('Failed to toggle user status:', error);
    } finally {
      setIsToggling(false);
    }
  };

  const sizeClasses = {
    small: 'h-5 w-9',
    medium: 'h-6 w-11'
  };

  const switchClasses = {
    small: 'h-4 w-4',
    medium: 'h-5 w-5'
  };

  return (
    <div className="flex items-center space-x-2">
      <button
        onClick={handleToggle}
        disabled={isToggling || toggleStatusMutation.isPending}
        className={`${sizeClasses[size]} bg-gray-200 relative inline-flex flex-shrink-0 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed ${
          isActive ? 'bg-green-500' : 'bg-gray-200'
        }`}
      >
        <span className="sr-only">Toggle user status</span>
        <span
          className={`${switchClasses[size]} bg-white shadow-lg rounded-full transition-transform ease-in-out duration-200 transform ${
            isActive ? 'translate-x-5' : 'translate-x-0'
          }`}
        />
      </button>
      
      <span className={`text-sm font-medium ${
        isActive ? 'text-green-700' : 'text-red-700'
      }`}>
        {isToggling ? (
          <span className="text-gray-500">Updating...</span>
        ) : (
          isActive ? 'Active' : 'Inactive'
        )}
      </span>
    </div>
  );
};


C:\Users\User\Desktop\jink-demo\src\components\Navbar.tsx

// 1. Import dependencies at the top
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext'; // Adjust path if needed
import { useState } from 'react';
import { LogoutAllConfirmModal } from './auth/LogoutAllConfirmModal'; // Adjust path if needed


export default function Navbar() {
  const { user, logout, loading, logoutAll } = useAuth();
  const [showUserMenu, setShowUserMenu] = useState(false);
  // Add these states inside the Navbar component
  const [showLogoutAllConfirm, setShowLogoutAllConfirm] = useState(false);
  const [showAdminMenu, setShowAdminMenu] = useState<boolean>(false); 


  if (loading)return null;
  if (!user) return null; // Or show a minimal login link

  return (
    <nav className="bg-white border-b border-gray-200 h-16 flex items-center px-6 justify-between">
      <Link to={`/${user.role}`} className="text-xl font-bold text-blue-700">Your App</Link>
      {/* Right side: User profile menu */}
      <div className="relative ml-auto">
        <button
          onClick={() => setShowUserMenu(v => !v)}
          className="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <span className="sr-only">Open user menu</span>
          <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center">
            <span className="text-white font-medium text-sm">
              {user.fullname?.charAt(0).toUpperCase()}
            </span>
          </div>
        </button>

{user.role === 'admin' && (
  <div className="ml-auto">
    <div className="relative">
      <button
        onClick={() => setShowAdminMenu(v => !v)}
        className="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >Admin
      </button>
      
      {showAdminMenu && (
        <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
          <div className="py-1">
            <Link 
              to="/admin/users" 
              className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              onClick={() => setShowAdminMenu(false)}
            >
              User Management
            </Link>
            <Link 
              to="/admin/articles" 
              className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              onClick={() => setShowAdminMenu(false)}
            >
              Article Management
            </Link>
            <Link 
              to="/admin/groups" 
              className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              onClick={() => setShowAdminMenu(false)}
            >
              Group Management
            </Link>
            <Link 
              to="/admin/bulk-operations" 
              className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              onClick={() => setShowAdminMenu(false)}
            >
              Bulk Operations
            </Link>
          </div>
        </div>
      )}
    </div>
  </div>
)}



        {/* // Update the user menu dropdown section to include logout all option: */}
        {showUserMenu && (
          <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
            <div className="py-1">
              <Link
                to="/profile"
                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                onClick={() => setShowUserMenu(false)}
              >
                Your Profile
              </Link>
              <button
                onClick={() => {
                  alert('Password change modal not yet wired up!');
                  setShowUserMenu(false);
                }}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                Change Password
              </button>
              <hr className="my-1" />
              <button
                onClick={() => {
                  setShowLogoutAllConfirm(true);
                  setShowUserMenu(false);
                }}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                <div className="flex items-center">
                  <svg className="w-4 h-4 mr-2 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-4a2 2 0 00-2-2H6a2 2 0 00-2 2v4a2 2 0 002 2zM11 5V3a2 2 0 112 0v2M7 7h10" />
                  </svg>
                  Logout All Devices
                </div>
              </button>
              <button
                onClick={logout}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                Sign out
              </button>
            </div>
          </div>
        )}

        {showLogoutAllConfirm && (
          <LogoutAllConfirmModal
            isOpen={showLogoutAllConfirm}
            onClose={() => setShowLogoutAllConfirm(false)}
            onConfirm={async () => {
              await logoutAll();
              setShowLogoutAllConfirm(false);
            }}
          />
        )}


      </div>


    </nav>
  );
}


C:\Users\User\Desktop\jink-demo\src\context\AuthContext.tsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import { setAuthToken, clearAuthToken, getAuthToken, isTokenValid } from '../utils/auth';
import { apiLogin, apiLogoutAll, apiLogout } from '../api/apiAuth';
import { apiGetUserByUsername } from '../api/apiUsers';

interface User {
  username: string;
  fullname: string;
  role: 'admin' | 'teacher' | 'student' | 'user';
  isActive?: boolean;
  // ...other properties
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  logoutAll: () => Promise<void>; // Add this line
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // On cold app load, check for a JWT and fetch user profile if present.
  useEffect(() => {
    const initAuth = async () => {
      setLoading(true);
      const token = getAuthToken();
      if (token && isTokenValid()) {
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          // Use the username from the JWT to fetch the fresh profile
          const freshUser = await apiGetUserByUsername(payload.username);
          setUser(freshUser);
        } catch (error) {
          console.error('Failed to fetch user profile from token:', error);
          clearAuthToken();
          setUser(null);
        }
      }
      setLoading(false);
    };
    initAuth();
  }, []);

  // Login: authenticate, store token, and fetch updated user profile
  const login = async (username: string, password: string) => {
    const response = await apiLogin({ username, password });
    setAuthToken(response.token);
    // Always fetch the full, up-to-date user profile from the API
    const fullUser = await apiGetUserByUsername(response.user.username);
    setUser(fullUser);
  };

  const logout = async() => {
    try{
      // const logoutMe = 
      await apiLogout();

    }catch (error) 
    {
      console.error('Logout failed:', error);   

    // Redirect will be handled by axios interceptor or route guards
    }finally {
      clearAuthToken();
      setUser(null);
    }
  };

  // Add the logoutAll function in the AuthProvider component
  const logoutAll = async () => {
    try {
      // Call the logout-all API endpoint
      // const logoutAllUser = 
      await apiLogoutAll();
      // await fetch('/api/auth/logout-all', {
      //   method: 'POST',
      //   headers: {
      //     'Authorization': `Bearer ${getAuthToken()}`
      //   }
      // });
    } catch (error) {
      // Even if the API call fails, we should clear local state
      console.error('Failed to logout all sessions:', error);
    } finally {
      // Clear local state and redirect
      clearAuthToken();
      setUser(null);
      window.location.href = '/login';
    }
  };
  return (
    <AuthContext.Provider value={{ user, loading, login, logout, logoutAll }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


C:\Users\User\Desktop\jink-demo\src\hooks\useAdminArticles.ts

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { api } from '../api/axios';

// Admin-specific article interfaces
// types or hook file where IAdminArticleView is declared
export interface IAdminArticleView {
  articleName: string;
  title: string;
  teacherUsername: string;
  status: 'editing' | 'processing' | 'ready' | 'error';
  sentenceCount: number;
  wordCount: number;
  hasAudio: boolean;
  createdAt: string;
  updatedAt: string;
  processingError?: string;

  // Optional: API may include only username now; fullname can be added later
  teacherInfo?: {
    username: string;
    fullname?: string;
  };
}

export interface IAdminSystemStats {
  totalArticles: number;
  byStatus: Record<string, number>;
  byTeacher: Array<{
    teacherUsername: string;
    teacherFullname: string;
    articleCount: number;
    audioSuccessRate: number;
  }>;
  audioStats: {
    withAudio: number;
    totalStorageGB: number;
    avgGenerationTime: number;
  };
  recentActivity: IAdminArticleView[];
}

// Get all articles for admin dashboard


export const useAdminArticles = () => {
  return useQuery({
    queryKey: ['admin', 'articles'],
    queryFn: async () => {
      const { data } = await api.get<{ success: boolean; articles: any[] }>('/articles/admin/all');
      return (data.articles || []).map((a: any): IAdminArticleView => {
        const sentenceCount =
          a.stats?.sentenceCount ??
          (Array.isArray(a.sentences) ? a.sentences.length : 0);
        const wordCount =
          a.stats?.wordCount ??
          (Array.isArray(a.sentences)
            ? a.sentences.reduce((sum: number, s: any) => sum + (s?.wordCount || 0), 0)
            : 0);
        const hasAudio = a.stats?.hasAudio ?? !!a.fullAudioUrl;

        const teacherInfo = a.teacherInfo
          ? {
              username: a.teacherInfo.username ?? a.teacherUsername,
              fullname: a.teacherInfo.fullname, // may be undefined
            }
          : { username: a.teacherUsername };

        return {
          articleName: a.articleName,
          title: a.title,
          teacherUsername: a.teacherUsername,
          status: a.status,
          sentenceCount,
          wordCount,
          hasAudio,
          createdAt: a.createdAt,
          updatedAt: a.updatedAt,
          processingError: a.processingError,
          teacherInfo,
        };
      });
    },
    staleTime: 30000,
  });
};



// Get admin system statistics
export const useAdminSystemStats = () => {
  return useQuery({
    queryKey: ['admin', 'stats'],
    queryFn: async () => {
      const response = await api.get<{
        success: boolean;
        stats: IAdminSystemStats;
      }>('/articles/admin/stats');
      return response.data.stats;
    },
    staleTime: 60000, // 1 minute
  });
};

// Force regenerate audio (admin only)
export const useForceRegenerateAudio = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async ({ 
      articleName, 
      quality = 'high' 
    }: { 
      articleName: string; 
      quality?: 'high' | 'medium' | 'low' 
    }) => {
      const response = await api.post(`/articles/${articleName}/admin/force-regenerate`, {
        quality
      });
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin', 'articles'] });
      queryClient.invalidateQueries({ queryKey: ['admin', 'stats'] });
    },
  });
};

// Admin update article status
export const useAdminUpdateArticleStatus = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async ({ 
      articleName, 
      status 
    }: { 
      articleName: string; 
      status: 'editing' | 'ready' 
    }) => {
      const response = await api.put(`/articles/${articleName}/status`, { status });
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin', 'articles'] });
      queryClient.invalidateQueries({ queryKey: ['admin', 'stats'] });
    },
  });
};

// Admin delete article
export const useAdminDeleteArticle = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async (articleName: string) => {
      const encoded = encodeURIComponent(articleName);
      const response = await api.delete(`/articles/${encoded}`);
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin', 'articles'] });
      queryClient.invalidateQueries({ queryKey: ['admin', 'stats'] });
    },
  });
};


C:\Users\User\Desktop\jink-demo\src\hooks\useArticles.ts

// src/hooks/useArticles.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import api from '../api/axios';
import type {
  // IArticle,
  ISentence,
  CreateArticleRequest,
  ArticleResponse,
  ArticlesResponse,
  SuggestNameRequest,
  SuggestNameResponse,
  CheckNameResponse,
  UpdateArticleRequest,
  UpdateSentencesRequest,
  SentenceResponse,
  TeacherStatsResponse,
  IArticle
} from '../types/article.types';
// import { apiGetAudioStatus } from '../api/apiArticles'
// import { validateAudioStatusResponse } from '../utils/apiValidation'
// import type { AudioStatusResponse } from '../types/audio.types';

// API functions
const articleAPI = {
  // Suggest article name from title
  suggestName: async (data: SuggestNameRequest): Promise<SuggestNameResponse> => {
    const response = await api.post('/articles/suggest-name', data);
    return response.data;
  },

  // Check if article name is available
  checkNameAvailability: async (articleName: string): Promise<CheckNameResponse> => {
    const response = await api.get(`/articles/check-name/${articleName}`);
    return response.data;
  },

  // Create new article
  // create: async (data: CreateArticleRequest): Promise<ArticleResponse> => {
  //   const response = await api.post('/articles', data);
  //   return response.data;
  // },

  create: async (data: CreateArticleRequest): Promise<{ success: boolean; article: IArticle; message: string }> => {
    console.log('Creating article with payload:', data);

    // Validate payload before sending
    if (!data.articleName || !data.title || !data.originalText) {
      throw new Error('Missing required fields: articleName, title, or originalText');
    }

    if (!data.sentences || data.sentences.length === 0) {
      throw new Error('At least one sentence is required');
    }

    // Ensure all sentences have required fields
    data.sentences.forEach((sentence, index) => {
      if (!sentence.text || sentence.text.trim().length === 0) {
        throw new Error(`Sentence ${index + 1} is empty`);
      }
      if (typeof sentence.order !== 'number') {
        sentence.order = index + 1;
      }
      if (typeof sentence.wordCount !== 'number') {
        sentence.wordCount = sentence.text.split(/\s+/).filter(w => w.trim().length > 0).length;
      }
      if (typeof sentence.isLong !== 'boolean') {
        sentence.isLong = sentence.wordCount > 15;
      }
    });

    try {
      const response = await api.post<{ success: boolean; article: IArticle; message: string }>('/articles', data);
      return response.data;
    } catch (error: any) {
      console.error('API Error Details:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        config: error.config
      });

      // Enhanced error message handling
      if (error.response?.data?.error) {
        throw new Error(error.response.data.error);
      }

      // Handle specific HTTP status codes with user-friendly messages
      if (error.response?.status === 409) {
        throw new Error(`Article name "${data.articleName}" already exists. Please choose a different name.`);
      }

      if (error.response?.status === 400) {
        throw new Error('Invalid article data. Please check your input and try again.');
      }

      if (error.response?.status === 401) {
        throw new Error('You are not authorized to create articles. Please log in again.');
      }

      if (error.response?.status === 403) {
        throw new Error('You do not have permission to create articles. Contact your administrator.');
      }

      if (error.response?.status === 500) {
        throw new Error('Server error occurred. Please try again in a moment.');
      }

      // Network or other errors
      if (!error.response) {
        throw new Error('Network error. Please check your internet connection and try again.');
      }

      throw error;
    }
  },


  // Get all articles for teacher
  getAll: async (): Promise<ArticlesResponse> => {
    const response = await api.get('/articles');
    return response.data;
  },

  // Get single article by articleName
  getByName: async (articleName: string): Promise<ArticleResponse> => {
    const response = await api.get(`/articles/${articleName}`);
    return response.data;
  },

  // Update article metadata
  updateMetadata: async (articleName: string, data: UpdateArticleRequest): Promise<ArticleResponse> => {
    const response = await api.put(`/articles/${articleName}`, data);
    return response.data;
  },

  // Update article sentences
  updateSentences: async (articleName: string, data: UpdateSentencesRequest): Promise<ArticleResponse> => {
    const response = await api.put(`/articles/${articleName}/sentences`, data);
    return response.data;
  },

  // Delete article
  delete: async (articleName: string): Promise<{ success: boolean; message: string }> => {
    const response = await api.delete(`/articles/${articleName}`);
    return response.data;
  },

  // Get teacher stats
  getStats: async (): Promise<TeacherStatsResponse> => {
    const response = await api.get('/articles/stats');
    return response.data;
  }
};

const sentenceAPI = {
  // Get single sentence by sentenceId
  getById: async (sentenceId: string): Promise<SentenceResponse> => {
    const response = await api.get(`/articles/sentences/${sentenceId}`);
    return response.data;
  },

  // Update single sentence
  update: async (sentenceId: string, data: Partial<Pick<ISentence, 'text' | 'status' | 'individualAudioUrl'>>): Promise<SentenceResponse> => {
    const response = await api.put(`/articles/sentences/${sentenceId}`, data);
    return response.data;
  }
};

// React Query Hooks

/**
 * Suggest article name from title
 */
export const useSuggestArticleName = () => {
  return useMutation({
    mutationFn: articleAPI.suggestName,
    onError: (error: any) => {
      console.error('Suggest name error:', error);
    }
  });
};

/**
 * Check article name availability
 */
export const useCheckArticleNameAvailability = (articleName: string) => {
  return useQuery({
    queryKey: ['articleNameAvailability', articleName],
    queryFn: () => articleAPI.checkNameAvailability(articleName),
    enabled: !!articleName && articleName.length >= 3,
    staleTime: 30000 // Cache for 30 seconds
  });
};

/**
 * Get all articles for teacher
 */
export const useArticles = () => {
  return useQuery({
    queryKey: ['articles'],
    queryFn: async () => {
      const result = await articleAPI.getAll();
      return result.articles;
    }
  });
};

/**
 * Get single article by articleName
 */
export const useArticle = (articleName: string) => {
  return useQuery({
    queryKey: ['article', articleName],
    queryFn: async () => {
      const result = await articleAPI.getByName(articleName);
      return result.article;
    },
    enabled: !!articleName
  });
};

/**
 * Create new article
 */
export const useCreateArticle = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: articleAPI.create,
    onSuccess: (data) => {
      // Invalidate articles list to show new article
      queryClient.invalidateQueries({ queryKey: ['articles'] });
      queryClient.invalidateQueries({ queryKey: ['articleStats'] });

      // Set the new article in cache
      queryClient.setQueryData(['article', data.article.articleName], data.article);
    },
    onError: (error: any) => {
      console.error('Create article error:', error);
    }
  });
};

/**
 * Update article metadata
 */
export const useUpdateArticleMetadata = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({
      articleName,
      updateData
    }: {
      articleName: string;
      updateData: UpdateArticleRequest
    }) => {
      const response = await api.put<ArticleResponse>(`/articles/${articleName}`, updateData);
      return response.data;
    },
    onSuccess: (data, variables) => {
      // Update specific article and articles list
      queryClient.setQueryData(['article', variables.articleName], data.article);
      queryClient.invalidateQueries({ queryKey: ['articles'] });
      console.log('Article metadata updated successfully');
    },
    onError: (error: any) => {
      console.error('Update article metadata error:', error);
    }
  });
};

/**
 * Update article sentences
 */
export const useUpdateArticleSentences = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({
      articleName,
      sentences
    }: {
      articleName: string;
      sentences: UpdateSentencesRequest
    }) => {
      const response = await api.put<ArticleResponse>(`/articles/${articleName}/sentences`, sentences);
      return response.data;
    },
    onSuccess: (data, variables) => {
      // Update specific article and articles list
      queryClient.setQueryData(['article', variables.articleName], data.article);
      queryClient.invalidateQueries({ queryKey: ['articles'] });
      console.log('Article sentences updated successfully');
    },
    onError: (error: any) => {
      console.error('Update article sentences error:', error);
    }
  });
};

/**
 * Delete article
 */
export const useDeleteArticle = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: articleAPI.delete,
    onSuccess: (_, articleName) => {
      // Remove from articles list and individual cache
      queryClient.invalidateQueries({ queryKey: ['articles'] });
      queryClient.invalidateQueries({ queryKey: ['articleStats'] });
      queryClient.removeQueries({ queryKey: ['article', articleName] });
    }
  });
};

/**
 * Get teacher statistics
 */
export const useArticleStats = () => {
  return useQuery({
    queryKey: ['articleStats'],
    queryFn: async () => {
      const result = await articleAPI.getStats();
      return result.stats;
    }
  });
};

/**
 * Get single sentence by sentenceId
 */
export const useSentence = (sentenceId: string) => {
  return useQuery({
    queryKey: ['sentence', sentenceId],
    queryFn: async () => {
      const result = await sentenceAPI.getById(sentenceId);
      return result.sentence;
    },
    enabled: !!sentenceId
  });
};

/**
 * Update single sentence
 */
export const useUpdateSentence = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ sentenceId, data }: {
      sentenceId: string;
      data: Partial<Pick<ISentence, 'text' | 'status' | 'individualAudioUrl'>>
    }) => sentenceAPI.update(sentenceId, data),
    onSuccess: (response, variables) => {
      // Update sentence in cache
      queryClient.setQueryData(['sentence', variables.sentenceId], response.sentence);

      // Parse articleName from sentenceId to invalidate article
      const lastUnderscoreIndex = variables.sentenceId.lastIndexOf('_');
      if (lastUnderscoreIndex !== -1) {
        const articleName = variables.sentenceId.substring(0, lastUnderscoreIndex);
        queryClient.invalidateQueries({ queryKey: ['article', articleName] });
      }
    }
  });
};

const toAbsoluteUrlFromAxios = (url?: string) => {
  if (!url) return url;
  try {
    // If url is already absolute, this succeeds
    return new URL(url).toString();
  } catch {
    // Otherwise, resolve against baseURL
    const base = api.defaults.baseURL ?? '';
    return new URL(url, base).toString();
  }
};


// Add to existing useArticles hook
export const useArticleWithAudio = (articleName: string) => {
  return useQuery({
    queryKey: ['article', articleName, 'audio'],
    queryFn: async () => {
      const result = await articleAPI.getByName(articleName);

      result.article.fullAudioUrl = toAbsoluteUrlFromAxios(result.article.fullAudioUrl);

      // // Ensure audio URL is properly formatted
      // if (result.article.fullAudioUrl) {
      //   result.article.fullAudioUrl = result.article.fullAudioUrl.startsWith('http')
      //     ? result.article.fullAudioUrl
      //     : `${api.defaults.baseURL}/${result.article.fullAudioUrl}`;
      // }


      return result.article;
    },
    enabled: !!articleName,
  });
};


export const useUpdateArticleStatus = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async ({ articleName, status }: { 
      articleName: string; 
      status: 'editing' | 'ready' 
    }) => {
      const response = await api.put(`/articles/${articleName}/status`, { status });
      return response.data;
    },
    onSuccess: (data, variables) => {
      // Update the specific article in cache
      queryClient.setQueryData(['article', variables.articleName], data.article);
      queryClient.invalidateQueries({ queryKey: ['articles'] });
      queryClient.invalidateQueries({ queryKey: ['studentArticles'] });
    },
  });
};


C:\Users\User\Desktop\jink-demo\src\hooks\useAudioStatus.ts

// src/hooks/useAudioStatus.ts
import { useQuery, type UseQueryResult, type Query } from '@tanstack/react-query';
import { apiGetAudioStatus } from '../api/apiArticles';
import type { AudioStatusResponse } from '../types/audio.types';

export const useAudioStatus = (
  articleName: string,
  enabled: boolean = true
): UseQueryResult<AudioStatusResponse, Error> => {
  return useQuery<AudioStatusResponse, Error, AudioStatusResponse, readonly unknown[]>({
    queryKey: ['audioStatus', articleName],
    queryFn: () => apiGetAudioStatus(articleName),
    // tighten: require non-empty, non-whitespace articleName
    enabled: enabled && !!articleName && articleName.trim().length > 0,
    staleTime: 0,
    // v5 signature: refetchInterval receives the Query object
    refetchInterval: (q: Query<AudioStatusResponse, Error, AudioStatusResponse, readonly unknown[]>) => {
      // stop polling entirely if the last fetch resulted in an error
      const hadError = !!q.state.error;
      if (hadError) return false;

      const d = q.state.data;
      const processing = d?.article?.status === 'processing';
      const ready = Boolean(d?.audio?.hasAudio && Array.isArray(d?.fragments) && d.fragments.length > 0);
      // poll every 5s only while processing and not yet fully ready
      return processing && !ready ? 5000 : false;
    },
    retry: (failureCount, err: any) => {
      const code = err?.response?.status;
      if (code === 403 || code === 404) {
        console.log('useAudioStatus: Not retrying on error code', code, err?.message);
        return false;
      }
      // at most 1 retry on network errors without a response code (often CORS/preflight)
      if (!code && (err?.message?.includes('Network Error') || err?.name === 'AxiosError')) {
        return failureCount < 1;
      }
      // otherwise cap at 2 retries
      return failureCount < 2;
    },
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });
};


C:\Users\User\Desktop\jink-demo\src\hooks\useBulk.ts

// src/hooks/useBulk.ts
import { useMutation } from '@tanstack/react-query';
import { 
  apiImportUsersCSV, 
  apiExportUsersCSV, 
  apiDownloadCSVTemplate,
} from '../api/apiBulk';
import type { 
  IExportFilters 
} from '../api/apiBulk';

// Import users from CSV
export const useImportUsersCSV = () => {
  return useMutation({
    mutationFn: (csvFile: File) => apiImportUsersCSV(csvFile),
  });
};

// Export users to CSV
export const useExportUsersCSV = () => {
  return useMutation({
    mutationFn: (filters?: IExportFilters) => apiExportUsersCSV(filters),
  });
};

// Download CSV template
export const useDownloadCSVTemplate = () => {
  return useMutation({
    mutationFn: () => apiDownloadCSVTemplate(),
  });
};


C:\Users\User\Desktop\jink-demo\src\hooks\useDictationProgress.ts

// src/hooks/useDictationProgress.ts

import { useState, useEffect, useCallback } from 'react';
import type { DictationSession } from '../components/dictation/FragmentDictation';

interface StoredSession {
  session: DictationSession;
  lastUpdated: string;
  isCompleted: boolean;
}

const STORAGE_KEY_PREFIX = 'dictation-session-';
const MAX_STORED_SESSIONS = 10;

export function useDictationProgress(articleName: string) {
  const storageKey = `${STORAGE_KEY_PREFIX}${articleName}`;
  
  const [savedSession, setSavedSession] = useState<DictationSession | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Load saved session on mount
  useEffect(() => {
    try {
      const stored = localStorage.getItem(storageKey);
      if (stored) {
        const parsedSession: StoredSession = JSON.parse(stored);
        // Convert date strings back to Date objects
        const session = {
          ...parsedSession.session,
          startTime: new Date(parsedSession.session.startTime),
          progress: parsedSession.session.progress.map(p => ({
            ...p,
            attempts: p.attempts.map(a => ({
              ...a,
              timestamp: new Date(a.timestamp)
            }))
          }))
        };
        setSavedSession(session);
      }
    } catch (error) {
      console.error('Failed to load saved dictation session:', error);
      localStorage.removeItem(storageKey);
    }
    setIsLoading(false);
  }, [storageKey]);

  // Save session to localStorage
  const saveSession = useCallback((session: DictationSession) => {
    try {
      const storedSession: StoredSession = {
        session: {
          ...session,
          // Ensure endTime is preserved if provided
          endTime: session.endTime || session.startTime, // Fallback to startTime if no endTime
        },
        lastUpdated: new Date().toISOString(),
        isCompleted: session.completedFragments >= session.fragments.length,
      };
      localStorage.setItem(storageKey, JSON.stringify(storedSession));
      setSavedSession(session);
    } catch (error) {
      console.error('Failed to save dictation session:', error);
    }
  }, [storageKey]);

  // Clear saved session
  const clearSession = useCallback(() => {
    localStorage.removeItem(storageKey);
    setSavedSession(null);
  }, [storageKey]);

  // Get all stored sessions (for dashboard)
  const getAllSessions = useCallback((): StoredSession[] => {
    const sessions: StoredSession[] = [];
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key?.startsWith(STORAGE_KEY_PREFIX)) {
        try {
          const stored = localStorage.getItem(key);
          if (stored) {
            sessions.push(JSON.parse(stored));
          }
        } catch (error) {
          console.error('Failed to parse stored session:', error);
          localStorage.removeItem(key);
        }
      }
    }

    return sessions.sort((a, b) => 
      new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime()
    );
  }, []);

  // Clean old sessions (keep only recent ones)
  const cleanOldSessions = useCallback(() => {
    const allSessions = getAllSessions();
    if (allSessions.length > MAX_STORED_SESSIONS) {
      const toRemove = allSessions.slice(MAX_STORED_SESSIONS);
      toRemove.forEach(session => {
        const key = `${STORAGE_KEY_PREFIX}${session.session.articleName}`;
        localStorage.removeItem(key);
      });
    }
  }, [getAllSessions]);

  return {
    savedSession,
    isLoading,
    saveSession,
    clearSession,
    getAllSessions,
    cleanOldSessions
  };
}

C:\Users\User\Desktop\jink-demo\src\hooks\useFragmentAudioPlayer.ts

// src/hooks/useFragmentAudioPlayer.ts

import { useRef, useState, useCallback, useEffect } from 'react';
import { handleAudioError } from '../utils/errorUtils'; // adjust path


export interface FragmentTiming {
  fragmentIndex: number;
  order: number;
  text: string;
  startTime: number;
  endTime: number;
  duration: number;
  wordCount: number;
}

export interface AudioPlayerState {
  isPlaying: boolean;
  isLoading: boolean;
  currentTime: number;
  duration: number;
  playbackRate: number;
  canPlay: boolean;
  error: string | null;
}

export interface AudioPlayerControls {
  play: () => void;
  pause: () => void;
  stop: () => void;
  seekToFragment: (fragmentIndex: number) => void;
  replayCurrentFragment: () => void;
  setPlaybackRate: (rate: number) => void;
  togglePlayback: () => void;
}

const PREROLL_SECONDS = 0.05; // Slight preroll for better onset perception
const MIN_PLAYBACK_RATE = 0.5;
const MAX_PLAYBACK_RATE = 2.0;

export function useFragmentAudioPlayer(
  audioUrl: string,
  fragments: FragmentTiming[] = [],
  autoStopAtFragmentEnd: boolean = true
) {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const currentFragmentRef = useRef<number>(-1);
  const stopTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const animationFrameRef = useRef<number | null>(null);

  const [state, setState] = useState<AudioPlayerState>({
    isPlaying: false,
    isLoading: false,
    currentTime: 0,
    duration: 0,
    playbackRate: 1.0,
    canPlay: false,
    error: null,
  });

  // Initialize audio element
  useEffect(() => {
    if (!audioUrl) return;

    const audio = new Audio();
    audio.preload = 'auto';
    audio.crossOrigin = 'anonymous'; // For CORS if needed
    
    // Event listeners
    const updateState = (updates: Partial<AudioPlayerState>) => {
      setState(prev => ({ ...prev, ...updates }));
    };

    const handleLoadStart = () => updateState({ isLoading: true, error: null });
    const handleCanPlay = () => updateState({ canPlay: true, isLoading: false });
    const handleLoadedMetadata = () => updateState({ duration: audio.duration });

    // const handleError = (e: ErrorEvent) => {
    //   console.error('Audio error:', e);
    //   updateState({ 
    //     error: 'Failed to load audio', 
    //     isLoading: false, 
    //     isPlaying: false 
    //   });
    // };
    
    const handleError = (e: any) => {
      const friendly = handleAudioError(e?.error ?? new Error('Audio error'));
      updateState({
      error: friendly,
      isLoading: false,
      isPlaying: false,
      });
    };


    const handlePlay = () => updateState({ isPlaying: true });
    const handlePause = () => updateState({ isPlaying: false });
    const handleEnded = () => {
      updateState({ isPlaying: false });
      currentFragmentRef.current = -1;
    };

    const handleTimeUpdate = () => {
      updateState({ currentTime: audio.currentTime });
    };

    // Attach event listeners
    audio.addEventListener('loadstart', handleLoadStart);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('loadedmetadata', handleLoadedMetadata);
    audio.addEventListener('error', handleError as EventListener);
    audio.addEventListener('play', handlePlay);
    audio.addEventListener('pause', handlePause);
    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('timeupdate', handleTimeUpdate);

    audio.src = audioUrl;
    audioRef.current = audio;

    return () => {
      // Cleanup
      if (stopTimeoutRef.current) {
        clearTimeout(stopTimeoutRef.current);
      }
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
      
      audio.removeEventListener('loadstart', handleLoadStart);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
      audio.removeEventListener('error', handleError as EventListener);
      audio.removeEventListener('play', handlePlay);
      audio.removeEventListener('pause', handlePause);
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('timeupdate', handleTimeUpdate);
      
      audio.pause();
      audio.src = '';
      audioRef.current = null;
    };
  }, [audioUrl]);

  // Auto-stop monitoring for fragment playback
  const monitorFragmentEnd = useCallback(() => {
    if (!audioRef.current || currentFragmentRef.current === -1 || !autoStopAtFragmentEnd) {
      return;
    }

    const fragment = fragments[currentFragmentRef.current];
    if (!fragment) return;

    const checkTime = () => {
      if (!audioRef.current || !state.isPlaying) return;

      if (audioRef.current.currentTime >= fragment.endTime) {
        audioRef.current.pause();
        currentFragmentRef.current = -1;
      } else {
        animationFrameRef.current = requestAnimationFrame(checkTime);
      }
    };

    animationFrameRef.current = requestAnimationFrame(checkTime);
  }, [fragments, autoStopAtFragmentEnd, state.isPlaying]);

  useEffect(() => {
    if (state.isPlaying && currentFragmentRef.current !== -1) {
      monitorFragmentEnd();
    } else if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
      animationFrameRef.current = null;
    }
  }, [state.isPlaying, monitorFragmentEnd]);

  const controls: AudioPlayerControls = {
    play: useCallback(() => {
      if (!audioRef.current || !state.canPlay) return;
      audioRef.current.play().catch(console.error);
    }, [state.canPlay]),

    pause: useCallback(() => {
      if (!audioRef.current) return;
      audioRef.current.pause();
    }, []),

    stop: useCallback(() => {
      if (!audioRef.current) return;
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      currentFragmentRef.current = -1;
    }, []),

    seekToFragment: useCallback((fragmentIndex: number) => {
      if (!audioRef.current || !state.canPlay || !fragments[fragmentIndex]) return;

      const fragment = fragments[fragmentIndex];
      const seekTime = Math.max(0, fragment.startTime - PREROLL_SECONDS);
      
      audioRef.current.currentTime = seekTime;
      currentFragmentRef.current = fragmentIndex;
    }, [fragments, state.canPlay]),

    replayCurrentFragment: useCallback(() => {
      if (currentFragmentRef.current !== -1) {
        controls.seekToFragment(currentFragmentRef.current);
        if (!state.isPlaying) {
          controls.play();
        }
      }
    }, [state.isPlaying]),

    setPlaybackRate: useCallback((rate: number) => {
      if (!audioRef.current) return;
      
      const clampedRate = Math.max(MIN_PLAYBACK_RATE, Math.min(MAX_PLAYBACK_RATE, rate));
      audioRef.current.playbackRate = clampedRate;
      setState(prev => ({ ...prev, playbackRate: clampedRate }));
    }, []),

    togglePlayback: useCallback(() => {
      if (state.isPlaying) {
        controls.pause();
      } else {
        controls.play();
      }
    }, [state.isPlaying])
  };

  return {
    state,
    controls,
    currentFragmentIndex: currentFragmentRef.current,
    audioRef
  };
}


C:\Users\User\Desktop\jink-demo\src\hooks\useGroups.ts

// src/hooks/useGroups.ts
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { 
  apiListGroups, 
  apiGetGroup, 
  apiCreateGroup, 
  apiUpdateGroup, 
  apiDeleteGroup,
  apiManageGroupMembers,

} from '../api/apiGroups';
import type { 

  IGroupCreate,
  IGroupUpdate 
} from '../api/apiGroups';
import { useAuth } from '../context/AuthContext';

// List groups with caching
export const useGroups = () => {
  const { user } = useAuth();
  
  return useQuery({
    queryKey: ['groups'],
    queryFn: apiListGroups,
    enabled: !!user && ['admin', 'teacher'].includes(user.role),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes
  });
};

// Get single group
export const useGroup = (groupId?: string) => {
  return useQuery({
    queryKey: ['group', groupId],
    queryFn: () => apiGetGroup(groupId!),
    enabled: !!groupId,
  });
};

// Create group mutation
export const useCreateGroup = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (groupData: IGroupCreate) => apiCreateGroup(groupData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
    },
  });
};

// Update group mutation
export const useUpdateGroup = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ groupId, groupData }: { groupId: string; groupData: IGroupUpdate }) =>
      apiUpdateGroup(groupId, groupData),
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
      queryClient.invalidateQueries({ queryKey: ['group', variables.groupId] });
    },
  });
};

// Delete group mutation
export const useDeleteGroup = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (groupId: string) => apiDeleteGroup(groupId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
    },
  });
};

// Manage group members mutation
export const useManageGroupMembers = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ 
      groupId, 
      memberData 
    }: { 
      groupId: string; 
      memberData: { add?: string[], remove?: string[] } 
    }) => apiManageGroupMembers(groupId, memberData),
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({ queryKey: ['groups'] });
      queryClient.invalidateQueries({ queryKey: ['group', variables.groupId] });
    },
  });
};


C:\Users\User\Desktop\jink-demo\src\hooks\useMyProgressMap.ts

// src/hooks/useMyProgressMap.ts
import { useQuery } from '@tanstack/react-query';
import { apiGetStudentArticleProgress } from '../api/apiSessions';
import type { ArticleProgress } from '../types/progress.types';

export const useMyProgressMap = (articleNames: string[]) => {
  const key = ['student-progress-map', [...articleNames].sort().join('|')];

  return useQuery<Record<string, ArticleProgress>, Error>({
    queryKey: key,
    enabled: articleNames.length > 0,
    staleTime: 30_000,
    queryFn: async () => {
      const pairs = await Promise.all(
        articleNames.map(async (name) => {
          try {
            const p = await apiGetStudentArticleProgress(name);
            if (!p) return [name, undefined] as const;

            const lastAttempt = p.lastPracticed ? new Date(p.lastPracticed) : new Date(0);

            return [
              name,
              {
                isCompleted: (p.completionRate ?? 0) >= 100,
                bestScore: p.bestScore ?? 0,
                completionRate: p.completionRate ?? 0,
                lastAttempt,              // always Date
                totalAttempts: p.totalAttempts ?? 0,
              } as ArticleProgress,
            ] as const;
          } catch {
            return [name, undefined] as const;
          }
        })
      );

      const map: Record<string, ArticleProgress> = {};
      for (const [name, val] of pairs) if (val) map[name] = val;
      return map;
    },
  });
};


C:\Users\User\Desktop\jink-demo\src\hooks\useSessionUpload.ts

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { api } from '../api/axios';
import type { DictationSession } from '../components/dictation/FragmentDictation';
import { useAuth } from '../context/AuthContext';

// Match server payload expectations (normalize UI status -> API status)
type UploadStatus = 'pending' | 'correct' | 'given-up';

const toUploadStatus = (s: 'pending' | 'correct' | 'givenup'): UploadStatus => 
  s === 'givenup' ? 'given-up' : s;

interface SessionUploadData {
  sessionId: string;
  studentUsername: string;
  articleName: string;
  startTime: Date;
  endTime?: Date;
  fragmentProgress: Array<{
    fragmentIndex: number;
    attempts: Array<{
      attempt: string;
      score: number;
      timestamp: Date;
      isCorrect: boolean;
    }>;
    status: UploadStatus; // normalized
    bestScore: number;
    timeSpent: number;
  }>;
  totalScore: number; // 0-1 average over fragments
  completionRate: number; // 0-100
  totalTimeSpent: number; // seconds
  isCompleted: boolean;
}

export const useSessionUpload = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async (session: DictationSession) => {
      // Compute derived fields that aren't present on DictationSession
      const totalFragments = session.fragments.length || 1;
      const avgScore = session.totalScore / totalFragments;
      const totalTimeSpent = session.progress.reduce((sum, p) => sum + p.timeSpent, 0);
      const completionRate = (session.completedFragments / totalFragments) * 100;

      // Build a stable sessionId
      const sessionId = `${user?.username ?? 'student'}-${session.articleName}-${session.startTime.getTime()}`;

      const payload: SessionUploadData = {
        sessionId,
        studentUsername: user?.username ?? 'unknown',
        articleName: session.articleName,
        startTime: session.startTime,
        endTime: new Date(), // derive at save-time
        fragmentProgress: session.progress.map(p => ({
          fragmentIndex: p.fragmentIndex,
          attempts: p.attempts.map(a => ({
            attempt: a.attempt,
            score: a.result.score,
            timestamp: a.timestamp,
            isCorrect: a.result.isPerfect,
          })),
          status: toUploadStatus(p.status), // normalize 'givenup' -> 'given-up'
          bestScore: p.bestScore,
          timeSpent: p.timeSpent,
        })),
        totalScore: avgScore,
        completionRate,
        totalTimeSpent,
        isCompleted: session.completedFragments === session.fragments.length,
      };

      const { data } = await api.post('/sessions/upload', payload);
      return data;
    },
    onSuccess: () => {
      // Invalidate student progress queries to trigger UI updates
      queryClient.invalidateQueries({ queryKey: ['student-progress'] });
      queryClient.invalidateQueries({ queryKey: ['teacher-analytics'] });
      
      console.log('Session uploaded successfully and caches invalidated');
    },
    onError: (error) => {
      console.error('Failed to upload session to server:', error);
    }
  });
};

// Enhanced hook that provides both localStorage backup and server sync
export const useServerDictationProgress = (articleName: string) => {
  const uploadMutation = useSessionUpload();
  
  const saveSession = async (session: DictationSession) => {
    // Save to localStorage as backup (unchanged)
    const storageKey = `dictation-session-${articleName}`;
    localStorage.setItem(storageKey, JSON.stringify({
      session,
      lastUpdated: new Date().toISOString(),
      isCompleted: session.completedFragments === session.fragments.length,
    }));

    // Upload to server (pass raw session, the upload hook will handle normalization)
    try {
      await uploadMutation.mutateAsync(session);
    } catch (error) {
      console.error('Failed to upload session to server, but local backup saved:', error);
      // Local backup already saved above
    }
  };

  return {
    saveSession,
    isUploading: uploadMutation.isPending,
    error: uploadMutation.error
  };
};



C:\Users\User\Desktop\jink-demo\src\hooks\useStudentArticles.ts

// src/hooks/useStudentArticles.ts
import { useQuery } from '@tanstack/react-query';
// import apiClient from '../api/axios';
// import type { IArticle } from '../types/article.types';
import api from '../api/axios';

// Student-specific API function
const apiGetReadyArticles = async () => {
  const response = await api.get('/articles/ready/list');
  return response.data;
};

export const useStudentArticles = () => {
  return useQuery({
    queryKey: ['studentArticles'],
    queryFn: async () => {
      const result = await apiGetReadyArticles();
      return result.articles || [];
    },
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: (failureCount, error: any) => {
      const status = error?.response?.status;
      if (status === 403) return false; // Don't retry forbidden
      return failureCount < 2;
    }
  });
};



C:\Users\User\Desktop\jink-demo\src\hooks\useStudentProgress.ts

import { useQuery } from '@tanstack/react-query';
import {
  apiGetStudentProgress,
  apiGetStudentArticleProgress,
} from '../api/apiSessions';
import type {
  StudentOverallProgress,
  StudentArticleProgress,
} from '../api/apiSessions';

// Small utility to coerce unknown values to a valid Date (or a safe epoch)
const toDateOrEpoch = (value: unknown): Date => {
  const d = new Date(value as any);
  return isNaN(d.getTime()) ? new Date(0) : d;
};

// Normalize server overall progress: ensure all timestamps are Date objects
const normalizeOverall = (
  p: StudentOverallProgress | null
): StudentOverallProgress | null => {
  if (!p) return null;
  const recentSessions = (p.recentSessions ?? []).map((s) => ({
    ...s,
    // Server sends ISO strings; coerce to Date for UI formatting
    timestamp: toDateOrEpoch(s.timestamp),
  }));
  return { ...p, recentSessions };
};

// Normalize server article progress: ensure lastPracticed is a Date
const normalizeArticle = (
  p: StudentArticleProgress | null
): StudentArticleProgress | null => {
  if (!p) return null;
  return {
    ...p,
    // Server sends ISO strings; coerce to Date for UI formatting
    lastPracticed: toDateOrEpoch((p as any).lastPracticed),
  };
};

// Overall student progress with server-first, localStorage fallback
export const useStudentProgress = () => {
  return useQuery<StudentOverallProgress | null, Error>({
    queryKey: ['student-progress'],
    queryFn: async () => {
      try {
        const resp = await apiGetStudentProgress();
        return normalizeOverall(resp);
      } catch (error: any) {
        console.warn(
          'Server progress failed, using localStorage fallback:',
          error?.message
        );
        return getLocalStorageProgress();
      }
    },
    staleTime: 30 * 1000, // 30 seconds
    gcTime: 5 * 60 * 1000, // 5 minutes
    retry: (failureCount, error: any) => {
      // Don't retry on 404 (no progress yet) or 403 (auth issues)
      if (error?.response?.status === 404 || error?.response?.status === 403) {
        return false;
      }
      return failureCount < 2;
    },
  });
};

// Article-specific progress (normalized)
export const useStudentArticleProgress = (articleName: string) => {
  return useQuery<StudentArticleProgress | null, Error>({
    queryKey: ['student-progress', articleName],
    queryFn: async () => {
      const resp = await apiGetStudentArticleProgress(articleName);
      return normalizeArticle(resp);
    },
    enabled: !!articleName,
    staleTime: 30 * 1000,
    gcTime: 5 * 60 * 1000,
  });
};

// Fallback function to read from localStorage (keeps Date objects consistent)
const getLocalStorageProgress = (): StudentOverallProgress | null => {
  try {
    const allKeys = Object.keys(localStorage);
    const progressKeys = allKeys.filter((key) =>
      key.startsWith('dictation-progress-')
    );

    if (progressKeys.length === 0) return null;

    let totalArticles = 0;
    let completedArticles = 0;
    let totalScore = 0;
    let totalSessions = 0;
    const recentSessions: Array<{
      articleName: string;
      score: number;
      completionRate: number;
      timestamp: Date;
    }> = [];

    progressKeys.forEach((key) => {
      const articleName = key.replace('dictation-progress-', '');
      const progressData = localStorage.getItem(key);

      if (!progressData) return;

      try {
        const parsed = JSON.parse(progressData);
        const session = parsed.session || parsed;

        totalArticles += 1;

        const fragments = Array.isArray(session.fragments)
          ? session.fragments
          : [];
        const completedFragments = session.completedFragments || 0;
        const completionRate =
          (completedFragments / Math.max(1, fragments.length)) * 100;

        if (completionRate >= 80) completedArticles += 1;

        const bestScore = Array.isArray(session.progress)
          ? Math.max(...session.progress.map((p: any) => p?.bestScore || 0))
          : session.bestScore || 0;

        totalScore += bestScore;
        totalSessions += 1;

        // Normalize timestamp to Date consistently for UI use
        const tsCandidate =
          session.startTime || parsed.lastUpdated || Date.now();
        recentSessions.push({
          articleName,
          score: bestScore,
          completionRate,
          timestamp: toDateOrEpoch(tsCandidate),
        });
      } catch (err) {
        console.warn(`Failed to parse progress for ${articleName}:`, err);
      }
    });

    return normalizeOverall({
      studentUsername: 'local-user',
      totalArticlesAttempted: totalArticles,
      completedArticles,
      averageScore: totalSessions > 0 ? totalScore / totalSessions : 0,
      totalTimeSpent: 0, // Not accurately derivable from localStorage
      recentSessions: recentSessions.slice(0, 5),
      improvementTrend: 'stable',
    });
  } catch (error) {
    console.error('Failed to load localStorage progress:', error);
    return null;
  }
};


C:\Users\User\Desktop\jink-demo\src\hooks\useStudentsProgress.ts

import { useQuery } from '@tanstack/react-query';
import { apiGetStudentsProgress } from '../api/apiSessions';

export const useStudentsProgress = () => {
  return useQuery({
    queryKey: ['teacher-analytics', 'students'],
    queryFn: apiGetStudentsProgress,
    staleTime: 2 * 60 * 1000, // 2 minutes
    gcTime: 5 * 60 * 1000,   // 5 minutes
    retry: (failureCount, error: any) => {
      if (error?.response?.status === 403) {
        return false; // Don't retry unauthorized
      }
      return failureCount < 2;
    },
  });
};


C:\Users\User\Desktop\jink-demo\src\hooks\useUsers.ts

// src/hooks/useUsers.ts
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { 
  apiListUsers, 
  apiGetUserByUsername, 
  apiCreateUser, 
  apiUpdateUser, 
  apiDeleteUser, 
  apiToggleUserStatus,
  apiResetPassword,
} from '../api/apiUsers';
import type { 
  IUserCreate,
  IUserUpdate 
} from '../api/apiUsers';
import { useAuth } from '../context/AuthContext';

// List users with caching
export const useUsers = () => {
  const { user } = useAuth();
  
  return useQuery({
    queryKey: ['users'],
    queryFn: apiListUsers,
    enabled: !!user && ['admin', 'teacher'].includes(user.role),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes (was cacheTime in v4)
  });
};

// Get single user
export const useUser = (username?: string) => {
  return useQuery({
    queryKey: ['user', username],
    queryFn: () => apiGetUserByUsername(username!),
    enabled: !!username,
  });
};

// Create user mutation
export const useCreateUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (userData: IUserCreate) => apiCreateUser(userData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
    },
  });
};

// Update user mutation
export const useUpdateUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ username, userData }: { username: string; userData: IUserUpdate }) =>
      apiUpdateUser(username, userData),
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      queryClient.invalidateQueries({ queryKey: ['user', variables.username] });
    },
  });
};

// // Delete user mutation
// export const useDeleteUser = () => {
//   const queryClient = useQueryClient();
  
//   return useMutation({
//     mutationFn: (username: string) => apiDeleteUser(username),
//     onSuccess: () => {
//       queryClient.invalidateQueries({ queryKey: ['users'] });
//     },
//   });
// };
export const useDeleteUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: apiDeleteUser, // (username: string) => apiDeleteUser(username) works too
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
    },
    onError: (error) => {
      console.error('Delete user error:', error);
    },
  });
};



// Toggle user status mutation
export const useToggleUserStatus = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (username: string) => apiToggleUserStatus(username),
    onSuccess: (_data, username) => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      queryClient.invalidateQueries({ queryKey: ['user', username] });
    },
  });
};

// Reset password mutation
export const useResetPassword = () => {
  return useMutation({
    mutationFn: ({ username, newPassword }: { username: string; newPassword: string }) =>
      apiResetPassword(username, newPassword),
  });
};


C:\Users\User\Desktop\jink-demo\src\pages\admin\AdminArticleDetail.tsx

import React, { useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { useArticle } from '../../hooks/useArticles';
import { useAudioStatus } from '../../hooks/useAudioStatus';
import { 
  useForceRegenerateAudio,
  useAdminUpdateArticleStatus,
  useAdminDeleteArticle
} from '../../hooks/useAdminArticles';
import { LoadingSpinner } from '../../components/common/LoadingSpinner';
import { ConfirmDialog } from '../../components/common/ConfirmDialog';

const AdminArticleDetail: React.FC = () => {
  const { articleName } = useParams<{ articleName: string }>();
  const navigate = useNavigate();
  
  const { data: article, isLoading: articleLoading, error: articleError } = useArticle(articleName!);
  const { data: audioStatus, isLoading: audioLoading } = useAudioStatus(articleName!, true);
  
  const forceRegenerate = useForceRegenerateAudio();
  const updateStatus = useAdminUpdateArticleStatus();
  const deleteArticle = useAdminDeleteArticle();

  const [deleteDialog, setDeleteDialog] = useState(false);
  const [regenerateDialog, setRegenerateDialog] = useState(false);

  if (!articleName) {
    return <div>Invalid article name</div>;
  }

  if (articleLoading || audioLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner message="Loading article details..." />
      </div>
    );
  }

  if (articleError || !article) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Article Not Found</h2>
          <p className="text-gray-600 mb-4">The requested article could not be found.</p>
          <Link 
            to="/admin/articles" 
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
          >
            Back to Articles
          </Link>
        </div>
      </div>
    );
  }

  const handleStatusToggle = async () => {
    const newStatus = article.status === 'ready' ? 'editing' : 'ready';
    try {
      await updateStatus.mutateAsync({ articleName, status: newStatus });
    } catch (error) {
      console.error('Failed to update status:', error);
    }
  };

  const handleForceRegenerate = async () => {
    try {
      await forceRegenerate.mutateAsync({ articleName, quality: 'high' });
      setRegenerateDialog(false);
    } catch (error) {
      console.error('Failed to regenerate audio:', error);
    }
  };

  const handleDelete = async () => {
    try {
      await deleteArticle.mutateAsync(articleName);
      navigate('/admin/articles');
    } catch (error) {
      console.error('Failed to delete article:', error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ready': return 'bg-green-100 text-green-800';
      case 'processing': return 'bg-blue-100 text-blue-800';
      case 'editing': return 'bg-yellow-100 text-yellow-800';
      case 'error': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <nav className="flex items-center space-x-2 text-sm text-gray-500 mb-4">
            <Link to="/admin/articles" className="hover:text-gray-700">Articles</Link>
            <span>/</span>
            <span className="text-gray-900">{article.title}</span>
          </nav>
          
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{article.title}</h1>
              <p className="text-gray-600 mt-2">
                Created by {article.teacherUsername} • {article.sentences.length} sentences
              </p>
            </div>
            
            <div className="flex items-center space-x-3">
              <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(article.status)}`}>
                {article.status.charAt(0).toUpperCase() + article.status.slice(1)}
              </span>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Article Info */}
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Article Information</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Article Name</label>
                  <p className="mt-1 text-sm text-gray-900 font-mono bg-gray-50 px-3 py-2 rounded">
                    {article.articleName}
                  </p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Teacher</label>
                  <p className="mt-1 text-sm text-gray-900">{article.teacherUsername}</p>
                </div>
                
                {article.metadata?.grade && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Grade</label>
                    <p className="mt-1 text-sm text-gray-900">{article.metadata.grade}</p>
                  </div>
                )}
                
                {article.metadata?.subject && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Subject</label>
                    <p className="mt-1 text-sm text-gray-900">{article.metadata.subject}</p>
                  </div>
                )}
                
                {article.metadata?.difficulty && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Difficulty</label>
                    <p className="mt-1 text-sm text-gray-900">{article.metadata.difficulty}</p>
                  </div>
                )}
              </div>
            </div>

            {/* Audio Status */}
            {audioStatus && (
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-lg font-medium text-gray-900 mb-4">Audio Status</h2>
                
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div>
                      <p className="text-sm font-medium text-gray-900">Audio Generation</p>
                      <p className="text-sm text-gray-600">
                        {audioStatus.audio.hasAudio ? 'Audio files available' : 'No audio generated'}
                      </p>
                    </div>
                    <div className="flex items-center">
                      {audioStatus.audio.hasAudio ? (
                        <div className="flex items-center text-green-600">
                          <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                            <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"/>
                          </svg>
                          Available
                        </div>
                      ) : (
                        <div className="flex items-center text-gray-400">
                          <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clipRule="evenodd"/>
                            <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"/>
                          </svg>
                          Not Available
                        </div>
                      )}
                    </div>
                  </div>

                  {audioStatus.audio.totalFragments && (
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-gray-600">Total Fragments:</span>
                        <span className="ml-2 font-medium">{audioStatus.audio.totalFragments}</span>
                      </div>
                      {audioStatus.audio.totalDuration && (
                        <div>
                          <span className="text-gray-600">Duration:</span>
                          <span className="ml-2 font-medium">{Math.round(audioStatus.audio.totalDuration)}s</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Article Text Preview */}
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Article Preview</h2>
              <div className="prose prose-sm max-w-none">
                <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                  {article.originalText}
                </p>
              </div>
            </div>
          </div>

          {/* Admin Actions Sidebar */}
          <div className="space-y-6">
            {/* Quick Actions */}
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Admin Actions</h2>
              
              <div className="space-y-3">
                <button
                  onClick={handleStatusToggle}
                  disabled={article.status === 'processing' || updateStatus.isPending}
                  className={`w-full px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                    article.status === 'ready' 
                      ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200' 
                      : 'bg-green-100 text-green-800 hover:bg-green-200'
                  } disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  {updateStatus.isPending ? 'Updating...' : 
                   article.status === 'ready' ? 'Unpublish Article' : 'Publish Article'}
                </button>

                <button
                  onClick={() => setRegenerateDialog(true)}
                  disabled={article.status === 'processing' || forceRegenerate.isPending}
                  className="w-full px-4 py-2 bg-purple-100 text-purple-800 hover:bg-purple-200 rounded-md text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {forceRegenerate.isPending ? 'Regenerating...' : 'Force Regenerate Audio'}
                </button>

                <Link
                  to={`/teacher/articles/${articleName}/edit`}
                  className="w-full px-4 py-2 bg-blue-100 text-blue-800 hover:bg-blue-200 rounded-md text-sm font-medium transition-colors text-center block"
                >
                  Edit Article
                </Link>

                <button
                  onClick={() => setDeleteDialog(true)}
                  className="w-full px-4 py-2 bg-red-100 text-red-800 hover:bg-red-200 rounded-md text-sm font-medium transition-colors"
                >
                  Delete Article
                </button>
              </div>
            </div>

            {/* Error Information */}
            {article.processingError && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <h3 className="text-sm font-medium text-red-800 mb-2">Processing Error</h3>
                <p className="text-sm text-red-700">{article.processingError}</p>
              </div>
            )}

            {/* Article Stats */}
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Statistics</h2>
              
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Word Count:</span>
                  <span className="font-medium">{article.originalText.split(' ').length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Sentences:</span>
                  <span className="font-medium">{article.sentences.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Created:</span>
                  <span className="font-medium">{new Date(article.createdAt!).toLocaleDateString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Updated:</span>
                  <span className="font-medium">{new Date(article.updatedAt!).toLocaleDateString()}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Confirmation Dialogs */}
        <ConfirmDialog
          isOpen={regenerateDialog}
          title="Force Regenerate Audio"
          message="This will regenerate all audio files for this article. The process may take several minutes. Continue?"
          confirmText="Regenerate"
          cancelText="Cancel"
          type="warning"
          onConfirm={handleForceRegenerate}
          onCancel={() => setRegenerateDialog(false)}
        />

        <ConfirmDialog
          isOpen={deleteDialog}
          title="Delete Article"
          message={`Are you sure you want to delete "${article.title}"? This action cannot be undone and will remove all associated audio files.`}
          confirmText="Delete"
          cancelText="Cancel"
          type="danger"
          onConfirm={handleDelete}
          onCancel={() => setDeleteDialog(false)}
        />
      </div>
    </div>
  );
};

export default AdminArticleDetail;


C:\Users\User\Desktop\jink-demo\src\pages\admin\AdminArticlesDashboard.tsx

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  useAdminArticles, 
  useAdminSystemStats,
  useForceRegenerateAudio,
  useAdminUpdateArticleStatus,
  useAdminDeleteArticle,
  type IAdminArticleView 
} from '../../hooks/useAdminArticles';
import { LoadingSpinner } from '../../components/common/LoadingSpinner';
import { ConfirmDialog } from '../../components/common/ConfirmDialog';

const AdminArticlesDashboard: React.FC = () => {
  const { data: articles, isLoading: articlesLoading, error: articlesError } = useAdminArticles();
  const { data: stats, isLoading: statsLoading } = useAdminSystemStats();
  const forceRegenerate = useForceRegenerateAudio();
  const updateStatus = useAdminUpdateArticleStatus();
  const deleteArticle = useAdminDeleteArticle();

  // Local state for filters and modals
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [teacherFilter, setTeacherFilter] = useState<string>('all');
  const [deleteDialog, setDeleteDialog] = useState<{
    isOpen: boolean;
    article: IAdminArticleView | null;
  }>({ isOpen: false, article: null });

  // Filter articles based on search and filters
  const filteredArticles = articles?.filter(article => {
    const matchesSearch = article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         article.teacherUsername.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || article.status === statusFilter;
    const matchesTeacher = teacherFilter === 'all' || article.teacherUsername === teacherFilter;
    
    return matchesSearch && matchesStatus && matchesTeacher;
  }) || [];

  // Get unique teachers for filter
  const teachers = Array.from(new Set(articles?.map(a => a.teacherUsername) || []));

  const handleForceRegenerate = async (articleName: string) => {
    try {
      await forceRegenerate.mutateAsync({ articleName, quality: 'high' });
    } catch (error) {
      console.error('Failed to regenerate audio:', error);
    }
  };

  const handleStatusToggle = async (articleName: string, currentStatus: string) => {
    const newStatus = currentStatus === 'ready' ? 'editing' : 'ready';
    try {
      await updateStatus.mutateAsync({ articleName, status: newStatus });
    } catch (error) {
      console.error('Failed to update status:', error);
    }
  };

  const handleDeleteClick = (article: IAdminArticleView) => {
    setDeleteDialog({ isOpen: true, article });
  };

  const handleDeleteConfirm = async () => {
    if (deleteDialog.article) {
      try {
        await deleteArticle.mutateAsync(deleteDialog.article.articleName);
        setDeleteDialog({ isOpen: false, article: null });
      } catch (error) {
        console.error('Failed to delete article:', error);
      }
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ready': return 'bg-green-100 text-green-800';
      case 'processing': return 'bg-blue-100 text-blue-800';
      case 'editing': return 'bg-yellow-100 text-yellow-800';
      case 'error': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (articlesLoading || statsLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner message="Loading admin dashboard..." />
      </div>
    );
  }

  if (articlesError) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Error Loading Articles</h2>
          <p className="text-red-600 mb-4">{(articlesError as Error).message}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Article Management</h1>
          <p className="text-gray-600 mt-2">
            Manage all articles across the system • {filteredArticles.length} total articles
          </p>
        </div>

        {/* System Stats Cards */}
        {stats && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-blue-100 rounded-md flex items-center justify-center">
                    <svg className="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Total Articles</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.totalArticles}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-green-100 rounded-md flex items-center justify-center">
                    <svg className="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Ready Articles</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.byStatus.ready || 0}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-purple-100 rounded-md flex items-center justify-center">
                    <svg className="w-5 h-5 text-purple-600" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Active Teachers</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.byTeacher.length}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-orange-100 rounded-md flex items-center justify-center">
                    <svg className="w-5 h-5 text-orange-600" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">With Audio</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.audioStats.withAudio}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Filters */}
        <div className="bg-white shadow rounded-lg mb-6">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">Filter Articles</h2>
          </div>
          <div className="px-6 py-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-2">
                  Search
                </label>
                <input
                  type="text"
                  id="search"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Search articles or teachers..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              
              <div>
                <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  id="status"
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="all">All Statuses</option>
                  <option value="editing">Editing</option>
                  <option value="processing">Processing</option>
                  <option value="ready">Ready</option>
                  <option value="error">Error</option>
                </select>
              </div>

              <div>
                <label htmlFor="teacher" className="block text-sm font-medium text-gray-700 mb-2">
                  Teacher
                </label>
                <select
                  id="teacher"
                  value={teacherFilter}
                  onChange={(e) => setTeacherFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="all">All Teachers</option>
                  {teachers.map(teacher => (
                    <option key={teacher} value={teacher}>{teacher}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        </div>

        {/* Articles Table */}
        <div className="bg-white shadow overflow-hidden rounded-lg">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">All Articles</h2>
          </div>
          
          {filteredArticles.length === 0 ? (
            <div className="text-center py-12">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No articles found</h3>
              <p className="mt-1 text-sm text-gray-500">No articles match your current filters.</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Article
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Teacher
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Audio
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Created
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredArticles.map((article) => (
                    <tr key={article.articleName} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            <Link 
                              to={`/admin/articles/${article.articleName}`}
                              className="hover:text-blue-600 transition-colors"
                            >
                              {article.title}
                            </Link>
                          </div>
                            <div className="text-sm text-gray-500">
                            {article.sentenceCount} sentences • {article.wordCount} words
                            </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{article.teacherInfo?.fullname}</div>
                        <div className="text-sm text-gray-500">@{article.teacherUsername}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(article.status)}`}>
                          {article.status.charAt(0).toUpperCase() + article.status.slice(1)}
                        </span>
                        {article.processingError && (
                          <div className="text-xs text-red-600 mt-1" title={article.processingError}>
                            Error occurred
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          {article.hasAudio ? (
                            <div className="flex items-center text-green-600">
                              <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M18 3a1 1 0 00-1.196-.98l-10 2A1 1 0 006 5v6.114a4 4 0 10.894 2.516l.106-.025V15a1 1 0 001.196.98l10-2A1 1 0 0019 13V7a1 1 0 00-1.196-.98l-10 2A1 1 0 007 9v2.114a4 4 0 101.894 2.516L9 13.636V3a1 1 0 011.196-.98l8-1.6z"/>
                              </svg>
                              <span className="text-sm">Available</span>
                            </div>
                          ) : (
                            <div className="flex items-center text-gray-400">
                              <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd"/>
                              </svg>
                              <span className="text-sm">Missing</span>
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(article.createdAt).toLocaleDateString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          <Link
                            to={`/admin/articles/${article.articleName}`}
                            className="text-blue-600 hover:text-blue-900 transition-colors px-2 py-1 rounded hover:bg-blue-50"
                          >
                            View
                          </Link>
                          
                          <button
                            onClick={() => handleStatusToggle(article.articleName, article.status)}
                            className="text-green-600 hover:text-green-900 transition-colors px-2 py-1 rounded hover:bg-green-50"
                            disabled={article.status === 'processing'}
                          >
                            {article.status === 'ready' ? 'Unpublish' : 'Publish'}
                          </button>

                          <button
                            onClick={() => handleForceRegenerate(article.articleName)}
                            className="text-purple-600 hover:text-purple-900 transition-colors px-2 py-1 rounded hover:bg-purple-50"
                            disabled={article.status === 'processing' || forceRegenerate.isPending}
                          >
                            Regenerate
                          </button>

                          <button
                            onClick={() => handleDeleteClick(article)}
                            className="text-red-600 hover:text-red-900 transition-colors px-2 py-1 rounded hover:bg-red-50"
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Delete Confirmation Dialog */}
        <ConfirmDialog
          isOpen={deleteDialog.isOpen}
          title="Delete Article"
          message={`Are you sure you want to delete "${deleteDialog.article?.title}"? This action cannot be undone and will remove all associated audio files.`}
          confirmText="Delete"
          cancelText="Cancel"
          type="danger"
          onConfirm={handleDeleteConfirm}
          onCancel={() => setDeleteDialog({ isOpen: false, article: null })}
        />
      </div>
    </div>
  );
};

export default AdminArticlesDashboard;


C:\Users\User\Desktop\jink-demo\src\pages\admin\BulkOperations.tsx

// src/pages/admin/BulkOperations.tsx
import React, { useState } from 'react';
import { BulkImport } from '../../components/bulk/BulkImport';
import { BulkExport } from '../../components/bulk/BulkExport';
import { CSVTemplateDownload } from '../../components/bulk/CSVTemplateDownload';

const BulkOperations: React.FC = () => {
  const [active, setActive] = useState<'import' | 'export' | null>(null);

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-semibold mb-4">Bulk User Operations</h1>
      <p className="mb-8">Import and export users using CSV files.</p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded shadow">
          <h2 className="text-xl font-medium mb-4">Import Users</h2>
          <BulkImport onSuccess={() => setActive(null)} onCancel={() => setActive(null)} />
          <div className="mt-4">
            <CSVTemplateDownload />
          </div>
        </div>
        <div className="bg-white p-6 rounded shadow">
          <h2 className="text-xl font-medium mb-4">Export Users{active?"":""}</h2>
          <BulkExport onCancel={() => setActive(null)} />
        </div>
      </div>
    </div>
  );
};

export default BulkOperations;


C:\Users\User\Desktop\jink-demo\src\pages\admin\Groups.tsx

import React, { useState } from 'react';
import { GroupsList } from '../../components/groups/GroupsList';
import { GroupForm } from '../../components/groups/GroupForm';
import { GroupDetail } from '../../components/groups/GroupDetail';
import type { IStudentGroup } from '../../api/apiGroups';

const Groups: React.FC = () => {
  const [currentView, setCurrentView] = useState<'list' | 'create' | 'edit' | 'detail'>('list');
  const [selectedGroup, setSelectedGroup] = useState<IStudentGroup | null>(null);

  const handleCreateGroup = () => {
    setSelectedGroup(null);
    setCurrentView('create');
  };

  const handleEditGroup = (group: IStudentGroup) => {
    setSelectedGroup(group);
    setCurrentView('edit');
  };

  const handleViewGroup = (group: IStudentGroup) => {
    setSelectedGroup(group);
    setCurrentView('detail');
  };

  const handleFormSuccess = () => {
    setCurrentView('list');
    setSelectedGroup(null);
  };

  const handleFormCancel = () => {
    setCurrentView('list');
    setSelectedGroup(null);
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {currentView === 'list' && (
        <GroupsList
          onCreateGroup={handleCreateGroup}
          onEditGroup={handleEditGroup}
          onViewGroup={handleViewGroup}
        />
      )}

      {(currentView === 'create' || currentView === 'edit') && (
        <GroupForm
          group={selectedGroup || undefined}
          onSuccess={handleFormSuccess}
          onCancel={handleFormCancel}
        />
      )}

      {currentView === 'detail' && selectedGroup && (
        <GroupDetail
          group={selectedGroup}
          onClose={() => setCurrentView('list')}
          onEdit={() => setCurrentView('edit')}
        />
      )}
    </div>
  );
};

export default Groups;


C:\Users\User\Desktop\jink-demo\src\pages\student\ArticleList.tsx

// src/pages/student/ArticleList.tsx

import React from 'react';
import { Link } from 'react-router-dom';
import { useArticles } from '../../hooks/useArticles';
import { useDictationProgress } from '../../hooks/useDictationProgress';
import {LoadingSpinner} from '../../components/common/LoadingSpinner';

interface ArticleCardProps {
  article: any;
  progress?: any;
}

const ArticleCard: React.FC<ArticleCardProps> = ({ article, progress }) => {
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty?.toLowerCase()) {
      case 'a1': return 'bg-green-100 text-green-800';
      case 'a2': return 'bg-blue-100 text-blue-800';
      case 'b1': return 'bg-yellow-100 text-yellow-800';
      case 'b2': return 'bg-orange-100 text-orange-800';
      case 'c1': return 'bg-red-100 text-red-800';
      case 'c2': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusDisplay = () => {
    if (article.status !== 'ready') {
      return (
        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
          Processing Audio...
        </span>
      );
    }

    if (progress?.isCompleted) {
      return (
        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
          ✓ Completed
        </span>
      );
    }

    if (progress && progress.session.completedFragments > 0) {
      const completionRate = (progress.session.completedFragments / progress.session.fragments.length);
      return (
        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
          {Math.round(completionRate * 100)}% Complete
        </span>
      );
    }

    return (
      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
        Not Started
      </span>
    );
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow">
      <div className="p-6">
        <div className="flex items-start justify-between mb-3">
          <h3 className="text-lg font-semibold text-gray-900 line-clamp-2">
            {article.title}
          </h3>
          <div className="ml-2 flex-shrink-0">
            {getStatusDisplay()}
          </div>
        </div>

        <p className="text-gray-600 text-sm line-clamp-3 mb-4">
          {article.originalText.substring(0, 120)}...
        </p>

        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            {article.metadata?.difficulty && (
              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(article.metadata.difficulty)}`}>
                {article.metadata.difficulty}
              </span>
            )}
            
            <span className="text-xs text-gray-500">
              {article.sentences?.length || 0} fragments
            </span>
            
            {article.metadata?.estimatedTime && (
              <span className="text-xs text-gray-500">
                ~{article.metadata.estimatedTime} min
              </span>
            )}
          </div>

          {article.metadata?.subject && (
            <span className="text-xs text-gray-500">
              {article.metadata.subject}
            </span>
          )}
        </div>

        <div className="flex items-center justify-between">
          <div className="text-xs text-gray-500">
            Created: {new Date(article.createdAt).toLocaleDateString()}
          </div>

          <Link
            to={`/student/practice/${article.articleName}`}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              article.status === 'ready'
                ? 'bg-blue-600 text-white hover:bg-blue-700'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
          >
            {progress?.isCompleted ? 'Practice Again' : progress?.session ? 'Continue' : 'Start Practice'}
          </Link>
        </div>
      </div>
    </div>
  );
};

const StudentArticleList: React.FC = () => {
  const { data: articles, isLoading, error } = useArticles();
  const { getAllSessions } = useDictationProgress(''); // Get all sessions for progress info

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner message="Loading available articles..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Error Loading Articles</h2>
          <p className="text-gray-600">Please try refreshing the page.</p>
        </div>
      </div>
    );
  }

  const readyArticles = articles?.filter(article => article.status === 'ready') || [];
  const processingArticles = articles?.filter(article => article.status !== 'ready') || [];
  const allSessions = getAllSessions();
  const sessionsMap = new Map(allSessions.map(s => [s.session.articleName, s]));

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Dictation Practice</h1>
        <p className="text-gray-600">
          Choose an article to practice your listening and typing skills
        </p>
      </div>

      {/* Ready Articles */}
      {readyArticles.length > 0 && (
        <div className="mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Available for Practice</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {readyArticles.map((article) => (
              <ArticleCard
                key={article.articleName}
                article={article}
                progress={sessionsMap.get(article.articleName)}
              />
            ))}
          </div>
        </div>
      )}

      {/* Processing Articles */}
      {processingArticles.length > 0 && (
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Coming Soon</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {processingArticles.map((article) => (
              <ArticleCard
                key={article.articleName}
                article={article}
              />
            ))}
          </div>
        </div>
      )}

      {/* Empty State */}
      {(!articles || articles.length === 0) && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">📚</div>
          <h3 className="text-xl font-semibold text-gray-900 mb-2">No Articles Available</h3>
          <p className="text-gray-600">
            Your teacher hasn't published any dictation exercises yet. Check back later!
          </p>
        </div>
      )}
    </div>
  );
};

export default StudentArticleList;


C:\Users\User\Desktop\jink-demo\src\pages\student\DictationPractice.tsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useArticle } from '../../hooks/useArticles';
import { useDictationProgress } from '../../hooks/useDictationProgress';
import FragmentDictation from '../../components/dictation/FragmentDictation';
import type { DictationSession, FragmentProgress } from '../../components/dictation/FragmentDictation';
import SessionResults from '../../components/dictation/SessionResults';
// import {LoadingSpinner} from '../../components/common/LoadingSpinner';
import { useAudioStatus } from '../../hooks/useAudioStatus';
import { ExclamationTriangleIcon } from '@heroicons/react/24/outline';

type ViewMode = 'loading' | 'practice' | 'results';

const DictationPracticePage: React.FC = () => {
  const { articleName } = useParams<{ articleName: string }>();
  const navigate = useNavigate();
  
  const { savedSession } = useDictationProgress(articleName!);

  // View state management
  const [currentView, setCurrentView] = useState<ViewMode>('loading');
  const [completedSession, setCompletedSession] = useState<DictationSession | null>(null);

  // Main article data
  const { data: article, isLoading: articleLoading, error: articleError } = useArticle(articleName!);
  
  // Real-time audio status monitoring
  const { data: audioStatus, isLoading: audioLoading, error: audioError, isRefetching } = useAudioStatus(
    articleName!, 
    !!article && (article.status === 'processing' || article.status === 'ready')
  );

  const { saveSession } = useDictationProgress(articleName!);

  // Add session restoration effect
  useEffect(() => {
    if (currentView === 'practice' && savedSession) {
      console.log('Restored saved session:', savedSession)
      // Session will be automatically passed to FragmentDictation component
    }
  }, [currentView, savedSession])

  const handleSessionComplete = (session: DictationSession) => {
    // Add end time to session
    const completedSessionWithEndTime: DictationSession = {
      ...session,
      endTime: new Date(),
    };
    
    // Save session to localStorage
    saveSession(completedSessionWithEndTime);
    
    // Store completed session and switch to results view
    setCompletedSession(completedSessionWithEndTime);
    setCurrentView('results');
  };

  const handleProgressUpdate = (progress: FragmentProgress[]) => {
    // Optional: merge partial progress for real-time updates
    console.log('Progress updated:', progress);
  };

  // Handle results view actions
  const handlePracticeAgain = () => {
    setCompletedSession(null);
    setCurrentView('practice');
  };

  const handleBackToArticles = () => {
    navigate('/student/articles');
  };

  const handleViewProgress = () => {
    // Navigate to student progress page when available
    navigate('/student/progress');
  };

  // Loading state with detailed feedback
  if (articleLoading || audioLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full mx-auto"></div>
          <div>
            <p className="text-lg font-semibold text-gray-900">Loading Exercise</p>
            <p className="text-sm text-gray-600">
              {articleLoading ? 'Loading article...' : 'Checking audio status...'}
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  if (articleError || audioError || !article || !audioStatus || !audioStatus?.audio?.fullAudioUrl || !audioStatus?.fragments) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-red-600 mb-4">
            <ExclamationTriangleIcon className="w-16 h-16 mx-auto" />
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Unable to Load Exercise</h2>
          <p className="text-gray-600 mb-4">
            {articleError?.message || audioError?.message || 'Something went wrong'}
          </p>
          <div className="space-y-2">
            <button
              onClick={() => window.location.reload()}
              className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Try Again
            </button>
            <button
              onClick={() => navigate('/student/articles')}
              className="w-full px-4 py-2 text-gray-600 hover:text-gray-800"
            >
              Back to Articles
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Audio still processing - real-time status
  if (article?.status === 'processing') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-blue-600 mb-4">
            <div className="animate-spin w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full mx-auto"></div>
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Audio Processing</h2>
          <p className="text-gray-600 mb-4">
            The audio for this article is being generated. This usually takes 2-3 minutes.
          </p>
          {/* Real-time status indicator */}
          {isRefetching && (
            <div className="flex items-center justify-center text-blue-600 text-sm mb-4">
              <div className="animate-spin w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full mr-2"></div>
              Checking status...
            </div>
          )}
          <div className="space-y-3">
            <button
              onClick={() => window.location.reload()}
              className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Check Again
            </button>
            <button
              onClick={() => navigate('/student/articles')}
              className="w-full px-4 py-2 text-gray-600 hover:text-gray-800"
            >
              Back to Articles
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Ready check - require URL and timing
  // const fullUrl = audioStatus?.audio?.fullAudioUrl ?? audioStatus?.audio.fullAudioUrl ?? article?.fullAudioUrl;
  // const fragments = audioStatus?.fragments;
  // const hasReadyAudio = Boolean(fullUrl && Array.isArray(fragments) && fragments.length > 0);


  // const fullUrl = audioStatus?.audio?.fullAudioUrl;
  const fragments = audioStatus?.fragments ?? [];
  const hasReadyAudio = Boolean(audioStatus?.audio?.hasAudio && Array.isArray(fragments) && fragments.length > 0);

  // Audio not ready
  if (!hasReadyAudio){ //if (!hasReadyAudio || !article?.fullAudioUrl || !audioStatus?.fragments?.length) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-yellow-600 mb-4">📢</div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Audio Not Available</h2>
          <p className="text-gray-600 mb-4">
            This article doesn't have audio available yet. Please try another article or check back later.
          </p>
          <button
            onClick={() => navigate('/student/articles')}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Articles
          </button>
        </div>
      </div>
    );
  }

  // Render based on current view
  if (currentView === 'results' && completedSession) {
    return (
      <SessionResults
        session={completedSession}
        onRetry={handlePracticeAgain}
        onViewProgress={handleViewProgress}
        onReturnToList={handleBackToArticles}
      />
    );
  }

  // SUCCESS - Ready for dictation
  return (
    <FragmentDictation
      articleName={article.articleName}
      articleTitle={article.title}
      fullAudioUrl={audioStatus.audio.fullAudioUrl}
      fragments={audioStatus.fragments ?? []}
      onSessionComplete={handleSessionComplete}
      onProgressUpdate={handleProgressUpdate}
      showText={false}
      allowGiveUp={true}
      savedSession={savedSession}
    />
  );
};

export default DictationPracticePage;


C:\Users\User\Desktop\jink-demo\src\pages\student\StudentArticleList.tsx

// src/pages/student/StudentArticleList.tsx
import  { useMemo, useState } from 'react';
import { useStudentArticles } from '../../hooks/useStudentArticles';
import {LoadingSpinner} from '../../components/common/LoadingSpinner';
import StudentArticleCard from '../../components/student/StudentArticleCard';
import type {IArticle} from '../../types/article.types';
import { useMyProgressMap } from '../../hooks/useMyProgressMap';

export default function StudentArticleList() {
  const { data: articles, isLoading, error } = useStudentArticles();
  const [sortBy, setSortBy] = useState<'recent' | 'difficulty' | 'title' | 'progress'>('recent');
  const [filterBy, setFilterBy] = useState<'all' | 'not-started' | 'in-progress' | 'completed'>('all');
  const [searchQuery, setSearchQuery] = useState('');

  const readyArticles = useMemo(
    () => (articles ?? []).filter((a: IArticle) => a.status === 'ready'),
    [articles]
  );

  const articleNames = useMemo(() => readyArticles.map((a:IArticle) => a.articleName), [readyArticles]);
  const { data: progressMap, isLoading: progressLoading } = useMyProgressMap(articleNames);

  (false && setSortBy('recent')); // to avoid unused var warnings
  (false && setFilterBy('all'));
  (false && setSearchQuery(''));
  
  if (isLoading || progressLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner message="Loading practice articles..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-red-600 mb-4">⚠️</div>
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Unable to Load Articles</h2>
          <p className="text-gray-600 mb-4">{(error as Error).message ?? 'Something went wrong'}</p>
          <button onClick={() => window.location.reload()} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            Try Again
          </button>
        </div>
      </div>
    );
  }

  const processedArticles = useMemo(() => {
    let filtered = [...readyArticles];

    if (searchQuery.trim()) {
      const q = searchQuery.toLowerCase();
      filtered = filtered.filter((a) =>
        a.title.toLowerCase().includes(q) ||
        a.articleName.toLowerCase().includes(q) ||
        a.metadata?.subject?.toLowerCase().includes(q)
      );
    }

    if (filterBy !== 'all') {
      filtered = filtered.filter((a) => {
        const p = progressMap?.[a.articleName];
        switch (filterBy) {
          case 'not-started':
            return !p;
          case 'in-progress':
            return !!p && !p.isCompleted;
          case 'completed':
            return !!p?.isCompleted;
          default:
            return true;
        }
      });
    }

    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'recent':
          return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();
        case 'difficulty': {
          const order: Record<string, number> = { A1: 1, A2: 2, B1: 3, B2: 4, C1: 5, C2: 6 };
          const aD = order[a.metadata?.difficulty ?? ''] ?? 0;
          const bD = order[b.metadata?.difficulty ?? ''] ?? 0;
          return aD - bD;
        }
        case 'title':
          return a.title.localeCompare(b.title);
        case 'progress': {
          const ap = progressMap?.[a.articleName]?.bestScore ?? 0;
          const bp = progressMap?.[b.articleName]?.bestScore ?? 0;
          return bp - ap;
        }
        default:
          return 0;
      }
    });

    return filtered;
  }, [readyArticles, searchQuery, filterBy, sortBy, progressMap]);

  return (
    <div className="max-w-7xl mx-auto p-6">
      {/* controls ... */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {processedArticles.map((article) => {
          const p = progressMap?.[article.articleName];
          return (
            <StudentArticleCard
              key={article.articleName}
              article={article}
              progress={p}           // now matches the card’s expected type
              showQuickStart={false}
            />
          );
        })}
      </div>
    </div>
  );
}


C:\Users\User\Desktop\jink-demo\src\pages\student\StudentArticleProgressPage.tsx

import React from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { useArticle } from '../../hooks/useArticles';
import { useStudentArticleProgress } from '../../hooks/useStudentProgress';
import {LoadingSpinner} from '../../components/common/LoadingSpinner';

interface ProgressOverviewCardProps {
  progress: {
    totalAttempts: number;
    bestScore: number;
    completionRate: number;
    lastPracticed: Date;
    averageScore: number;
    totalTimeSpent: number;
  };
  articleTitle: string;
}

const ProgressOverviewCard: React.FC<ProgressOverviewCardProps> = ({ progress, articleTitle }) => {
  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}m ${secs}s`;
  };

  const getScoreColor = (score: number): string => {
    if (score >= 0.9) return 'text-green-600 bg-green-100';
    if (score >= 0.7) return 'text-yellow-600 bg-yellow-100';
    if (score >= 0.5) return 'text-orange-600 bg-orange-100';
    return 'text-red-600 bg-red-100';
  };

  const getCompletionColor = (rate: number): string => {
    if (rate >= 80) return 'text-green-600';
    if (rate >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <div className="flex items-start justify-between mb-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">{articleTitle}</h1>
          <p className="text-gray-600">Progress Overview</p>
        </div>
        <div className={`px-3 py-1 rounded-full text-sm font-medium ${getScoreColor(progress.bestScore)}`}>
          Best Score: {Math.round(progress.bestScore * 100)}%
        </div>
      </div>

      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="text-center">
          <div className="text-2xl font-bold text-blue-600">
            {progress.totalAttempts}
          </div>
          <div className="text-sm text-gray-600">Total Attempts</div>
        </div>

        <div className="text-center">
          <div className={`text-2xl font-bold ${getCompletionColor(progress.completionRate)}`}>
            {progress.completionRate}%
          </div>
          <div className="text-sm text-gray-600">Completion Rate</div>
        </div>

        <div className="text-center">
          <div className="text-2xl font-bold text-purple-600">
            {Math.round(progress.averageScore * 100)}%
          </div>
          <div className="text-sm text-gray-600">Average Score</div>
        </div>

        <div className="text-center">
          <div className="text-2xl font-bold text-orange-600">
            {formatTime(progress.totalTimeSpent)}
          </div>
          <div className="text-sm text-gray-600">Total Time</div>
        </div>
      </div>

      <div className="mt-4 pt-4 border-t">
        <p className="text-sm text-gray-600">
          Last practiced: {progress.lastPracticed.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </p>
      </div>
    </div>
  );
};

interface FragmentBreakdownProps {
  fragments: Array<{
    fragmentIndex: number;
    text: string;
    attempts: number;
    bestScore: number;
    averageScore: number;
    status: 'pending' | 'correct' | 'given-up';
  }>;
}

const FragmentBreakdown: React.FC<FragmentBreakdownProps> = ({ fragments }) => {
  const getStatusColor = (status: string): string => {
    switch (status) {
      case 'correct': return 'bg-green-100 text-green-800';
      case 'given-up': return 'bg-yellow-100 text-yellow-800';
      case 'pending': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string): string => {
    switch (status) {
      case 'correct': return '✓';
      case 'given-up': return '⚠';
      case 'pending': return '○';
      default: return '○';
    }
  };

  const getScoreColor = (score: number): string => {
    if (score >= 0.9) return 'text-green-600';
    if (score >= 0.7) return 'text-yellow-600';
    if (score >= 0.5) return 'text-orange-600';
    return 'text-red-600';
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <h2 className="text-xl font-semibold text-gray-900 mb-4">Fragment Performance</h2>
      
      <div className="space-y-3">
        {fragments.map((fragment) => (
          <div
            key={fragment.fragmentIndex}
            className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <div className="flex-1 min-w-0">
              <div className="flex items-center space-x-3 mb-2">
                <span className={`inline-flex items-center justify-center w-6 h-6 rounded-full text-sm font-medium ${getStatusColor(fragment.status)}`}>
                  {getStatusIcon(fragment.status)}
                </span>
                <span className="text-sm font-medium text-gray-700">
                  Fragment {fragment.fragmentIndex + 1}
                </span>
                <span className={`text-sm font-semibold ${getScoreColor(fragment.bestScore)}`}>
                  {Math.round(fragment.bestScore * 100)}%
                </span>
              </div>
              <p className="text-sm text-gray-800 truncate" title={fragment.text}>
                {fragment.text}
              </p>
            </div>
            
            <div className="ml-4 text-right">
              <div className="text-xs text-gray-500">
                {fragment.attempts} attempt{fragment.attempts !== 1 ? 's' : ''}
              </div>
              <div className="text-xs text-gray-500">
                Avg: {Math.round(fragment.averageScore * 100)}%
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const BasicAttemptTimeline: React.FC<{ attempts: Array<{ date: Date; score: number; }> }> = ({ attempts }) => {
  return (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <h2 className="text-xl font-semibold text-gray-900 mb-4">Recent Attempts</h2>
      
      <div className="space-y-3">
        {attempts.slice(0, 5).map((attempt, index) => (
          <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div className="flex items-center space-x-3">
              <div className="w-2 h-2 bg-blue-600 rounded-full"></div>
              <span className="text-sm text-gray-600">
                {attempt.date.toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
            <span className={`text-sm font-medium ${
              attempt.score >= 0.8 ? 'text-green-600' : 
              attempt.score >= 0.6 ? 'text-yellow-600' : 'text-red-600'
            }`}>
              {Math.round(attempt.score * 100)}%
            </span>
          </div>
        ))}
      </div>
      
      {attempts.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          <p>No practice attempts yet</p>
        </div>
      )}
    </div>
  );
};

const DetailedHistoryPlaceholder: React.FC = () => {
  return (
    <div className="relative bg-white rounded-lg shadow-sm border p-6 opacity-60">
      <div className="absolute inset-0 flex items-center justify-center z-10">
        <div className="bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg">
          <span className="text-sm font-medium">Detailed History Coming Soon</span>
        </div>
      </div>
      
      <h2 className="text-xl font-semibold text-gray-900 mb-4">Detailed Session History</h2>
      
      {/* Placeholder content */}
      <div className="space-y-4">
        <div className="h-24 bg-gray-100 rounded animate-pulse"></div>
        <div className="h-24 bg-gray-100 rounded animate-pulse"></div>
        <div className="h-24 bg-gray-100 rounded animate-pulse"></div>
      </div>
    </div>
  );
};

const StudentArticleProgressPage: React.FC = () => {
  const { articleName } = useParams<{ articleName: string }>();
  const navigate = useNavigate();
  
  const { data: article, isLoading: articleLoading, error: articleError } = useArticle(articleName!);
  const { data: progress, isLoading: progressLoading, error: progressError } = useStudentArticleProgress(articleName!);

  if (articleLoading || progressLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner message="Loading progress..." />
      </div>
    );
  }

  if (articleError || !article) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Article Not Found</h2>
          <p className="text-gray-600 mb-4">The requested article could not be found.</p>
          <Link 
            to="/student/articles" 
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
          >
            Back to Articles
          </Link>
        </div>
      </div>
    );
  }

  if (progressError || !progress) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">No Progress Data</h2>
          <p className="text-gray-600 mb-4">You haven't practiced this article yet.</p>
          <Link 
            to={`/student/practice/${articleName}`}
            className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors mr-3"
          >
            Start Practice
          </Link>
          <Link 
            to="/student/articles" 
            className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors"
          >
            Back to Articles
          </Link>
        </div>
      </div>
    );
  }

  // Mock fragment data based on article sentences and progress
  const fragmentData = article.sentences.map((sentence, index) => ({
    fragmentIndex: index,
    text: sentence.text,
    attempts: Math.floor(Math.random() * 5) + 1, // Mock data
    bestScore: Math.random() * 0.5 + 0.5, // Mock data: 50-100%
    averageScore: Math.random() * 0.4 + 0.4, // Mock data: 40-80%
    status: Math.random() > 0.7 ? 'correct' : Math.random() > 0.5 ? 'given-up' : 'pending' as 'pending' | 'correct' | 'given-up'
  }));

  // Mock recent attempts
  const recentAttempts = Array.from({ length: Math.min(progress.totalAttempts, 5) }, (_, i) => ({
    date: new Date(Date.now() - (i * 24 * 60 * 60 * 1000)), // Last 5 days
    score: Math.random() * 0.5 + 0.5
  })).reverse();

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Navigation */}
        <nav className="flex items-center space-x-2 text-sm text-gray-500 mb-6">
          <Link to="/student/articles" className="hover:text-gray-700">Articles</Link>
          <span>›</span>
          <span className="text-gray-900">{article.title}</span>
          <span>›</span>
          <span className="text-gray-900">Progress</span>
        </nav>

        <div className="space-y-6">
          {/* Progress Overview */}
          <ProgressOverviewCard 
            progress={progress} 
            articleTitle={article.title}
          />

          {/* Action Buttons */}
          <div className="flex space-x-4">
            <Link
              to={`/student/practice/${articleName}`}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold transition-colors"
            >
              Practice Again
            </Link>
            <button
              onClick={() => navigate('/student/articles')}
              className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-semibold transition-colors"
            >
              Back to Articles
            </button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Fragment Breakdown */}
            <FragmentBreakdown fragments={fragmentData} />

            {/* Recent Attempts Timeline */}
            <BasicAttemptTimeline attempts={recentAttempts} />
          </div>

          {/* Detailed History Placeholder */}
          <DetailedHistoryPlaceholder />
        </div>
      </div>
    </div>
  );
};

export default StudentArticleProgressPage;


C:\Users\User\Desktop\jink-demo\src\pages\student\StudentDashboard.tsx

import React from 'react';
import { useStudentProgress } from '../../hooks/useStudentProgress';
import { useStudentArticles } from '../../hooks/useStudentArticles';
import { LoadingSpinner } from '../../components/common/LoadingSpinner';
import { Link } from 'react-router-dom';
import type { IArticle } from '../../types/article.types';
import StudentArticleCard from '../../components/student/StudentArticleCard';
// import type { ArticleProgress } from '../../types/progress.types';

const StudentDashboard: React.FC = () => {
  const { data: progress, isLoading: progressLoading, error: progressError } = useStudentProgress();
  const { data: articles, isLoading: articlesLoading, error: articlesError } = useStudentArticles();

  // Loading state
  if (progressLoading || articlesLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner message="Loading your progress..." size="large" />
      </div>
    );
  }

  // Error state with fallback
  if (progressError && !progress) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md">
          <div className="text-red-600 mb-4">
            <svg className="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Unable to Load Progress</h2>
          <p className="text-gray-600 mb-4">We couldn't load your progress data. Please try refreshing the page.</p>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Refresh Page
          </button>
        </div>
      </div>
    );
  }

  const formatPercentage = (value: number) => Math.round(value * 100);
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m`;
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return `${hours}h ${remainingMinutes}m`;
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">My Learning Dashboard</h1>
          <p className="text-gray-600 mt-2">Track your dictation practice progress</p>
          
          {/* Data source indicator */}
          <div className="mt-2 text-xs text-gray-500">
            {progressError ? (
              <span className="flex items-center">
                <span className="w-2 h-2 bg-yellow-400 rounded-full mr-2"></span>
                Using offline data
              </span>
            ) : (
              <span className="flex items-center">
                <span className="w-2 h-2 bg-green-400 rounded-full mr-2"></span>
                Synced with server
              </span>
            )}
          </div>
        </div>

        {/* Progress Overview */}
        {progress && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {/* Articles Attempted */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <div className="ml-4">
                  <p className="text-2xl font-semibold text-gray-900">{progress.totalArticlesAttempted}</p>
                  <p className="text-sm text-gray-600">Articles Practiced</p>
                </div>
              </div>
            </div>

            {/* Completion Rate */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="p-2 bg-green-100 rounded-lg">
                  <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="ml-4">
                  <p className="text-2xl font-semibold text-gray-900">{progress.completedArticles}</p>
                  <p className="text-sm text-gray-600">Completed</p>
                </div>
              </div>
            </div>

            {/* Average Score */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                  </svg>
                </div>
                <div className="ml-4">
                  <p className="text-2xl font-semibold text-gray-900">{formatPercentage(progress.averageScore)}%</p>
                  <p className="text-sm text-gray-600">Average Score</p>
                </div>
              </div>
            </div>

            {/* Time Spent */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <svg className="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="ml-4">
                  <p className="text-2xl font-semibold text-gray-900">{formatTime(progress.totalTimeSpent)}</p>
                  <p className="text-sm text-gray-600">Time Practiced</p>
                </div>
              </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Recent Sessions */}
          {progress && progress.recentSessions.length > 0 && (
            <div className="lg:col-span-2">
              <div className="bg-white rounded-lg shadow">
                <div className="px-6 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">Recent Practice Sessions</h3>
                </div>
                <div className="divide-y divide-gray-200">
                  {progress.recentSessions.map((session, index) => (
                    <div key={index} className="p-6 hover:bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900">{session.articleName}</h4>
                          <div className="flex items-center space-x-4 mt-1 text-sm text-gray-600">
                            <span>Score: {formatPercentage(session.score)}%</span>
                            <span>Completion: {Math.round(session.completionRate)}%</span>
                            <span>{new Date(session.timestamp).toLocaleDateString()}</span>
                          </div>
                        </div>
                        <Link
                          to={`/student/practice/${session.articleName}`}
                          className="ml-4 px-3 py-1 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700"
                        >
                          Practice Again
                        </Link>

<Link to={`/student/progress/${session.articleName}`} 
className="ml-2 px-3 py-1 border border-indigo-300 text-indigo-700 rounded-md text-sm hover:bg-indigo-50" >View Progress 
</Link>

                        
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Available Articles */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">Available Articles</h3>
              </div>
              <div className="p-6">
                {articlesLoading ? (
                  <LoadingSpinner message="Loading articles..." size="small" />
                ) : articlesError ? (
                  <p className="text-red-600 text-sm">Failed to load articles</p>
                ) : articles && articles.length > 0 ? (
                  <div className="space-y-3">

{articles.slice(0, 5).map((article: IArticle) => (
  <StudentArticleCard
    key={article.articleName}
    article={article}
    // per-article progress not available in `progress`
    showQuickStart={true}
  />
))}

                    
                    
                    {articles.length > 5 && (
                      <Link
                        to="/student/articles"
                        className="block text-center py-2 text-blue-600 hover:text-blue-800 text-sm font-medium"
                      >
                        View all {articles.length} articles →
                      </Link>
                    )}
                  </div>
                ) : (
                  <p className="text-gray-600 text-sm">No articles available</p>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Empty State */}
        {progress && progress.totalArticlesAttempted === 0 && (
          <div className="text-center py-12">
            <svg className="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <h3 className="text-lg font-medium text-gray-900 mb-2">Start Your First Practice Session</h3>
            <p className="text-gray-600 mb-4">Choose an article to begin practicing dictation</p>
            <Link
              to="/student/articles"
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Browse Articles
            </Link>
          </div>
        )}
      </div>
    </div>
  );
};

export default StudentDashboard;


C:\Users\User\Desktop\jink-demo\src\pages\teacher\ArticleDetail.tsx

// src/pages/teacher/ArticleDetail.tsx
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { useArticle, useDeleteArticle } from '../../hooks/useArticles';
import  SentencePreview  from '../../components/articles/SentencePreview';
import type { IArticle, ISentence } from '../../types/article.types';
// import type { FragmentTiming } from '../../types/article.types';

import { useAudioStatus } from '../../hooks/useAudioStatus';
import { useMutation } from '@tanstack/react-query';
import { apiGenerateAudio } from '../../api/apiArticles';

import { useQueryClient } from '@tanstack/react-query';
import PublishControls from '../../components/teacher/PublishControls';


const ArticleDetail: React.FC = () => {
  const { articleName } = useParams<{ articleName: string }>();
  const navigate = useNavigate();
  const { data: article, isLoading, error } = useArticle(articleName!);
  const deleteArticleMutation = useDeleteArticle();
  
  const [deleteConfirm, setDeleteConfirm] = useState(false);

  const queryClient = useQueryClient();
  // const convertSentencesToFragmentTiming = (sentences: ISentence[]): FragmentTiming[] => {
  //   return sentences.map((sentence, index) => ({
  //     fragmentIndex: index,
  //     order: sentence.order,
  //     text: sentence.text,
  //     startTime: sentence.startTime || 0,
  //     endTime: sentence.endTime || 0,
  //     duration: (sentence.endTime || 0) - (sentence.startTime || 0),
  //     wordCount: sentence.wordCount
  //   }));
  // };

  const handleDelete = async () => {
    if (!article) return;
    
    try {
      await deleteArticleMutation.mutateAsync(article.articleName);
      navigate('/teacher/articles');
    } catch (error) {
      console.error('Failed to delete article:', error);
      alert('Failed to delete article. Please try again.');
    }
  };

// Update the status display function to use strict typing
  const getStatusDisplay = (status: IArticle['status']) => {
    const statusConfig: Record<IArticle['status'], {
      bg: string
      text: string
      icon: string
      label: string
      description: string
    }> = {
      editing: {
        bg: 'bg-yellow-100',
        text: 'text-yellow-800', 
        icon: '✏️',
        label: 'Editing',
        description: 'Article is being edited and not ready for students yet.'
      },
      processing: {
        bg: 'bg-blue-100',
        text: 'text-blue-800',
        icon: '⚙️', 
        label: 'Processing',
        description: 'Audio files are being generated. This may take a few minutes.'
      },
      ready: {
        bg: 'bg-green-100',
        text: 'text-green-800',
        icon: '✅',
        label: 'Ready', 
        description: 'Article is complete and ready for student dictation exercises.'
      },
      error: {
        bg: 'bg-red-100',
        text: 'text-red-800',
        icon: '❌',
        label: 'Error',
        description: 'There was an error processing this article.'
      }
    }
    
    return statusConfig[status]
  }




  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-2 text-gray-600">Loading article...</span>
        </div>
      </div>
    );
  }

  if (error || !article) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="text-center py-12">
          <div className="text-red-600 mb-4">Article not found</div>
          <Link
            to="/teacher/articles"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Articles
          </Link>
        </div>
      </div>
    );
  }

  const statusDisplay = getStatusDisplay(article.status);

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <div className="flex items-center space-x-2 mb-2">
            <Link
              to="/teacher/articles"
              className="text-blue-600 hover:text-blue-800 text-sm transition-colors"
            >
              ← Back to Articles
            </Link>
          </div>
          
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {article.title}
          </h1>
          
          <div className="flex items-center space-x-4 text-sm text-gray-600">
            <span className="font-mono bg-gray-100 px-3 py-1 rounded">
              {article.articleName}
            </span>
            <span>By {article.teacherUsername}</span>
            <span>Created {formatDate(article.createdAt)}</span>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          {article.status === 'editing' && (
            <Link
              to={`/teacher/articles/${article.articleName}/edit`}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              Edit Article
            </Link>
          )}
          
          <button
            onClick={() => setDeleteConfirm(true)}
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
          >
            Delete
          </button>
        </div>
      </div>

      {/* ADD THE AUDIO STATUS PANEL */}
      <AudioStatusPanel article={article} />

      {/* Status Card */}
      <div className={`p-4 rounded-lg border ${statusDisplay.bg} ${statusDisplay.text}`}>
        <div className="flex items-center space-x-3">
          <span className="text-2xl">{statusDisplay.icon}</span>
          <div>
            <div className="font-semibold">{statusDisplay.label}</div>
            <div className="text-sm opacity-90">{statusDisplay.description}</div>
            {article.processingError && (
              <div className="text-sm mt-1 font-mono bg-white bg-opacity-50 p-2 rounded">
                Error: {article.processingError}
              </div>
            )}
            
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Article Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Metadata */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Article Details</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-gray-700">Grade Level</label>
                <div className="mt-1 text-sm text-gray-900">
                  {article.metadata?.grade || 'Not specified'}
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Subject</label>
                <div className="mt-1 text-sm text-gray-900">
                  {article.metadata?.subject || 'Not specified'}
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Difficulty Level</label>
                <div className="mt-1">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {article.metadata?.difficulty || 'Not specified'}
                  </span>
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Estimated Time</label>
                <div className="mt-1 text-sm text-gray-900">
                  {article.metadata?.estimatedTime ? `${article.metadata.estimatedTime} minutes` : 'Auto-calculated'}
                </div>
              </div>
            </div>
          </div>

          {/* Original Text */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Original Text</h3>
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-700 leading-relaxed whitespace-pre-wrap">
                {article.originalText}
              </p>
            </div>
            <div className="mt-2 text-xs text-gray-500">
              {article.originalText.length} characters, {article.originalText.split(/\s+/).length} words
            </div>
          </div>

          {/* Sentences */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">
              Sentences ({article.sentences.length})
            </h3>
            <SentencePreview
              sentences={article.sentences.map((s:ISentence) => s.text)}
              articleName={article.articleName}
              showSentenceIds={true}
              editable={false}
            />
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Quick Stats */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Statistics</h3>
            
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Total Sentences:</span>
                <span className="text-sm font-medium">{article.sentences.length}</span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Avg Words/Sentence:</span>
                <span className="text-sm font-medium">
                  {Math.round(article.sentences.reduce((sum:number, s:ISentence) => sum + s.wordCount, 0) / article.sentences.length) || 0}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Long Sentences:</span>
                <span className="text-sm font-medium text-yellow-600">
                  {article.sentences.filter((s:ISentence) => s.isLong).length}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Ready Sentences:</span>
                <span className="text-sm font-medium text-green-600">
                  {article.sentences.filter((s:ISentence) => s.status === 'ready').length}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Has Audio:</span>
                <span className="text-sm font-medium">
                  {article.sentences.filter((s:ISentence) => s.individualAudioUrl).length}
                </span>
              </div>
            </div>
          </div>

          {/* Audio Files */}
          {article.fullAudioUrl && (
            <div className="bg-white p-6 rounded-lg shadow border">
              <h3 className="text-lg font-semibold mb-4">Audio Files</h3>
              
              <div className="space-y-3">
                <div>
                  <label className="text-sm font-medium text-gray-700">Full Article Audio:</label>
                  <div className="mt-1">
                    <audio controls className="w-full">
                      <source src={article.fullAudioUrl} type="audio/mpeg" />
                      Your browser does not support the audio element.
                    </audio>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Actions</h3>
            
            <div className="space-y-3">
              {article.status === 'ready' && (
                <button className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  Start Dictation Exercise
                </button>
              )}
              
              {article.status === 'editing' && (
                <Link
                  to={`/teacher/articles/${article.articleName}/edit`}
                  className="block w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-center"
                >
                  Continue Editing
                </Link>
              )}
              
              <div className="bg-white p-6 rounded-lg shadow border">
                <h3 className="text-lg font-semibold mb-4">Publishing</h3>
                <PublishControls 
                  article={article}
                  onStatusChange={() => {
                    // Optionally refresh data
                    queryClient.invalidateQueries({ queryKey: ['article', article.articleName] });
                  }}
                />
              </div>

              <button
                onClick={() => navigator.clipboard.writeText(article.articleName)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Copy Article Name
              </button>
              
              <button
                onClick={() => setDeleteConfirm(true)}
                className="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Delete Article
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      {deleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-2">Delete Article</h3>
            <p className="text-gray-600 mb-4">
              Are you sure you want to delete "{article.title}"? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setDeleteConfirm(false)}
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
                disabled={deleteArticleMutation.isPending}
              >
                Cancel
              </button>
              <button
                onClick={handleDelete}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50"
                disabled={deleteArticleMutation.isPending}
              >
                {deleteArticleMutation.isPending ? 'Deleting...' : 'Delete'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ArticleDetail;


// const AudioStatusPanel: React.FC<{ article: IArticle }> = ({ article }) => {
//   const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
//   const generateAudioMutation = useMutation({
//     mutationFn: (articleName: string) => apiGenerateAudio(articleName),
//   });

//   const queryClient = useQueryClient();

//   // This is where we USE the hook with real-time updates
//   const { 
//     data: audioStatus, 
//     // isLoading, 
//     error, 
//     dataUpdatedAt,
//     isRefetching 
//   } = useAudioStatus(
//     article.articleName, 
//     article.status === 'processing' || article.status === 'ready'
//   );

//   // Track when data updates to show real-time feedback
//   useEffect(() => {
//     if (dataUpdatedAt > lastUpdate.getTime()) {
//       setLastUpdate(new Date(dataUpdatedAt));
//     }
//   }, [dataUpdatedAt, lastUpdate]);

//   const handleGenerateAudio = async () => {
//     try {
//       await generateAudioMutation.mutateAsync(article.articleName);
//       // This will trigger the polling via the hook

//       queryClient.setQueryData<IArticle>(['article', article.articleName], 
//         prev => prev ? {...prev, status: 'processing', processingError: undefined} : prev);

//       queryClient.invalidateQueries({ queryKey: ['article', article.articleName] });

//     } catch (error) {
//       console.error('Failed to start audio generation:', error);
//     }
//   };

//   return (
//     <div className="bg-white rounded-lg shadow-sm border p-6">
//       <div className="flex items-center justify-between mb-4">
//         <h3 className="text-lg font-semibold">Audio Status</h3>
        
//         {/* REAL-TIME UPDATE INDICATOR */}
//         {isRefetching && (
//           <div className="flex items-center text-blue-600 text-sm">
//             <div className="animate-spin w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full mr-2"></div>
//             Checking status...
//           </div>
//         )}
//       </div>

//       {/* STATUS DISPLAY WITH REAL-TIME UPDATES */}
//       <div className="space-y-4">
        
//         {/* EDITING STATE */}
//         {article.status === 'editing' && (
//           <div className="space-y-3">
//             <div className="flex items-center p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
//               <div className="text-yellow-600 mr-3">⚠️</div>
//               <div>
//                 <p className="font-medium text-yellow-800">Ready to Generate Audio</p>
//                 <p className="text-sm text-yellow-700">Click below to create audio for student practice</p>
//               </div>
//             </div>
            
//             <button
//               onClick={handleGenerateAudio}
//               disabled={generateAudioMutation.isPending}
//               className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
//             >
//               {generateAudioMutation.isPending ? (
//                 <>
//                   <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
//                   Starting Generation...
//                 </>
//               ) : (
//                 'Generate Audio'
//               )}
//             </button>
//           </div>
//         )}

//         {/* PROCESSING STATE - REAL-TIME UPDATES */}
//         {article.status === 'processing' && (
//           <div className="space-y-3">
//             <div className="flex items-center p-3 bg-blue-50 border border-blue-200 rounded-lg">
//               <div className="text-blue-600 mr-3">
//                 <div className="animate-spin w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full"></div>
//               </div>
//               <div className="flex-1">
//                 <p className="font-medium text-blue-800">Generating Audio</p>
//                 <p className="text-sm text-blue-700">
//                   This usually takes 2-3 minutes. Status updates automatically.
//                 </p>
//               </div>
//             </div>
            
//             {/* REAL-TIME STATUS DETAILS */}
//             {audioStatus && (
//               <div className="bg-gray-50 p-3 rounded text-sm space-y-1">
//                 <div className="flex justify-between">
//                   <span className="text-gray-600">Last checked:</span>
//                   <span className="font-mono">{lastUpdate.toLocaleTimeString()}</span>
//                 </div>
//                 {audioStatus.audio?.totalFragments && (
//                   <div className="flex justify-between">
//                     <span className="text-gray-600">Fragments:</span>
//                     <span>{audioStatus.audio.totalFragments}</span>
//                   </div>
//                 )}
//               </div>
//             )}
            
//             {/* PROGRESS INDICATOR */}
//             <div className="w-full bg-gray-200 rounded-full h-2">
//               <div className="bg-blue-600 h-2 rounded-full animate-pulse" style={{ width: '60%' }}></div>
//             </div>
//           </div>
//         )}

//         {/* READY STATE - SUCCESS */}
//         {article.status === 'ready' && audioStatus && (
//           <div className="space-y-3">
//             <div className="flex items-center p-3 bg-green-50 border border-green-200 rounded-lg">
//               <div className="text-green-600 mr-3">✅</div>
//               <div>
//                 <p className="font-medium text-green-800">Audio Ready</p>
//                 <p className="text-sm text-green-700">Students can now practice this article</p>
//               </div>
//             </div>
            
//             {/* AUDIO PREVIEW */}
//             {audioStatus.audio?.fullAudioUrl && (
//               <div className="space-y-2">
//                 <label className="text-sm font-medium text-gray-700">Preview Audio:</label>
//                 <audio 
//                   controls 
//                   className="w-full" 
//                   src={audioStatus.audio.fullAudioUrl}
//                   preload="metadata"
//                 >
//                   Your browser does not support audio playback.
//                 </audio>
                
//                 <div className="flex justify-between text-xs text-gray-500">
//                   <span>Duration: {audioStatus.audio.totalDuration}s</span>
//                   <span>Fragments: {audioStatus.audio.totalFragments}</span>
//                   <span>Size: {Math.round((audioStatus.audio.audioSize || 0) / 1024)} KB</span>
//                 </div>
//               </div>
//             )}
//           </div>
//         )}

//         {/* ERROR STATE - DETAILED ERROR HANDLING */}
//         {(article.status === 'error' || error) && (
//           <div className="space-y-3">
//             <div className="flex items-start p-3 bg-red-50 border border-red-200 rounded-lg">
//               <div className="text-red-600 mr-3 mt-0.5">❌</div>
//               <div className="flex-1">
//                 <p className="font-medium text-red-800">Audio Generation Failed</p>
//                 <p className="text-sm text-red-700 mt-1">
//                   {article.processingError || error?.message || 'Unknown error occurred'}
//                 </p>
//               </div>
//             </div>
            
//             {/* RETRY BUTTON */}
//             <button
//               onClick={handleGenerateAudio}
//               disabled={generateAudioMutation.isPending}
//               className="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50"
//             >
//               Try Again
//             </button>
            
//             {/* NETWORK ERROR SPECIFIC HANDLING */}
//             {error && (
//               <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
//                 <p><strong>Debug Info:</strong></p>
//                 <p>Error: {error.message}</p>
//                 <p>Last attempt: {lastUpdate.toLocaleTimeString()}</p>
//               </div>
//             )}
//           </div>
//         )}
//       </div>
//     </div>
//   );
// };


const AudioStatusPanel: React.FC<{ article: IArticle }> = ({ article }) => {
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const generateAudioMutation = useMutation({
    mutationFn: (articleName: string) => apiGenerateAudio(articleName),
  });

  const queryClient = useQueryClient();

  // Real-time audio status monitoring
  const { 
    data: audioStatus, 
    error, 
    dataUpdatedAt,
    isRefetching 
  } = useAudioStatus(
    article.articleName, 
    article.status === 'processing' || article.status === 'ready'
  );

  // Track data updates for real-time feedback
  useEffect(() => {
    if (dataUpdatedAt > lastUpdate.getTime()) {
      setLastUpdate(new Date(dataUpdatedAt));
    }
  }, [dataUpdatedAt, lastUpdate]);

  // FIXED: Audio availability detection (not status-based)
  const hasAudio = audioStatus?.audio?.hasAudio || 
                   audioStatus?.audio?.totalFragments? audioStatus?.audio?.totalFragments:0 > 0 || 
                   Boolean(article.fullAudioUrl);

  // FIXED: Clear status logic
  const isEditing = article.status === 'editing';
  const isProcessing = article.status === 'processing';  
  const isPublished = article.status === 'ready'; // ONLY means published
  const isError = article.status === 'error';

  // FIXED: UI state logic
  const canGenerateAudio = isEditing && !hasAudio && !isProcessing;
  const hasAudioButNotPublished = isEditing && hasAudio && !isProcessing;
  const isPublishedForStudents = isPublished;

  const handleGenerateAudio = async () => {
    try {
      await generateAudioMutation.mutateAsync(article.articleName);
      
      // Update local cache to show processing state immediately
      queryClient.setQueryData<IArticle>(['article', article.articleName], 
        prev => prev ? {...prev, status: 'processing', processingError: undefined} : prev);

      queryClient.invalidateQueries({ queryKey: ['article', article.articleName] });
    } catch (error) {
      console.error('Failed to start audio generation:', error);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold">Audio Status</h3>
        
        {/* Real-time update indicator */}
        {isRefetching && (
          <div className="flex items-center text-blue-600 text-sm">
            <div className="animate-spin w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full mr-2"></div>
            Checking status...
          </div>
        )}
      </div>

      <div className="space-y-4">
        
        {/* EDITING STATE - NO AUDIO */}
        {canGenerateAudio && (
          <div className="space-y-3">
            <div className="flex items-center p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="text-yellow-600 mr-3">📝</div>
              <div>
                <p className="font-medium text-yellow-800">Ready to Generate Audio</p>
                <p className="text-sm text-yellow-700">Click below to create audio for student practice</p>
              </div>
            </div>
            
            <button
              onClick={handleGenerateAudio}
              disabled={generateAudioMutation.isPending}
              className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
            >
              {generateAudioMutation.isPending ? (
                <>
                  <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                  Starting Generation...
                </>
              ) : (
                'Generate Audio'
              )}
            </button>
          </div>
        )}

        {/* PROCESSING STATE - REAL-TIME UPDATES */}
        {isProcessing && (
          <div className="space-y-3">
            <div className="flex items-center p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="text-blue-600 mr-3">
                <div className="animate-spin w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full"></div>
              </div>
              <div className="flex-1">
                <p className="font-medium text-blue-800">Generating Audio</p>
                <p className="text-sm text-blue-700">
                  This usually takes 2-3 minutes. Status updates automatically.
                </p>
              </div>
            </div>
            
            {/* Real-time status details */}
            {audioStatus && (
              <div className="bg-gray-50 p-3 rounded text-sm space-y-1">
                <div className="flex justify-between">
                  <span className="text-gray-600">Last checked:</span>
                  <span className="font-mono">{lastUpdate.toLocaleTimeString()}</span>
                </div>
                {audioStatus.audio?.totalFragments && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Fragments:</span>
                    <span>{audioStatus.audio.totalFragments}</span>
                  </div>
                )}
              </div>
            )}
            
            {/* Progress indicator */}
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div className="bg-blue-600 h-2 rounded-full animate-pulse" style={{ width: '60%' }}></div>
            </div>
          </div>
        )}

        {/* EDITING STATE - HAS AUDIO (READY TO PUBLISH) */}
        {hasAudioButNotPublished && (
          <div className="space-y-3">
            <div className="flex items-center p-3 bg-green-50 border border-green-200 rounded-lg">
              <div className="text-green-600 mr-3">✅</div>
              <div>
                <p className="font-medium text-green-800">Audio Generated Successfully</p>
                <p className="text-sm text-green-700">Review the audio and publish when ready for students</p>
              </div>
            </div>
            
            {/* Audio preview */}
            {(audioStatus?.audio?.fullAudioUrl || article.fullAudioUrl) && (
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Preview Audio:</label>
                <audio 
                  controls 
                  className="w-full" 
                  src={audioStatus?.audio?.fullAudioUrl || article.fullAudioUrl!}
                  preload="metadata"
                >
                  Your browser does not support audio playback.
                </audio>
                
                <div className="flex justify-between text-xs text-gray-500">
                  <span>Duration: {audioStatus?.audio?.totalDuration || 'N/A'}s</span>
                  <span>Fragments: {audioStatus?.audio?.totalFragments || article.sentences.length}</span>
                  <span>Size: {Math.round((audioStatus?.audio?.audioSize || 0) / 1024)} KB</span>
                </div>
              </div>
            )}

            {/* Regenerate option */}
            <div className="flex space-x-2">
              <button
                onClick={handleGenerateAudio}
                disabled={generateAudioMutation.isPending}
                className="flex-1 px-3 py-2 border border-blue-300 text-blue-700 rounded-lg hover:bg-blue-50 disabled:opacity-50 text-sm"
              >
                Regenerate Audio
              </button>
            </div>
          </div>
        )}

        {/* PUBLISHED STATE - FOR STUDENTS */}
        {isPublishedForStudents && (
          <div className="space-y-3">
            <div className="flex items-center p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="text-blue-600 mr-3">🎯</div>
              <div>
                <p className="font-medium text-blue-800">Published for Students</p>
                <p className="text-sm text-blue-700">Students can now access and practice this article</p>
              </div>
            </div>
            
            {/* Published audio info */}
            {(audioStatus?.audio?.fullAudioUrl || article.fullAudioUrl) && (
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Published Audio:</label>
                <audio 
                  controls 
                  className="w-full" 
                  src={audioStatus?.audio?.fullAudioUrl || article.fullAudioUrl!}
                  preload="metadata"
                >
                  Your browser does not support audio playback.
                </audio>
                
                <div className="flex justify-between text-xs text-gray-500">
                  <span>Duration: {audioStatus?.audio?.totalDuration || 'N/A'}s</span>
                  <span>Fragments: {audioStatus?.audio?.totalFragments || article.sentences.length}</span>
                  <span>Available to students</span>
                </div>
              </div>
            )}
          </div>
        )}

        {/* ERROR STATE - DETAILED ERROR HANDLING */}
        {(isError || error) && (
          <div className="space-y-3">
            <div className="flex items-start p-3 bg-red-50 border border-red-200 rounded-lg">
              <div className="text-red-600 mr-3 mt-0.5">❌</div>
              <div className="flex-1">
                <p className="font-medium text-red-800">Audio Generation Failed</p>
                <p className="text-sm text-red-700 mt-1">
                  {article.processingError || error?.message || 'Unknown error occurred'}
                </p>
              </div>
            </div>
            
            {/* Retry button */}
            <button
              onClick={handleGenerateAudio}
              disabled={generateAudioMutation.isPending}
              className="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50"
            >
              Try Again
            </button>
            
            {/* Debug info for errors */}
            {error && (
              <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
                <p><strong>Debug Info:</strong></p>
                <p>Error: {error.message}</p>
                <p>Last attempt: {lastUpdate.toLocaleTimeString()}</p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};




C:\Users\User\Desktop\jink-demo\src\pages\teacher\ArticleEdit.tsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { validateFragments, FragmentEditor } from '../../utils/sentenceFragmentSplitter';
import SentencePreview from '../../components/articles/SentencePreview';
import { useArticle, useUpdateArticleMetadata, useUpdateArticleSentences } from '../../hooks/useArticles';
import type { UpdateArticleRequest, UpdateSentencesRequest } from '../../types/article.types';

interface ArticleEditFormData {
  title: string;
  grade: string;
  subject: string;
  difficulty: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
}

const ArticleEdit: React.FC = () => {
  const { articleName } = useParams<{ articleName: string }>();
  const navigate = useNavigate();
  
  const { data: article, isLoading, error } = useArticle(articleName!);
  const updateMetadataMutation = useUpdateArticleMetadata();
  const updateSentencesMutation = useUpdateArticleSentences();

  const [currentTab, setCurrentTab] = useState<'metadata' | 'fragments'>('metadata');
  const [formData, setFormData] = useState<ArticleEditFormData>({
    title: '',
    grade: '',
    subject: '',
    difficulty: 'A1'
  });
  
  const [fragments, setFragments] = useState<string[]>([]);
  const [fragmentEditor, setFragmentEditor] = useState<FragmentEditor | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  // Initialize form data when article loads
  useEffect(() => {
    if (article) {
      setFormData({
        title: article.title,
        grade: article.metadata?.grade || '',
        subject: article.metadata?.subject || '',
        difficulty: article.metadata?.difficulty || 'A1'
      });
      
      const sentenceTexts = article.sentences
        .sort((a, b) => a.order - b.order)
        .map(s => s.text);
      
      setFragments(sentenceTexts);
      setFragmentEditor(new FragmentEditor(sentenceTexts));
    }
  }, [article]);

  const handleInputChange = (field: keyof ArticleEditFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setHasUnsavedChanges(true);
  };

  const handleSplitFragment = (index: number, position: number) => {
    if (!fragmentEditor) return;
    
    try {
      const newFragments = fragmentEditor.split(fragments, index, position);
      setFragments(newFragments);
      setHasUnsavedChanges(true);
      console.log(`Split fragment ${index} at position ${position}`);
    } catch (error) {
      console.error('Error splitting fragment:', error);
    }
  };

  const handleMergeFragments = (index: number) => {
    if (!fragmentEditor) return;
    
    try {
      const newFragments = fragmentEditor.merge(fragments, index);
      setFragments(newFragments);
      setHasUnsavedChanges(true);
      console.log(`Merged fragments ${index} and ${index + 1}`);
    } catch (error) {
      console.error('Error merging fragments:', error);
    }
  };

  const handleEditFragment = (index: number, newText: string) => {
    if (!fragmentEditor) return;
    
    try {
      const newFragments = fragmentEditor.edit(fragments, index, newText);
      setFragments(newFragments);
      setHasUnsavedChanges(true);
      console.log(`Edited fragment ${index}`);
    } catch (error) {
      console.error('Error editing fragment:', error);
    }
  };

  const handleUndo = () => {
    if (!fragmentEditor) return;
    
    const undoFragments = fragmentEditor.undo();
    if (undoFragments) {
      setFragments(undoFragments);
      setHasUnsavedChanges(true);
      console.log('Undid last operation');
    }
  };

  const handleRedo = () => {
    if (!fragmentEditor) return;
    
    const redoFragments = fragmentEditor.redo();
    if (redoFragments) {
      setFragments(redoFragments);
      setHasUnsavedChanges(true);
      console.log('Redid operation');
    }
  };

  const handleSaveMetadata = async () => {
    if (!article || !articleName) return;

    try {
      const updateData: UpdateArticleRequest = {
        title: formData.title.trim(),
        metadata: {
          grade: formData.grade.trim() || undefined,
          subject: formData.subject.trim() || undefined,
          difficulty: formData.difficulty,
          estimatedTime: Math.ceil(fragments.length * 1.5)
        }
      };

      await updateMetadataMutation.mutateAsync({ articleName, updateData });
      setHasUnsavedChanges(false);
      alert('Article metadata updated successfully!');
    } catch (error: any) {
      console.error('Failed to update metadata:', error);
      alert(`Failed to update metadata: ${error.message || 'Unknown error'}`);
    }
  };

  const handleSaveFragments = async () => {
    if (!article || !articleName) return;

    try {
      const sentencesData: UpdateSentencesRequest = {
        sentences: fragments.map((text, index) => ({
          order: index + 1,
          text: text.trim(),
          wordCount: text.trim().split(/\s+/).filter(w => w.length > 0).length,
          isLong: text.trim().split(/\s+/).filter(w => w.length > 0).length > 15
        }))
      };

      await updateSentencesMutation.mutateAsync({ articleName, sentences: sentencesData });
      setHasUnsavedChanges(false);
      alert('Article fragments updated successfully!');
    } catch (error: any) {
      console.error('Failed to update fragments:', error);
      alert(`Failed to update fragments: ${error.message || 'Unknown error'}`);
    }
  };

  const handleCancel = () => {
    if (hasUnsavedChanges) {
      if (!confirm('You have unsaved changes. Are you sure you want to leave?')) {
        return;
      }
    }
    navigate(`/teacher/articles/${articleName}`);
  };

  if (isLoading) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-2 text-gray-600">Loading article...</span>
        </div>
      </div>
    );
  }

  if (error || !article) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="text-center py-12">
          <div className="text-red-600 mb-4">Article not found</div>
          <button 
            onClick={() => navigate('/teacher/articles')}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Articles
          </button>
        </div>
      </div>
    );
  }

  const validation = validateFragments(fragments);

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="mb-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Edit Article</h1>
            <p className="text-gray-600 mt-1">
              Editing: <span className="font-mono text-sm bg-gray-100 px-2 py-1 rounded">{article.articleName}</span>
            </p>
          </div>
          
          <div className="flex items-center space-x-3">
            <button
              onClick={handleCancel}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
          </div>
        </div>

        {hasUnsavedChanges && (
          <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <p className="text-yellow-800 text-sm">
              ⚠️ You have unsaved changes. Don't forget to save your work!
            </p>
          </div>
        )}
      </div>

      {/* Tab Navigation */}
      <div className="mb-6">
        <nav className="flex space-x-8">
          <button
            onClick={() => setCurrentTab('metadata')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              currentTab === 'metadata'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Article Details
          </button>
          <button
            onClick={() => setCurrentTab('fragments')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              currentTab === 'fragments'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Edit Fragments ({fragments.length})
          </button>
        </nav>
      </div>

      {/* Tab Content */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        
        {/* Metadata Tab */}
        {currentTab === 'metadata' && (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold">Article Details</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Article Name (Read-only)
                </label>
                <input
                  type="text"
                  value={article.articleName}
                  disabled
                  className="w-full p-3 border border-gray-300 rounded-md bg-gray-50 text-gray-500"
                />
                <p className="text-xs text-gray-500 mt-1">Article name cannot be changed after creation</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Article Title *
                </label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Climate Change Impact on Australia"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Grade Level
                </label>
                <input
                  type="text"
                  value={formData.grade}
                  onChange={(e) => handleInputChange('grade', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Grade 9, University, Adult"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Subject
                </label>
                <input
                  type="text"
                  value={formData.subject}
                  onChange={(e) => handleInputChange('subject', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., English, Science, History"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  CEFR Difficulty Level *
                </label>
                <select
                  value={formData.difficulty}
                  onChange={(e) => handleInputChange('difficulty', e.target.value as any)}
                  className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="A1">A1 - Beginner</option>
                  <option value="A2">A2 - Elementary</option>
                  <option value="B1">B1 - Intermediate</option>
                  <option value="B2">B2 - Upper Intermediate</option>
                  <option value="C1">C1 - Advanced</option>
                  <option value="C2">C2 - Proficient</option>
                </select>
              </div>
            </div>

            <div className="pt-4 border-t">
              <button
                onClick={handleSaveMetadata}
                disabled={updateMetadataMutation.isPending}
                className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
              >
                {updateMetadataMutation.isPending ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Saving...
                  </>
                ) : (
                  'Save Metadata'
                )}
              </button>
            </div>
          </div>
        )}

        {/* Fragments Tab */}
        {currentTab === 'fragments' && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Edit Fragments</h2>
              
              <div className="flex items-center space-x-3">
                <button
                  onClick={handleUndo}
                  disabled={!fragmentEditor?.canUndo()}
                  className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed text-gray-700 rounded transition-colors"
                >
                  ↶ Undo
                </button>
                <button
                  onClick={handleRedo}
                  disabled={!fragmentEditor?.canRedo()}
                  className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed text-gray-700 rounded transition-colors"
                >
                  ↷ Redo
                </button>
              </div>
            </div>

            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="font-medium text-blue-900 mb-2">Fragment Statistics</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <span className="text-blue-700">Total:</span>
                  <span className="ml-1 font-medium">{validation.totalFragments}</span>
                </div>
                <div>
                  <span className="text-blue-700">Average words:</span>
                  <span className="ml-1 font-medium">{validation.averageWordCount}</span>
                </div>
                <div>
                  <span className="text-blue-700">Too long:</span>
                  <span className="ml-1 font-medium text-red-600">{validation.longFragments}</span>
                </div>
                <div>
                  <span className="text-blue-700">Too short:</span>
                  <span className="ml-1 font-medium text-orange-600">{validation.shortFragments}</span>
                </div>
              </div>
            </div>

            <SentencePreview
              sentences={fragments}
              articleName={article.articleName}
              showSentenceIds={false}
              editable={true}
              onSplit={handleSplitFragment}
              onMerge={handleMergeFragments}
              onEdit={handleEditFragment}
            />

            <div className="pt-4 border-t">
              <button
                onClick={handleSaveFragments}
                disabled={updateSentencesMutation.isPending}
                className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
              >
                {updateSentencesMutation.isPending ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Saving...
                  </>
                ) : (
                  'Save Fragments'
                )}
              </button>
            </div>
          </div>
        )}

        {/* Error Display */}
        {(updateMetadataMutation.isError || updateSentencesMutation.isError) && (
          <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-700 text-sm">
              <strong>Error:</strong> {
                (updateMetadataMutation.error as Error)?.message || 
                (updateSentencesMutation.error as Error)?.message || 
                'Failed to save changes'
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ArticleEdit;

C:\Users\User\Desktop\jink-demo\src\pages\teacher\ArticleList.tsx

// src/pages/teacher/ArticleList.tsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useArticles, useDeleteArticle, useArticleStats } from '../../hooks/useArticles';
import type { IArticle } from '../../types/article.types';
import PublishControls from '../../components/teacher/PublishControls';
import { useQueryClient } from '@tanstack/react-query';

const ArticleList: React.FC = () => {
  // const navigate = useNavigate();
  const { data: articles, isLoading, error, refetch } = useArticles();
  const { data: stats } = useArticleStats();
  const deleteArticleMutation = useDeleteArticle();
  const queryClient = useQueryClient();
  
  const [deleteConfirm, setDeleteConfirm] = useState<{
    isOpen: boolean;
    article: IArticle | null;
  }>({ isOpen: false, article: null });

  const handleDeleteClick = (article: IArticle) => {
    setDeleteConfirm({ isOpen: true, article });
  };

  const handleDeleteConfirm = async () => {
    if (deleteConfirm.article) {
      try {
        await deleteArticleMutation.mutateAsync(deleteConfirm.article.articleName);
        setDeleteConfirm({ isOpen: false, article: null });
        refetch();
      } catch (error) {
        console.error('Failed to delete article:', error);
        alert('Failed to delete article. Please try again.');
      }
    }
  };

  const getStatusBadge = (status: IArticle['status']) => {
    const statusConfig = {
      editing: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'Editing' },
      processing: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Processing' },
      ready: { bg: 'bg-green-100', text: 'text-green-800', label: 'Ready' },
      error: { bg: 'bg-red-100', text: 'text-red-800', label: 'Error' }
    };
    
    const config = statusConfig[status];
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    );
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  if (isLoading) {
    return (
      <div className="max-w-7xl mx-auto p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-2 text-gray-600">Loading articles...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-7xl mx-auto p-6">
        <div className="text-center py-12">
          <div className="text-red-600 mb-4">Failed to load articles</div>
          <button
            onClick={() => refetch()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">My Articles</h1>
          <p className="text-gray-600 mt-1">Manage your dictation exercises</p>
        </div>
        
        <Link
          to="/teacher/articles/create"
          className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
          Create Article
        </Link>
      </div>

      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-gray-900">{stats.total}</div>
            <div className="text-sm text-gray-600">Total Articles</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-green-600">{stats.byStatus.ready || 0}</div>
            <div className="text-sm text-gray-600">Ready</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-yellow-600">{stats.byStatus.editing || 0}</div>
            <div className="text-sm text-gray-600">Editing</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow border">
            <div className="text-2xl font-bold text-blue-600">{stats.byStatus.processing || 0}</div>
            <div className="text-sm text-gray-600">Processing</div>
          </div>
        </div>
      )}

      {/* Articles List */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        {!articles || articles.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-gray-500 mb-4">
              <svg className="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <p className="text-lg font-medium">No articles yet</p>
              <p className="text-sm">Create your first dictation exercise to get started</p>
            </div>
            <Link
              to="/teacher/articles/create"
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Create First Article
            </Link>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Article
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Details
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Created
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {articles.map((article:IArticle) => (
                  <tr key={article.articleName} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900 mb-1">
                          {article.title}
                        </div>
                        <div className="text-xs font-mono text-blue-600 bg-blue-50 px-2 py-1 rounded inline-block">
                          {article.articleName}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        <div>{article.sentences.length} sentences</div>
                        <div className="text-xs text-gray-500">
                          {article.metadata?.grade && `${article.metadata.grade} • `}
                          {article.metadata?.subject && `${article.metadata.subject} • `}
                          {article.metadata?.difficulty}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(article.status)}
                      {article.processingError && (
                        <div className="text-xs text-red-600 mt-1" title={article.processingError}>
                          Error occurred
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(article.createdAt)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          to={`/teacher/articles/${article.articleName}`}
                          className="text-blue-600 hover:text-blue-800 transition-colors"
                        >
                          View
                        </Link>
                        {article.status === 'editing' && (
                          <Link
                            to={`/teacher/articles/${article.articleName}/edit`}
                            className="text-green-600 hover:text-green-800 transition-colors"
                          >
                            Edit
                          </Link>
                        )}
                        <button
                          onClick={() => handleDeleteClick(article)}
                          className="text-red-600 hover:text-red-800 transition-colors"
                        >
                          Delete
                        </button>
                        <div className="mt-4">
                          <PublishControls 
                            article={article}
                            onStatusChange={() => {
                              // Refresh the articles list
                              queryClient.invalidateQueries({ queryKey: ['articles'] });
                            }}
                          />
                        </div>

                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Delete Confirmation Modal */}
      {deleteConfirm.isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-2">Delete Article</h3>
            <p className="text-gray-600 mb-4">
              Are you sure you want to delete "{deleteConfirm.article?.title}"? 
              This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setDeleteConfirm({ isOpen: false, article: null })}
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
                disabled={deleteArticleMutation.isPending}
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteConfirm}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50"
                disabled={deleteArticleMutation.isPending}
              >
                {deleteArticleMutation.isPending ? 'Deleting...' : 'Delete'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ArticleList;

C:\Users\User\Desktop\jink-demo\src\pages\teacher\ArticleUpload.tsx

import React, { useState, useEffect } from 'react';
import { splitIntoSentenceFragments, validateFragments, FragmentEditor } from '../../utils/sentenceFragmentSplitter';
import SentencePreview from '../../components/articles/SentencePreview';
import { useCreateArticle } from '../../hooks/useArticles';
import type { CreateArticleRequest } from '../../types/article.types';
import { useNavigate } from 'react-router-dom';

interface ArticleFormData {
  articleName: string;
  title: string;
  originalText: string;
  grade: string;
  subject: string;
  difficulty: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
}

const ArticleUpload: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<ArticleFormData>({
    articleName: '',
    title: '',
    originalText: '',
    grade: '',
    subject: '',
    difficulty: 'A1'
  });
  
  const [fragments, setFragments] = useState<string[]>([]);
  const [fragmentEditor, setFragmentEditor] = useState<FragmentEditor | null>(null);
  const [isGeneratingFragments, setIsGeneratingFragments] = useState(false);

  const createArticleMutation = useCreateArticle();

  const navigate = useNavigate();
  
  // Auto-generate fragments when originalText changes
  useEffect(() => {
    if (formData.originalText.trim().length > 0) {
      setIsGeneratingFragments(true);
      
      // Debounce fragment generation
      const timeoutId = setTimeout(() => {
        try {
          const newFragments = splitIntoSentenceFragments(formData.originalText);
          setFragments(newFragments);
          setFragmentEditor(new FragmentEditor(newFragments));
          console.log('Generated fragments:', newFragments);
        } catch (error) {
          console.error('Error generating fragments:', error);
        } finally {
          setIsGeneratingFragments(false);
        }
      }, 500);

      return () => clearTimeout(timeoutId);
    } else {
      setFragments([]);
      setFragmentEditor(null);
      setIsGeneratingFragments(false);
    }
  }, [formData.originalText]);

  // Auto-generate article name from title
  useEffect(() => {
    if (formData.title.trim().length > 0 && !formData.articleName) {
      const suggestedName = formData.title
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .substring(0, 40)
        .replace(/-+$/, '');
      
      setFormData(prev => ({ ...prev, articleName: suggestedName }));
    }
  }, [formData.title, formData.articleName]);

  const handleInputChange = (field: keyof ArticleFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSplitFragment = (index: number, position: number) => {
    if (!fragmentEditor) return;
    
    try {
      const newFragments = fragmentEditor.split(fragments, index, position);
      setFragments(newFragments);
      console.log(`Split fragment ${index} at position ${position}`);
    } catch (error) {
      console.error('Error splitting fragment:', error);
    }
  };

  const handleMergeFragments = (index: number) => {
    if (!fragmentEditor) return;
    
    try {
      const newFragments = fragmentEditor.merge(fragments, index);
      setFragments(newFragments);
      console.log(`Merged fragments ${index} and ${index + 1}`);
    } catch (error) {
      console.error('Error merging fragments:', error);
    }
  };

  const handleEditFragment = (index: number, newText: string) => {
    if (!fragmentEditor) return;
    
    try {
      const newFragments = fragmentEditor.edit(fragments, index, newText);
      setFragments(newFragments);
      console.log(`Edited fragment ${index}`);
    } catch (error) {
      console.error('Error editing fragment:', error);
    }
  };

  const handleUndo = () => {
    if (!fragmentEditor) return;
    
    const undoFragments = fragmentEditor.undo();
    if (undoFragments) {
      setFragments(undoFragments);
      console.log('Undid last operation');
    }
  };

  const handleRedo = () => {
    if (!fragmentEditor) return;
    
    const redoFragments = fragmentEditor.redo();
    if (redoFragments) {
      setFragments(redoFragments);
      console.log('Redid operation');
    }
  };

  const validateStep = (step: number): boolean => {
    switch (step) {
      case 1:
        return formData.originalText.trim().length >= 20 && 
               formData.originalText.trim().length <= 1500;
      case 2:
        return fragments.length > 0 && fragments.length <= 30;
      case 3:
        return formData.articleName.trim().length >= 3 && 
               formData.title.trim().length >= 3;
      default:
        return false;
    }
  };

  const handleNextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 3));
    }
  };

  const handlePrevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleSubmit = async () => {
    if (!validateStep(3) || fragments.length === 0) {
      alert('Please complete all required fields and ensure you have fragments.');
      return;
    }

    try {
      // Prepare the payload according to the backend API structure
      const payload: CreateArticleRequest = {
        articleName: formData.articleName.trim(),
        title: formData.title.trim(),
        originalText: formData.originalText.trim(),
        metadata: {
          grade: formData.grade.trim() || undefined,
          subject: formData.subject.trim() || undefined,
          difficulty: formData.difficulty,
          estimatedTime: Math.ceil(fragments.length * 1.5) // Rough estimate: 1.5 min per fragment
        },
        sentences: fragments.map((text, index) => ({
          order: index + 1,
          text: text.trim(),
          wordCount: text.trim().split(/\s+/).filter(w => w.length > 0).length,
          isLong: text.trim().split(/\s+/).filter(w => w.length > 0).length > 15
        }))
      };

      console.log('Submitting article with payload:', payload);
      
      const result = await createArticleMutation.mutateAsync(payload);
      
      alert(`Article "${result.article.title}" created successfully!`);
      
      // Reset form
      setFormData({
        articleName: '',
        title: '',
        originalText: '',
        grade: '',
        subject: '',
        difficulty: 'A1'
      });
      setFragments([]);
      setFragmentEditor(null);
      setCurrentStep(1);
      navigate('/teacher/articles'); // Redirect to articles list
      
    } catch (error: any) {
      console.error('Failed to create article:', error);
      alert(`Failed to create article: ${error.message || 'Unknown error'}`);
    }
  };

  const validation = validateFragments(fragments);
  const wordCount = formData.originalText.trim().split(/\s+/).filter(w => w.length > 0).length;

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-gray-900 mb-8">Create New Article</h1>
      
      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center justify-center space-x-8">
          {[1, 2, 3].map((step) => (
            <div key={step} className="flex items-center">
              <div className={`
                w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium
                ${currentStep >= step 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-500'}
              `}>
                {step}
              </div>
              <span className={`ml-2 text-sm ${currentStep >= step ? 'text-blue-600' : 'text-gray-500'}`}>
                {step === 1 && 'Enter Text'}
                {step === 2 && 'Review Fragments'}
                {step === 3 && 'Article Details'}
              </span>
              {step < 3 && (
                <div className={`w-16 h-0.5 ml-4 ${currentStep > step ? 'bg-blue-600' : 'bg-gray-200'}`} />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        
        {/* Step 1: Text Input */}
        {currentStep === 1 && (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold">Step 1: Enter Article Text</h2>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Article Text *
              </label>
              <textarea
                value={formData.originalText}
                onChange={(e) => handleInputChange('originalText', e.target.value)}
                className="w-full h-64 p-4 border border-gray-300 rounded-md resize-none
                         focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Paste or type your article text here... (20-1500 words)"
              />
              <div className="flex justify-between text-sm text-gray-500 mt-2">
                <span>
                  {wordCount} words 
                  {isGeneratingFragments && ' (Generating fragments...)'}
                </span>
                <span className={
                  wordCount < 20 ? 'text-red-500' :
                  wordCount > 1500 ? 'text-red-500' :
                  'text-green-500'
                }>
                  {wordCount < 20 && 'Too short (minimum 20 words)'}
                  {wordCount > 1500 && 'Too long (maximum 1500 words)'}
                  {wordCount >= 20 && wordCount <= 1500 && 'Good length'}
                </span>
              </div>
            </div>

            {fragments.length > 0 && (
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-medium text-blue-900 mb-2">Fragment Preview</h3>
                <p className="text-sm text-blue-700">
                  Generated {fragments.length} fragments. Click "Next" to review and edit them.
                </p>
              </div>
            )}
          </div>
        )}

        {/* Step 2: Fragment Review */}
        {currentStep === 2 && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Step 2: Review & Edit Fragments</h2>
              
              <div className="flex items-center space-x-3">
                <button
                  onClick={handleUndo}
                  disabled={!fragmentEditor?.canUndo()}
                  className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 
                           disabled:opacity-50 disabled:cursor-not-allowed
                           text-gray-700 rounded transition-colors"
                >
                  ↶ Undo
                </button>
                <button
                  onClick={handleRedo}
                  disabled={!fragmentEditor?.canRedo()}
                  className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 
                           disabled:opacity-50 disabled:cursor-not-allowed
                           text-gray-700 rounded transition-colors"
                >
                  ↷ Redo
                </button>
              </div>
            </div>

            <div className="bg-yellow-50 p-4 rounded-lg">
              <h3 className="font-medium text-yellow-900 mb-2">Fragment Statistics</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <span className="text-yellow-700">Total:</span>
                  <span className="ml-1 font-medium">{validation.totalFragments}</span>
                </div>
                <div>
                  <span className="text-yellow-700">Average words:</span>
                  <span className="ml-1 font-medium">{validation.averageWordCount}</span>
                </div>
                <div>
                  <span className="text-yellow-700">Too long:</span>
                  <span className="ml-1 font-medium text-red-600">{validation.longFragments}</span>
                </div>
                <div>
                  <span className="text-yellow-700">Too short:</span>
                  <span className="ml-1 font-medium text-orange-600">{validation.shortFragments}</span>
                </div>
              </div>
            </div>

            <SentencePreview
              sentences={fragments}
              articleName={formData.articleName || 'preview'}
              showSentenceIds={false}
              editable={true}
              onSplit={handleSplitFragment}
              onMerge={handleMergeFragments}
              onEdit={handleEditFragment}
            />
          </div>
        )}

        {/* Step 3: Article Details */}
        {currentStep === 3 && (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold">Step 3: Article Details</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Article Name * (URL-friendly)
                </label>
                <input
                  type="text"
                  value={formData.articleName}
                  onChange={(e) => handleInputChange('articleName', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md
                           focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., climate-change-news-2024"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Article Title *
                </label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md
                           focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Climate Change Impact on Australia"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Grade Level
                </label>
                <input
                  type="text"
                  value={formData.grade}
                  onChange={(e) => handleInputChange('grade', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md
                           focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Grade 9, University, Adult"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Subject
                </label>
                <input
                  type="text"
                  value={formData.subject}
                  onChange={(e) => handleInputChange('subject', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-md
                           focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., English, Science, History"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  CEFR Difficulty Level *
                </label>
                <select
                  value={formData.difficulty}
                  onChange={(e) => handleInputChange('difficulty', e.target.value as any)}
                  className="w-full p-3 border border-gray-300 rounded-md
                           focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="A1">A1 - Beginner</option>
                  <option value="A2">A2 - Elementary</option>
                  <option value="B1">B1 - Intermediate</option>
                  <option value="B2">B2 - Upper Intermediate</option>
                  <option value="C1">C1 - Advanced</option>
                  <option value="C2">C2 - Proficient</option>
                </select>
              </div>
            </div>

            <div className="bg-green-50 p-4 rounded-lg">
              <h3 className="font-medium text-green-900 mb-2">Ready to Create</h3>
              <p className="text-sm text-green-700">
                Article with {fragments.length} fragments ready for creation. 
                Estimated time: {Math.ceil(fragments.length * 1.5)} minutes.
              </p>
            </div>
          </div>
        )}

        {/* Navigation */}
        <div className="flex justify-between items-center mt-8 pt-6 border-t">
          <button
            onClick={handlePrevStep}
            disabled={currentStep === 1}
            className="px-6 py-2 border border-gray-300 text-gray-700 rounded-md
                     hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed
                     transition-colors"
          >
            Previous
          </button>

          {currentStep < 3 ? (
            <button
              onClick={handleNextStep}
              disabled={!validateStep(currentStep)}
              className="px-6 py-2 bg-blue-600 text-white rounded-md
                       hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed
                       transition-colors"
            >
              Next
            </button>
          ) : (
            <button
              onClick={handleSubmit}
              disabled={!validateStep(3) || createArticleMutation.isPending}
              className="px-6 py-2 bg-green-600 text-white rounded-md
                       hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed
                       transition-colors flex items-center"
            >
              {createArticleMutation.isPending ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Creating...
                </>
              ) : (
                'Create Article'
              )}
            </button>
          )}
        </div>

        {/* Error Display */}
        {createArticleMutation.isError && (
          <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-700 text-sm">
              <strong>Error:</strong> {(createArticleMutation.error as Error)?.message || 'Failed to create article'}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ArticleUpload;

C:\Users\User\Desktop\jink-demo\src\pages\teacher\index.ts

// src/pages/teacher/index.ts

// Export all teacher-related components for easy importing
export { default as TeacherDashboard } from './TeacherDashboard';
export { default as ArticleUpload } from './ArticleUpload';
export { default as ArticleList } from './ArticleList';
export { default as ArticleDetail } from './ArticleDetail';

// Re-export article components for convenience
export * from '../../components/articles/TextInput';
export * from '../../components/articles/SentencePreview';
export * from '../../components/articles/ArticleNameInput';

C:\Users\User\Desktop\jink-demo\src\pages\teacher\StudentAnalytics.tsx

// src/pages/teacher/StudentAnalytics.tsx
import React from 'react';
import StudentProgressDashboard from '../../components/teacher/StudentProgressDashboard';

const StudentAnalytics: React.FC = () => {
  return (
    <div className="p-6 max-w-7xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Student Progress</h1>
      <StudentProgressDashboard />
    </div>
  );
};

export default StudentAnalytics;


C:\Users\User\Desktop\jink-demo\src\pages\teacher\TeacherAnalytics.tsx

import React from 'react';
import { Link } from 'react-router-dom';
import { useStudentsProgress } from '../../hooks/useStudentsProgress';
import {LoadingSpinner} from '../../components/common/LoadingSpinner';
import ClassStatisticsCard from '../../components/teacher/ClassStatisticsCard';
import StudentProgressList from '../../components/teacher/StudentProgressList';
import AnalyticsPlaceholders from '../../components/teacher/AnalyticsPlaceholders';

const TeacherAnalytics: React.FC = () => {
  const { data: studentsData, isLoading, error } = useStudentsProgress();

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner message="Loading class analytics..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-red-600 mb-4">⚠️</div>
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">
            Unable to Load Analytics
          </h2>
          <p className="text-gray-600 mb-4">
            {error.message || 'Something went wrong'}
          </p>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  const students = studentsData?.students || [];

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Class Analytics</h1>
          <p className="text-gray-600 mt-2">
            Monitor student progress and engagement across all activities
          </p>
        </div>
        <Link
          to="/teacher/articles"
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Manage Articles
        </Link>
      </div>

      {/* Class Statistics */}
      <ClassStatisticsCard students={students} />

      {/* Student Progress List */}
      <div className="bg-white rounded-lg shadow-sm border">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Student Progress</h2>
        </div>
        <StudentProgressList students={students} />
      </div>

      {/* Disabled Placeholders */}
      <AnalyticsPlaceholders />
    </div>
  );
};

export default TeacherAnalytics;


C:\Users\User\Desktop\jink-demo\src\pages\teacher\TeacherDashboard.tsx

import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { useArticles, useArticleStats } from '../../hooks/useArticles';
import { useAudioStatus } from '../../hooks/useAudioStatus';
import type { IArticle } from '../../types/article.types';

// Standalone status badge with audio awareness
const ArticleStatusBadge: React.FC<{ article: IArticle }> = ({ article }) => {
  const { data: audioStatus } = useAudioStatus(
    article.articleName,
    article.status === 'processing' || article.status === 'ready'
  );

  const hasAudio =
    audioStatus?.audio?.hasAudio ||
    (audioStatus?.audio?.totalFragments ?? 0) > 0 ||
    Boolean(article.fullAudioUrl);

  const getStatusConfig = () => {
    if (article.status === 'processing') {
      return { bg: 'bg-blue-100', text: 'text-blue-800', label: '🔄 Generating Audio', title: 'Audio being processed' };
    }
    if (article.status === 'error') {
      return { bg: 'bg-red-100', text: 'text-red-800', label: '❌ Generation Failed', title: 'Audio generation error' };
    }
    if (article.status === 'editing') {
      if (hasAudio) {
        return { bg: 'bg-green-100', text: 'text-green-800', label: '✅ Ready to Publish', title: 'Audio generated, can publish' };
      }
      return { bg: 'bg-yellow-100', text: 'text-yellow-800', label: '📝 Draft', title: 'Needs audio generation' };
    }
    if (article.status === 'ready') {
      return { bg: 'bg-blue-100', text: 'text-blue-800', label: '🎯 Published', title: 'Available to students' };
    }
    return { bg: 'bg-gray-100', text: 'text-gray-800', label: article.status, title: '' };
  };

  const config = getStatusConfig();

  return (
    <span
      className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text}`}
      title={config.title}
    >
      {config.label}
    </span>
  );
};

// Row for recent articles list
const ArticleRow: React.FC<{ article: IArticle }> = ({ article }) => {
  const { data: audioStatus } = useAudioStatus(
    article.articleName,
    article.status === 'processing' || article.status === 'ready'
  );

  const hasAudio =
    audioStatus?.audio?.hasAudio ||
    (audioStatus?.audio?.totalFragments ?? 0) > 0 ||
    Boolean(article.fullAudioUrl);

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  return (
    <div className="p-6 hover:bg-gray-50 transition-colors">
      <div className="flex items-center justify-between">
        <div className="flex-1 min-w-0">
          <div className="flex items-center space-x-2 mb-1">
            <h4 className="text-sm font-medium text-gray-900 truncate">{article.title}</h4>
            <ArticleStatusBadge article={article} />
          </div>
          <div className="flex items-center space-x-4 text-xs text-gray-500">
            <span className="font-mono bg-gray-100 px-2 py-1 rounded">{article.articleName}</span>
            <span>{article.sentences.length} sentences</span>
            {article.metadata?.difficulty && (
              <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded">
                {article.metadata.difficulty}
              </span>
            )}
            <span>Created {formatDate(article.createdAt)}</span>
          </div>
        </div>

        <div className="flex items-center space-x-2 ml-4">
          <Link
            to={`/teacher/articles/${article.articleName}`}
            className="text-blue-600 hover:text-blue-800 text-sm transition-colors"
          >
            View
          </Link>

          {article.status === 'editing' && (
            <Link
              to={`/teacher/articles/${article.articleName}/edit`}
              className="text-green-600 hover:text-green-800 text-sm transition-colors"
            >
              Edit
            </Link>
          )}

          {article.status === 'ready' && (
            <Link
              to={`/teacher/practice/${article.articleName}`}

              rel="noopener noreferrer"
              className="text-purple-600 hover:text-purple-800 text-sm transition-colors"
              title="Preview student experience"
            >
              👁️ Preview
            </Link>
          )}

          {article.status === 'editing' && hasAudio && (
            <span className="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">
              Ready to publish
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

const TeacherDashboard: React.FC = () => {
  const { user } = useAuth();
  const { data: articles, isLoading: articlesLoading } = useArticles();
  const { data: stats, isLoading: statsLoading } = useArticleStats();

  const recentArticles = articles?.slice(0, 5) || [];

  // const formatDate = (dateString?: string) => {
  //   if (!dateString) return 'N/A';
  //   return new Date(dateString).toLocaleDateString();
  // };

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">
            Welcome back, {user?.fullname || user?.username}!
          </h1>
          <p className="text-gray-600 mt-1">
            Manage your dictation exercises and track student progress
          </p>
        </div>

        <Link
          to="/teacher/articles/create"
          className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-lg"
        >
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
          Create New Article
        </Link>
      </div>




      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {statsLoading ? (
          Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="bg-white p-6 rounded-lg shadow border">
              <div className="animate-pulse">
                <div className="h-8 bg-gray-200 rounded mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-2/3"></div>
              </div>
            </div>
          ))
        ) : (
          <>
            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-gray-900">{stats?.total || 0}</div>
                  <div className="text-sm text-gray-600">Total Articles</div>
                </div>
              </div>
            </div>

            {/* Published (status === 'ready') */}
            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-green-600">{stats?.byStatus.ready || 0}</div>
                  <div className="text-sm text-gray-600">Published</div>
                  <div className="text-xs text-gray-500">Available to students</div>
                </div>
              </div>
            </div>

            {/* Drafts (status === 'editing') */}
            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-yellow-600">{stats?.byStatus.editing || 0}</div>
                  <div className="text-sm text-gray-600">Drafts</div>
                  <div className="text-xs text-gray-500">Being edited</div>
                </div>
              </div>
            </div>

            {/* Processing (status === 'processing') */}
            <div className="bg-white p-6 rounded-lg shadow border">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                </div>
                <div className="ml-4">
                  <div className="text-2xl font-bold text-purple-600">{stats?.byStatus.processing || 0}</div>
                  <div className="text-sm text-gray-600">Processing</div>
                  <div className="text-xs text-gray-500">Generating audio</div>
                </div>
              </div>
            </div>
          </>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Recent Articles */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg shadow border">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold text-gray-900">Recent Articles</h3>
                <Link
                  to="/teacher/articles"
                  className="text-sm text-blue-600 hover:text-blue-800 transition-colors"
                >
                  View all →
                </Link>
              </div>
            </div>

            <div className="divide-y divide-gray-200">
              {articlesLoading ? (
                Array.from({ length: 3 }).map((_, i) => (
                  <div key={i} className="p-6 animate-pulse">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                        <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                      </div>
                      <div className="h-6 bg-gray-200 rounded w-16 ml-4"></div>
                    </div>
                  </div>
                ))
              ) : (recentArticles.length === 0) ? (
                <div className="p-8 text-center">
                  <div className="text-gray-400 mb-4">
                    <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <p className="text-gray-600 mb-4">No articles created yet</p>
                  <Link
                    to="/teacher/articles/create"
                    className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Create Your First Article
                  </Link>
                </div>
              ) : (
                recentArticles.map((article) => (
                  <ArticleRow key={article.articleName} article={article} />
                ))
              )}
            </div>
          </div>
        </div>

        {/* Quick Actions + Tips */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow border">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Quick Actions</h3>
            </div>
            <div className="p-6 space-y-4">
              <Link
                to="/teacher/articles/create"
                className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors"
              >
                <div className="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                  <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                </div>
                <div className="ml-3">
                  <div className="text-sm font-medium text-gray-900">Create Article</div>
                  <div className="text-xs text-gray-500">Start a new dictation exercise</div>
                </div>
              </Link>

              <Link
                to="/teacher/articles"
                className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-green-50 hover:border-green-300 transition-colors"
              >
                <div className="flex-shrink-0 w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                  <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <div className="ml-3">
                  <div className="text-sm font-medium text-gray-900">Manage Articles</div>
                  <div className="text-xs text-gray-500">View and edit existing articles</div>
                </div>
              </Link>

              {/* New: Student Progress card */}
              <Link to="/teacher/analytics/students"
                    className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors">
                <div className="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                  <svg className="w-4 h-4 text-blue-600" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                          d="M3 3v18h18M7 13l3 3 7-7"/>
                  </svg>
                </div>
                <div className="ml-3">
                  <div className="text-sm font-medium text-gray-900">Student Progress</div>
                  <div className="text-xs text-gray-500">Analytics for articles and students</div>
                </div>
              </Link>
<Link
  to="/teacher/analytics"
  className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-indigo-50 hover:border-indigo-300 transition-colors"
>
  <div className="flex-shrink-0 w-8 h-8 bg-indigo-100 rounded-lg flex items-center justify-center">
    <svg className="w-4 h-4 text-indigo-600" viewBox="0 0 24 24" fill="none" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 3v18h18M7 13l3 3 7-7"/>
    </svg>
  </div>
  <div className="ml-3">
    <div className="text-sm font-medium text-gray-900">Class Analytics</div>
    <div className="text-xs text-gray-500">Overview and student metrics</div>
  </div>
</Link>


            </div>
          </div>

          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
            <div className="p-6">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h4 className="text-sm font-medium text-blue-900 mb-2">💡 Workflow Tips</h4>
                  <ul className="text-xs text-blue-800 space-y-1">
                    <li>• Create → Generate Audio → Review → Publish</li>
                    <li>• Students only see “Published” articles</li>
                    <li>• Generate audio before publishing</li>
                    <li>• Preview audio quality before publishing</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

        </div>
      </div>
    </div>
  );
};

export default TeacherDashboard;


C:\Users\User\Desktop\jink-demo\src\pages\About.tsx

function About() {
  return <h2>About Page</h2>;
}
export default About;


C:\Users\User\Desktop\jink-demo\src\pages\AdminDashboard.tsx

import React, { useState } from 'react';
import { useUsers } from '../hooks/useUsers';
import { useGroups } from '../hooks/useGroups';
import { LoadingSpinner } from '../components/common/LoadingSpinner';
import { BulkImport } from '../components/bulk/BulkImport';
import { BulkExport } from '../components/bulk/BulkExport';
import { CSVTemplateDownload } from '../components/bulk/CSVTemplateDownload';
import { CreateUserModal } from '../components/user/CreateUserModal';


const AdminDashboard: React.FC = () => {
  const { data: users, isLoading: usersLoading } = useUsers();
  const { data: groups, isLoading: groupsLoading } = useGroups();
  const [showBulkImport, setShowBulkImport] = useState(false);
  const [showBulkExport, setShowBulkExport] = useState(false);
  const [showCreateUser, setShowCreateUser] = useState(false);
  
  
  if (usersLoading || groupsLoading) {
    return <LoadingSpinner message="Loading dashboard..." />;
  }

  const userStats = users ? {
    total: users.length,
    active: users.filter(u => u.isActive).length,
    inactive: users.filter(u => !u.isActive).length,
    admins: users.filter(u => u.role === 'admin').length,
    teachers: users.filter(u => u.role === 'teacher').length,
    students: users.filter(u => u.role === 'student').length,
    users: users.filter(u => u.role === 'user').length,
  } : null;

  const groupStats = groups ? {
    total: groups.length,
    totalStudents: groups.reduce((sum, g) => sum + (g.studentUsernames?.length || 0), 0)
  } : null;


  

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
          <p className="text-gray-600">System overview and management</p>




        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-blue-100 rounded-lg">
              <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Users</p>
              <p className="text-2xl font-semibold text-gray-900">{userStats?.total || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-green-100 rounded-lg">
              <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Active Users</p>
              <p className="text-2xl font-semibold text-gray-900">{userStats?.active || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-purple-100 rounded-lg">
              <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Groups</p>
              <p className="text-2xl font-semibold text-gray-900">{groupStats?.total || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-2 bg-yellow-100 rounded-lg">
              <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Students in Groups</p>
              <p className="text-2xl font-semibold text-gray-900">{groupStats?.totalStudents || 0}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-semibold mb-4">Quick Actions</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          
          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">Bulk Operations</h3>
            <p className="text-sm text-gray-600 mb-3">Import or export users in bulk using CSV files.</p>
            <div className="space-y-2">
              <button
                onClick={() => setShowBulkImport(true)}
                className="w-full bg-blue-600 text-white px-3 py-2 rounded text-sm hover:bg-blue-700"
              >
                Import Users (CSV)
              </button>
              <button
                onClick={() => setShowBulkExport(true)}
                className="w-full bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700"
              >
                Export Users (CSV)
              </button>
              <CSVTemplateDownload />
            </div>
          </div>
{/* 
          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">User Management</h3>
            <p className="text-sm text-gray-600 mb-3">Manage users, roles, and permissions.</p>
            <div className="space-y-2">
              <a
                href="/admin/users"
                className="block w-full bg-indigo-600 text-white px-3 py-2 rounded text-sm hover:bg-indigo-700 text-center"
              >
                Manage Users
              </a>
            </div>
          </div> */}

          {/* // Add this button in the dashboard (replace the existing user management section): */}
          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">User Management</h3>
            <p className="text-sm text-gray-600 mb-3">Manage users, roles, and permissions.</p>
            <div className="space-y-2">
              <button
                onClick={() => setShowCreateUser(true)}
                className="w-full bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700 transition-colors flex items-center justify-center"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Create New User
              </button>
              <a href="/admin/users" className="block w-full bg-indigo-600 text-white px-3 py-2 rounded text-sm hover:bg-indigo-700 text-center transition-colors">
                Manage Users
              </a>
            </div>
          </div>



          <div className="p-4 border border-gray-200 rounded-lg">
            <h3 className="font-medium mb-2">Group Management</h3>
            <p className="text-sm text-gray-600 mb-3">Manage student groups and assignments.</p>
            <div className="space-y-2">
              <a
                href="/admin/groups"
                className="block w-full bg-purple-600 text-white px-3 py-2 rounded text-sm hover:bg-purple-700 text-center"
              >
                Manage Groups
              </a>
            </div>
          </div>

        </div>
      </div>

      {/* Bulk Operation Modals */}
      {showBulkImport && (
        <BulkImport
          onSuccess={() => setShowBulkImport(false)}
          onCancel={() => setShowBulkImport(false)}
        />
      )}

      {showBulkExport && (
        <BulkExport
          onCancel={() => setShowBulkExport(false)}
        />
      )}

      {showCreateUser && (
        <CreateUserModal
          isOpen={showCreateUser}
          onClose={() => setShowCreateUser(false)}
          onSuccess={() => {
            // Refresh any data if needed
            console.log('User created successfully');
          }}
        />
      )}

    </div>
  );
};

export default AdminDashboard;


C:\Users\User\Desktop\jink-demo\src\pages\Home.tsx

function Home() {
  return <h2>Home Page</h2>;
}
export default Home;


C:\Users\User\Desktop\jink-demo\src\pages\Login.tsx

import type { FormEvent } from 'react';
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

export default function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const { login, user } = useAuth();
  const navigate = useNavigate();
  const [error, setError] = useState<string | null>(null);
  useEffect(() => { 
            
            if (!user) 
              return; 

            switch (user.role) 
            { 
                case "admin":
                  navigate("/admin");
                  break;
                case "teacher":
                  navigate("/teacher");
                  break;
                case "student":
                  navigate("/student/dashboard");
                  break;
                default:
                  navigate("/login");
            } 
        
        
        }, [user]);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    try {
          await login(username, password);




    } catch (err: any) {
      setError(err?.response?.data?.message ?? 'Login failed');
    }
  };

  // return (
  //   <div style={{ maxWidth: 360, margin: '2rem auto' }}>
  //     <h2>Login</h2>
  //     {error && <p style={{ color: 'crimson' }}>{error}</p>}
  //     <form onSubmit={handleSubmit}>
  //       <label>
  //         Username
  //         <input
  //           required
  //           value={username}
  //           onChange={e => setUsername(e.target.value)}
  //         />
  //       </label>
  //       <br />
  //       <label>
  //         Password
  //         <input
  //           type="password"
  //           required
  //           value={password}
  //           onChange={e => setPassword(e.target.value)}
  //         />
  //       </label>
  //       <br />
  //       <button type="submit">Sign in</button>
  //     </form>
  //   </div>
  // );


  return (
    <div className="max-w-sm mx-auto mt-8 p-6 bg-white rounded-lg shadow">
      <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>
      {error && (
        <p className="text-red-600 mb-4 text-sm text-center">{error}</p>
      )}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block mb-1 font-medium">Username</label>
          <input
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            required
            value={username}
            onChange={e => setUsername(e.target.value)}
          />
        </div>
        <div>
          <label className="block mb-1 font-medium">Password</label>
          <input
            type="password"
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            required
            value={password}
            onChange={e => setPassword(e.target.value)}
          />
        </div>
        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 font-semibold transition-colors"
        >
          Sign in
        </button>
      </form>
    </div>
  );


}


C:\Users\User\Desktop\jink-demo\src\pages\NotFound.tsx

// import React from 'react';
import { useNavigate } from 'react-router-dom';

export default function NotFound() {
  const navigate = useNavigate();

  return (
    <div style={{ textAlign: 'center', padding: '2rem' }}>
      <h2>404 - Page Not Found</h2>
      <p>Sorry, the page you are looking for does not exist.</p>
      <button onClick={() => navigate('/')}>Go to Home</button>
      <button style={{ marginLeft: '1rem' }} onClick={() => navigate('/login')}>
        Go to Login
      </button>
    </div>
  );
}


C:\Users\User\Desktop\jink-demo\src\pages\Unauthorized.tsx

// import React from 'react';

const UnauthorizedDashboard = () => {
  return (
    <div>
      <h1>Unauthorized Dashboard Placeholder</h1>
      <p>This is a temporary placeholder component as UnauthorizedDashboard is not yet implemented.</p>
    </div>
  );
};

export default UnauthorizedDashboard;


C:\Users\User\Desktop\jink-demo\src\pages\UserDetail.tsx

import { useParams } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { apiGetUserByUsername } from '../api/apiUsers';

export default function UserDetail() {
  const { username } = useParams<{ username: string }>();


  // const {
  //   data: user,
  //   error,
  //   isLoading,
  // } = useQuery(['user', username], () => apiGetUserByUsername(username!), {
  //   enabled: !!username,
  // });
  const {
      data: user,
      error,
      isLoading,
  } = useQuery({
      queryKey: ['user', username],
      queryFn: () => apiGetUserByUsername(username!),
      enabled: !!username,
  });


  if (isLoading) return <p>Loading profile…</p>;
  if (error) return <p>Error fetching user.</p>;

  return (
    <div>
      <h2>{user!.fullname}</h2>
      <p>
        <b>Username:</b> {user!.username}
      </p>
      <p>
        <b>Role:</b> {user!.role}
      </p>
      <p>
        <b>Status:</b> {user!.isActive ? 'Active' : 'Inactive'}
      </p>
    </div>
  );
}


C:\Users\User\Desktop\jink-demo\src\pages\UserProfile.tsx

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { ChangePasswordModal } from '../components/user/ChangePasswordModal';

const UserProfile: React.FC = () => {
  const { user } = useAuth();
  const [showChangePassword, setShowChangePassword] = useState(false);

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Access Denied</h2>
          <p className="text-gray-600">You need to be logged in to view this page.</p>
        </div>
      </div>
    );
  }

  const handlePasswordChangeSuccess = () => {
    // Show success notification
    alert('Password changed successfully! Please log in again.');
    // In a real app, you might want to logout the user or show a toast notification
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">User Profile</h1>
          <p className="text-gray-600 mt-2">Manage your account settings and preferences</p>
        </div>

        <div className="space-y-6">
          {/* Profile Information Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Profile Information</h2>
            </div>
            <div className="px-6 py-4">
              <dl className="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                <div>
                  <dt className="text-sm font-medium text-gray-500">Username</dt>
                  <dd className="mt-1 text-sm text-gray-900">{user.username}</dd>
                </div>
                
                <div>
                  <dt className="text-sm font-medium text-gray-500">Full Name</dt>
                  <dd className="mt-1 text-sm text-gray-900">{user.fullname}</dd>
                </div>
                
                <div>
                  <dt className="text-sm font-medium text-gray-500">Role</dt>
                  <dd className="mt-1">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      user.role === 'admin' ? 'bg-red-100 text-red-800' :
                      user.role === 'teacher' ? 'bg-blue-100 text-blue-800' :
                      user.role === 'student' ? 'bg-green-100 text-green-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                    </span>
                  </dd>
                </div>
                
                <div>
                  <dt className="text-sm font-medium text-gray-500">Status</dt>
                  <dd className="mt-1">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      user.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {user.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </dd>
                </div>
              </dl>
            </div>
          </div>

          {/* Security Settings Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Security Settings</h2>
            </div>
            <div className="px-6 py-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-medium text-gray-900">Password</h3>
                  <p className="text-sm text-gray-500 mt-1">
                    Change your password to keep your account secure
                  </p>
                </div>
                <button
                  onClick={() => setShowChangePassword(true)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-sm font-medium"
                >
                  Change Password
                </button>
              </div>
            </div>
          </div>

          {/* Account Information Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Account Information</h2>
            </div>
            <div className="px-6 py-4">
              <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
                <div className="flex">
                  <svg className="w-5 h-5 text-blue-400 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                  <div className="text-sm text-blue-700">
                    <p className="font-medium">Account Management</p>
                    <p className="mt-1">
                      For changes to your profile information, role, or account status, 
                      please contact your system administrator.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Quick Actions Card */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Quick Actions</h2>
            </div>
            <div className="px-6 py-4">
              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                {user.role === 'admin' && (
                  <>
                    <a
                      href="/admin/users"
                      className="flex items-center p-3 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors"
                    >
                      <svg className="w-5 h-5 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                      </svg>
                      <div>
                        <p className="text-sm font-medium text-gray-900">Manage Users</p>
                        <p className="text-xs text-gray-500">Create, edit, and manage user accounts</p>
                      </div>
                    </a>
                    
                    <a
                      href="/admin/groups"
                      className="flex items-center p-3 bg-green-50 rounded-md hover:bg-green-100 transition-colors"
                    >
                      <svg className="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                      <div>
                        <p className="text-sm font-medium text-gray-900">Manage Groups</p>
                        <p className="text-xs text-gray-500">Create and manage student groups</p>
                      </div>
                    </a>
                  </>
                )}

                {user.role === 'teacher' && (
                  <a
                    href="/teacher/groups"
                    className="flex items-center p-3 bg-green-50 rounded-md hover:bg-green-100 transition-colors"
                  >
                    <svg className="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <div>
                      <p className="text-sm font-medium text-gray-900">My Groups</p>
                      <p className="text-xs text-gray-500">Manage your student groups</p>
                    </div>
                  </a>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Change Password Modal */}
      {showChangePassword && (
        <ChangePasswordModal
          isOpen={showChangePassword}
          onClose={() => setShowChangePassword(false)}
          onSuccess={handlePasswordChangeSuccess}
        />
      )}
    </div>
  );
};

export default UserProfile;


C:\Users\User\Desktop\jink-demo\src\pages\Users.tsx

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useUsers } from '../hooks/useUsers';
import { useAuth } from '../context/AuthContext';
import { LoadingSpinner } from '../components/common/LoadingSpinner';
import { EditUserModal } from '../components/user/EditUserModal';
import { PasswordResetModal } from '../components/user/PasswordResetModal';
import { UserStatusToggle } from '../components/user/UserStatusToggle';
import { ConfirmDialog } from '../components/common/ConfirmDialog';
import { useDeleteUser } from '../hooks/useUsers';
import type { IUser } from '../api/apiUsers';
// Add this import at the top


const Users: React.FC = () => {
  const { user: currentUser } = useAuth();
  const { data: users, isLoading, error, refetch } = useUsers();
  const deleteUserMutation = useDeleteUser();

  const [selectedUser, setSelectedUser] = useState<IUser | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showPasswordResetModal, setShowPasswordResetModal] = useState(false);
  const [deleteDialog, setDeleteDialog] = useState<{
    isOpen: boolean;
    user: IUser | null;
  }>({ isOpen: false, user: null });
  

  const handleEditUser = (user: IUser) => {
    setSelectedUser(user);
    setShowEditModal(true);
  };

  const handleResetPassword = (user: IUser) => {
    setSelectedUser(user);
    setShowPasswordResetModal(true);
  };

  const handleDeleteClick = (user: IUser) => {
    setDeleteDialog({ isOpen: true, user });
  };

  const handleDeleteConfirm = async () => {
    if (deleteDialog.user) {
      try {
        await deleteUserMutation.mutateAsync(deleteDialog.user.username);
        setDeleteDialog({ isOpen: false, user: null });
        refetch();
      } catch (error) {
        console.error('Failed to delete user:', error);
      }
    }
  };

  const handleModalSuccess = () => {
    refetch();
    setShowEditModal(false);
    setShowPasswordResetModal(false);
  };

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800';
      case 'teacher': return 'bg-blue-100 text-blue-800';
      case 'student': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner message="Loading users..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Error Loading Users</h2>
          <p className="text-red-600 mb-4">{(error as Error).message}</p>
          <button
            onClick={() => refetch()}
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">User Management</h1>
          <p className="text-gray-600 mt-2">
            Manage all users in the system ({users?.length || 0} total users)
          </p>
        </div>

        {/* Users Table */}
        <div className="bg-white shadow overflow-hidden rounded-lg">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">All Users</h2>
          </div>

          {!users || users.length === 0 ? (
            <div className="text-center py-12">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No users found</h3>
              <p className="mt-1 text-sm text-gray-500">Get started by creating a new user.</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      User
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Role
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {users.map((user) => (
                    <tr key={user.username} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            <div className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
                              <span className="text-white font-medium text-sm">
                                {user.fullname.charAt(0).toUpperCase()}
                              </span>
                            </div>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {user.fullname}
                            </div>
                            <div className="text-sm text-gray-500">
                              @{user.username}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(user.role)}`}>
                          {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <UserStatusToggle
                          username={user.username}
                          isActive={user.isActive}
                          onSuccess={() => refetch()}
                          size="small"
                        />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          <Link
                            to={`/admin/users/${user.username}`}
                            className="text-blue-600 hover:text-blue-900 transition-colors px-2 py-1 rounded hover:bg-blue-50"
                          >
                            View
                          </Link>
                          <button
                            onClick={() => handleEditUser(user)}
                            className="text-green-600 hover:text-green-900 transition-colors px-2 py-1 rounded hover:bg-green-50"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleResetPassword(user)}
                            className="text-yellow-600 hover:text-yellow-900 transition-colors px-2 py-1 rounded hover:bg-yellow-50"
                          >
                            Reset Pwd
                          </button>
                          {currentUser?.username !== user.username && (
                            <button
                              onClick={() => handleDeleteClick(user)}
                              className="text-red-600 hover:text-red-900 transition-colors px-2 py-1 rounded hover:bg-red-50"
                            >
                              Delete
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modals */}
      {showEditModal && selectedUser && (
        <EditUserModal
          isOpen={showEditModal}
          user={selectedUser}
          onClose={() => setShowEditModal(false)}
          onSuccess={handleModalSuccess}
        />
      )}

      {showPasswordResetModal && selectedUser && (
        <PasswordResetModal
          isOpen={showPasswordResetModal}
          username={selectedUser.username}
          fullname={selectedUser.fullname}
          onClose={() => setShowPasswordResetModal(false)}
          onSuccess={handleModalSuccess}
        />
      )}

      <ConfirmDialog
        isOpen={deleteDialog.isOpen}
        title="Delete User"
        message={`Are you sure you want to delete ${deleteDialog.user?.fullname}? This action cannot be undone.`}
        confirmText="Delete"
        cancelText="Cancel"
        type="danger"
        onConfirm={handleDeleteConfirm}
        onCancel={() => setDeleteDialog({ isOpen: false, user: null })}
      />
    </div>
  );
};

export default Users;


C:\Users\User\Desktop\jink-demo\src\routes\guards\RoleGuard.tsx

// src/routes/guards/RoleGuard.tsx
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

type Role = 'admin' | 'teacher' | 'student' | 'user';

interface Props {
  allow?: Role[];
}

export const RoleGuard = ({ allow }: Props) => {
  const { user, loading } = useAuth();
  
  if (loading) {
    return <div className="loading-spinner">Loading session...</div>;
  }
  
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  // if (!allow.includes(user.role)) {
  //   return <Navigate to="/unauthorized" replace />;
  // }


  // Only enforce role check if an allow list was provided
  if (allow && !allow.includes(user.role as Role)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return <Outlet />;
};


C:\Users\User\Desktop\jink-demo\src\routes\ProtectedRoute.tsx

import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

export default function ProtectedRoute() {
  const { user, loading } = useAuth();
  if (loading) return <p>Loading...</p>;
  return user ? <Outlet /> : <Navigate to="/login" replace />;
}


C:\Users\User\Desktop\jink-demo\src\services\dictationService.ts

// src/services/dictationService.ts

import type { DictationSession, FragmentProgress } from '../components/dictation/FragmentDictation';

export interface SessionAnalytics {
  totalTimeSpent: number; // seconds
  averageScore: number; // 0-1
  fragmentsCompleted: number;
  totalFragments: number;
  completionRate: number; // 0-1
  averageAttemptsPerFragment: number;
  difficultFragments: FragmentProgress[]; // fragments with low scores or many attempts
  strengths: string[];
  improvements: string[];
}

export class DictationService {
  /**
   * Calculate comprehensive analytics for a dictation session
   */
  static analyzeSession(session: DictationSession): SessionAnalytics {
    const { progress } = session;
    const totalFragments = progress.length;
    const completedFragments = progress.filter(p => p.status !== 'pending').length;
    
    // Time and score calculations
    const totalTimeSpent = progress.reduce((sum, p) => sum + p.timeSpent, 0);
    const averageScore = totalFragments > 0 
      ? progress.reduce((sum, p) => sum + p.bestScore, 0) / totalFragments 
      : 0;
    
    // Attempt analysis
    const totalAttempts = progress.reduce((sum, p) => sum + p.attempts.length, 0);
    const averageAttemptsPerFragment = completedFragments > 0 
      ? totalAttempts / completedFragments 
      : 0;

    // Identify difficult fragments (score < 0.7 or attempts > 3)
    const difficultFragments = progress.filter(p => 
      p.bestScore < 0.7 || p.attempts.length > 3
    );

    // Generate strengths and improvement suggestions
    const strengths: string[] = [];
    const improvements: string[] = [];

    if (averageScore >= 0.9) {
      strengths.push("Excellent listening comprehension");
    } else if (averageScore >= 0.7) {
      strengths.push("Good overall understanding");
    }

    if (averageAttemptsPerFragment <= 2) {
      strengths.push("Quick learning and adaptation");
    }

    if (averageScore < 0.6) {
      improvements.push("Focus on listening for key words");
    }

    if (averageAttemptsPerFragment > 4) {
      improvements.push("Try slowing down audio playback speed");
    }

    if (difficultFragments.length > totalFragments * 0.3) {
      improvements.push("Consider reviewing vocabulary before practice");
    }

    return {
      totalTimeSpent,
      averageScore,
      fragmentsCompleted: completedFragments,
      totalFragments,
      completionRate: completedFragments / totalFragments,
      averageAttemptsPerFragment,
      difficultFragments,
      strengths,
      improvements
    };
  }

  /**
   * Format time in minutes and seconds
   */
  static formatTime(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    
    if (minutes === 0) {
      return `${remainingSeconds}s`;
    }
    
    return `${minutes}m ${remainingSeconds}s`;
  }

  /**
   * Get performance level based on score
   */
  static getPerformanceLevel(score: number): {
    level: string;
    color: string;
    description: string;
  } {
    if (score >= 0.95) {
      return {
        level: 'Excellent',
        color: 'text-green-600 bg-green-100',
        description: 'Outstanding performance!'
      };
    } else if (score >= 0.85) {
      return {
        level: 'Very Good',
        color: 'text-blue-600 bg-blue-100',
        description: 'Great job with minor errors'
      };
    } else if (score >= 0.70) {
      return {
        level: 'Good',
        color: 'text-yellow-600 bg-yellow-100',
        description: 'Good understanding, room for improvement'
      };
    } else if (score >= 0.50) {
      return {
        level: 'Fair',
        color: 'text-orange-600 bg-orange-100',
        description: 'Needs more practice'
      };
    } else {
      return {
        level: 'Needs Improvement',
        color: 'text-red-600 bg-red-100',
        description: 'Consider reviewing the material'
      };
    }
  }

  /**
   * Calculate accuracy trend across fragments
   */
  static getAccuracyTrend(progress: FragmentProgress[]): {
    trend: 'improving' | 'declining' | 'stable';
    trendValue: number; // -1 to 1, where positive means improving
  } {
    if (progress.length < 3) {
      return { trend: 'stable', trendValue: 0 };
    }

    const scores = progress
      .filter(p => p.status !== 'pending')
      .map(p => p.bestScore);

    if (scores.length < 3) {
      return { trend: 'stable', trendValue: 0 };
    }

    // Simple trend calculation: compare first half with second half
    const midpoint = Math.floor(scores.length / 2);
    const firstHalf = scores.slice(0, midpoint);
    const secondHalf = scores.slice(midpoint);

    const firstHalfAvg = firstHalf.reduce((sum, score) => sum + score, 0) / firstHalf.length;
    const secondHalfAvg = secondHalf.reduce((sum, score) => sum + score, 0) / secondHalf.length;

    const trendValue = secondHalfAvg - firstHalfAvg;

    if (trendValue > 0.1) {
      return { trend: 'improving', trendValue };
    } else if (trendValue < -0.1) {
      return { trend: 'declining', trendValue };
    } else {
      return { trend: 'stable', trendValue };
    }
  }

  /**
   * Generate personalized recommendations
   */
  static getRecommendations(session: DictationSession): string[] {
    const analytics = this.analyzeSession(session);
    const recommendations: string[] = [];

    // Score-based recommendations
    if (analytics.averageScore < 0.6) {
      recommendations.push("Try using a slower playback speed (0.75x) to better catch each word");
      recommendations.push("Focus on listening to one word at a time rather than trying to catch everything");
    }

    // Attempt-based recommendations  
    if (analytics.averageAttemptsPerFragment > 4) {
      recommendations.push("Consider reading the article text first to familiarize yourself with the vocabulary");
      recommendations.push("Practice with shorter fragments to build confidence");
    }

    // Time-based recommendations
    const avgTimePerFragment = analytics.totalTimeSpent / analytics.fragmentsCompleted;
    if (avgTimePerFragment > 120) { // More than 2 minutes per fragment
      recommendations.push("Try to trust your first instinct more - overthinking can sometimes hurt performance");
    }

    // Difficulty-based recommendations
    if (analytics.difficultFragments.length > analytics.totalFragments * 0.4) {
      recommendations.push("This article might be challenging - consider starting with an easier difficulty level");
      recommendations.push("Focus on understanding the main idea rather than every single word");
    }

    // Positive reinforcements
    if (analytics.averageScore >= 0.8) {
      recommendations.push("Great work! Try challenging yourself with faster playback speeds");
    }

    if (analytics.completionRate === 1 && analytics.averageScore >= 0.7) {
      recommendations.push("Excellent persistence! You completed the entire article with good accuracy");
    }

    return recommendations.slice(0, 3); // Return top 3 recommendations
  }
}


C:\Users\User\Desktop\jink-demo\src\tests\integration\audioStatus.test.ts

// // tests/integration/audioStatus.test.ts
// import React from 'react';
// import { render, screen, waitFor, fireEvent } from '@testing-library/react';        
// import { createTestArticle, mockApiResponse, mockApiError, mockApiSuccess } from '../testUtils';
// import ArticleDetail from '../../pages/teacher/ArticleDetail';      

// describe('Audio Status Real-Time Updates', () => {
  
//   test('Teacher sees real-time audio generation progress', async () => {
//     // 1. Setup: Create article in editing state
//     const article = await createTestArticle({ status: 'editing' });
    
//     // 2. Navigate to article detail page
//     render(<ArticleDetail />, { 
//       route: `/teacher/articles/${article.articleName}` 
//     });
    
//     // 3. Click generate audio button
//     const generateButton = screen.getByText('Generate Audio');
//     fireEvent.click(generateButton);
    
//     // 4. VERIFY: Button shows "Starting Generation..."
//     expect(screen.getByText('Starting Generation...')).toBeInTheDocument();
    
//     // 5. VERIFY: Status changes to processing
//     await waitFor(() => {
//       expect(screen.getByText('Generating Audio')).toBeInTheDocument();
//     });
    
//     // 6. VERIFY: Polling indicator appears
//     expect(screen.getByText('Checking status...')).toBeInTheDocument();
    
//     // 7. SIMULATE: Backend completes audio generation
//     mockApiResponse('/api/articles/test-article/audio/status', {
//       article: { status: 'ready' },
//       audio: { 
//         fullAudioUrl: 'https://example.com/audio.mp3',
//         totalFragments: 5,
//         totalDuration: 120
//       }
//     });
    
//     // 8. VERIFY: Status updates to ready (polling should detect this)
//     await waitFor(() => {
//       expect(screen.getByText('Audio Ready')).toBeInTheDocument();
//     }, { timeout: 10000 }); // Wait up to 10 seconds for polling
    
//     // 9. VERIFY: Audio preview appears
//     expect(screen.getByText('Preview Audio:')).toBeInTheDocument();
//     const audioElement = screen.getByRole('audio');
//     expect(audioElement).toHaveAttribute('src', 'https://example.com/audio.mp3');
//   });

//   test('Student sees processing status with real-time updates', async () => {
//     // 1. Setup: Article in processing state
//     const article = await createTestArticle({ status: 'processing' });
    
//     // 2. Navigate to dictation page
//     render(<DictationPracticePage />, { 
//       route: `/student/practice/${article.articleName}` 
//     });
    
//     // 3. VERIFY: Processing message appears
//     expect(screen.getByText('Audio Processing')).toBeInTheDocument();
//     expect(screen.getByText('This usually takes 2-3 minutes')).toBeInTheDocument();
    
//     // 4. VERIFY: Checking status indicator appears
//     await waitFor(() => {
//       expect(screen.getByText('Checking status...')).toBeInTheDocument();
//     });
    
//     // 5. SIMULATE: Audio generation completes
//     mockApiResponse('/api/articles/test-article/audio/status', {
//       article: { status: 'ready' },
//       audio: { fullAudioUrl: 'https://example.com/audio.mp3' },
//       fragments: [
//         { fragmentIndex: 0, text: 'Hello world', startTime: 0, endTime: 2, duration: 2 }
//       ]
//     });
    
//     // 6. VERIFY: Page transitions to dictation interface
//     await waitFor(() => {
//       expect(screen.getByText('Fragment 1 of 1')).toBeInTheDocument();
//     }, { timeout: 10000 });
//   });

//   test('Error states are handled gracefully', async () => {
//     // 1. Setup: Network error scenario
//     mockApiError('/api/articles/test-article/audio/status', 500, 'Server Error');
    
//     const article = await createTestArticle({ status: 'processing' });
    
//     // 2. Navigate to page
//     render(<DictationPracticePage />, { 
//       route: `/student/practice/${article.articleName}` 
//     });
    
//     // 3. VERIFY: Error state appears after retries
//     await waitFor(() => {
//       expect(screen.getByText('Unable to Load Exercise')).toBeInTheDocument();
//     }, { timeout: 15000 }); // Account for retry delays
    
//     // 4. VERIFY: Retry functionality
//     const tryAgainButton = screen.getByText('Try Again');
//     expect(tryAgainButton).toBeInTheDocument();
    
//     // 5. Test retry
//     mockApiSuccess('/api/articles/test-article/audio/status');
//     fireEvent.click(tryAgainButton);
    
//     // Should attempt to reload
//     expect(window.location.reload).toHaveBeenCalled();
//   });
// });


C:\Users\User\Desktop\jink-demo\src\tests\setupTests.ts

import '@testing-library/jest-dom';
import 'whatwg-fetch';

// Optional: quiet React Query network errors in tests
// import { setLogger } from '@tanstack/react-query';
// setLogger({ log: console.log, warn: console.warn, error: () => {} });


C:\Users\User\Desktop\jink-demo\src\types\article.types.ts

// Complete article.types.ts with all missing types

// Core article interface - match backend exactly
export interface IArticle {
  articleName: string
  title: string
  originalText: string
  teacherUsername: string
  metadata?: {
    grade?: string
    subject?: string
    difficulty?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2'
    estimatedTime?: number
  }
  status: 'editing' | 'processing' | 'ready' | 'error'
  processingError?: string
  fullAudioUrl?: string  // Only present after successful generation
  sentences: ISentence[]
  createdAt?: string
  updatedAt?: string
}

// Sentence interface with optional timing fields
export interface ISentence {
  sentenceId: string
  order: number
  text: string
  wordCount: number
  isLong: boolean
  startTime?: number      // Only after TTS generation
  endTime?: number        // Only after TTS generation
  individualAudioUrl?: string
  status?: 'pending' | 'ready' | 'error'
}

// API Request Types
export interface CreateArticleRequest {
  articleName: string;
  title: string;
  originalText: string;
  metadata: {
    grade?: string;
    subject?: string;
    difficulty?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
    estimatedTime?: number;
  };
  // Sentences without sentenceId - backend will generate them
  sentences: Array<{
    order: number;
    text: string;
    wordCount: number;
    isLong: boolean;
  }>;
}

export interface UpdateArticleRequest {
  title?: string;
  metadata?: {
    grade?: string;
    subject?: string;
    difficulty?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
    estimatedTime?: number;
  };
}

export interface UpdateSentencesRequest {
  sentences: Array<{
    order: number;
    text: string;
    wordCount: number;
    isLong: boolean;
  }>;
}

export interface SuggestNameRequest {
  title: string;
}

// API Response Types
export interface ArticleResponse {
  success: boolean;
  article: IArticle;
  message?: string;
}

export interface ArticlesResponse {
  success: boolean;
  count: number;
  articles: IArticle[];
}

export interface SuggestNameResponse {
  success: boolean;
  suggestedName: string;
}

export interface CheckNameResponse {
  success: boolean;
  isAvailable: boolean;
  articleName: string;
}

export interface SentenceResponse {
  success: boolean;
  sentence: ISentence;
  message?: string;
}

export interface TeacherStatsResponse {
  success: boolean;
  stats: {
    total: number;
    byStatus: Record<string, number>;
    recentActivity: IArticle[];
  };
}

// Form Types for React Components
export interface ArticleFormData {
  articleName: string;
  title: string;
  originalText: string;
  metadata: {
    grade: string;
    subject: string;
    difficulty: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
  };
}

export interface SentenceFormData {
  order: number;
  text: string;
  wordCount: number;
  isLong: boolean;
}

// export interface IArticleMetadata {
//   grade?: string;
//   subject?: string;
//   difficulty?: 'easy' | 'medium' | 'hard';
//   estimatedTime?: number;
// }


// Add to existing article.types.ts
export interface FragmentTiming {
  fragmentIndex: number;
  order: number;
  text: string;
  startTime: number;
  endTime: number;
  duration: number;
  wordCount: number;
}

export interface DictationAttempt {
  attempt: string;
  result: ComparisonResult;
  timestamp: Date;
}

export interface FragmentProgress {
  fragmentIndex: number;
  attempts: DictationAttempt[];
  status: 'pending' | 'correct' | 'given_up';
  bestScore: number;
  timeSpent: number;
}

export interface ComparisonResult {
score: number; // 0-1
totalTokens: number;
correctTokens: number;
feedback: string; // masked hint
tokenDiffs: TokenDiff[]; // define TokenDiff as below
isPerfect: boolean;
}

export interface TokenDiff {
original: string;
attempt: string;
isCorrect: boolean;
type: 'match' | 'substitution' | 'insertion' | 'deletion';
}

// Utility Types
export type ArticleStatus = IArticle['status'];
export type SentenceStatus = ISentence['status'];
export type DifficultyLevel = 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';

C:\Users\User\Desktop\jink-demo\src\types\audio.types.ts

// Audio status response from GET /api/articles/:articleName/audio/status
export interface AudioStatusResponse {
  success: boolean
  article: {
    articleName: string
    title: string
    status: 'editing' | 'processing' | 'ready' | 'error'
    processingError?: string
  }
  audio: {
    hasAudio: boolean
    hasTiming: boolean
    audioSize?: number
    totalFragments?: number
    totalDuration?: number
    fullAudioUrl: string | null
  }
  fragments?: FragmentTiming[]
}

// Fragment timing from audio generation
export interface FragmentTiming {
  fragmentIndex: number
  order: number
  text: string
  startTime: number
  endTime: number
  duration: number
  wordCount: number
}

// Fragment timing response from GET /api/articles/:articleName/audio/fragment/:idx
export interface FragmentTimingResponse {
  success: boolean
  fragment: FragmentTiming
  audioUrl: string
  playbackInfo: {
    startTime: number
    endTime: number
    duration: number
  }
}

// Signed URL response
export interface SignedAudioUrlResponse {
  success: boolean
  url: string
  expiresAt: string  // ISO8601
}


C:\Users\User\Desktop\jink-demo\src\types\progress.types.ts

// src/types/progress.types.ts
export interface ArticleProgress {
  isCompleted: boolean;
  bestScore: number;        // 0..1
  completionRate: number;   // 0..100
  lastAttempt: Date;        // non-null for card rendering
  totalAttempts: number;
}

export interface StudentArticleProgress {
  studentUsername: string;
  articleName: string;
  totalAttempts: number;
  bestScore: number; // 0-1
  averageScore: number; // 0-1
  totalTimeSpent: number; // seconds
  lastPracticed: Date;
  completionRate: number; // 0-100
}

C:\Users\User\Desktop\jink-demo\src\utils\tests\sentenceFragmentSplitter.test.ts

import {
  validateArticleName,
  splitFragmentAt,
  mergeFragments,
  validateFragments,
  smartSplitFragment,
} from '../../utils/sentenceFragmentSplitter';


console.log('ENV', typeof window, typeof document, typeof navigator);

describe('sentenceFragmentSplitter', () => {
  test('validateArticleName accepts alnum, dash, underscore, 3-50 chars', () => {
    expect(validateArticleName('abc-DEF_123')).toBe(true);
    expect(validateArticleName('ab')).toBe(false);
  });

  test('splitFragmentAt splits on index and trims edges', () => {
    const parts = splitFragmentAt(['hello world'], 0, 5);
    expect(parts).toEqual(['hello', 'world']);
  });

  test('mergeFragments merges consecutive items', () => {
    const merged = mergeFragments(['a', 'b', 'c'], 1);
    expect(merged).toEqual(['a', 'b c']);
  });

  test('smartSplitFragment falls back to middle when no hints', () => {
    const res = smartSplitFragment(['onetwothree'], 0);
    expect(res.length).toBe(2);
  });

  test('validateFragments flags long/short correctly', () => {
    const data = validateFragments(['short', 'this one is rather too long for comfort'.repeat(1)]);
    expect(data.totalFragments).toBe(2);
  });
});


C:\Users\User\Desktop\jink-demo\src\utils\apiValidation.ts

import type { AudioStatusResponse } from '../types/audio.types'

export const validateAudioStatusResponse = (response: any): response is AudioStatusResponse => {
  if (process.env.NODE_ENV !== 'development') return true
  
  try {
    // Check required structure
    if (!response.success || typeof response.success !== 'boolean') {
      console.warn('AudioStatusResponse: missing or invalid success field')
      return false
    }
    
    if (!response.article || typeof response.article.articleName !== 'string') {
      console.warn('AudioStatusResponse: missing or invalid article.articleName')
      return false
    }
    
    if (!['editing', 'processing', 'ready', 'error'].includes(response.article.status)) {
      console.warn('AudioStatusResponse: invalid article.status', response.article.status)
      return false
    }
    
    if (!response.audio || typeof response.audio.hasAudio !== 'boolean') {
      console.warn('AudioStatusResponse: missing or invalid audio.hasAudio')
      return false
    }
    
    return true
  } catch (error) {
    console.warn('AudioStatusResponse validation failed:', error)
    return false
  }
}


C:\Users\User\Desktop\jink-demo\src\utils\auth.ts

// src/utils/auth.ts
const TOKEN_KEY = 'authToken';

export const getAuthToken = (): string | null => {
  return localStorage.getItem(TOKEN_KEY);
};

export const setAuthToken = (token: string): void => {
  localStorage.setItem(TOKEN_KEY, token);
};

export const clearAuthToken = (): void => {
  localStorage.removeItem(TOKEN_KEY);
};

export const isTokenValid = (): boolean => {
  const token = getAuthToken();
  if (!token) return false;
  
  try {
    // Simple JWT payload decode (without verification)
    const payload = JSON.parse(atob(token.split('.')[1]));
    const now = Date.now() / 1000;
    return payload.exp > now;
  } catch {
    return false;
  }
};


C:\Users\User\Desktop\jink-demo\src\utils\dictationUtils.ts

// src/utils/dictationUtils.ts


import type { TokenDiff, ComparisonResult } from '../types/article.types';


/**
 * Normalize text for comparison - case insensitive, punctuation stripped
 */
export function normalizeText(text: string): string {
  return text
    .toLowerCase()
    .trim()
    // Replace curly quotes with straight quotes
    .replace(/['']/g, "'")
    .replace(/[""]/g, '"')
    // Collapse multiple spaces
    .replace(/\s+/g, ' ');
}

/**
 * Tokenize and clean tokens for comparison
 */
export function tokenizeForComparison(text: string): string[] {
  const normalized = normalizeText(text);
  
  return normalized
    .split(/\s+/)
    .map(token => 
      // Strip leading/trailing punctuation but preserve internal punctuation (contractions)
      token.replace(/^[^\w']+|[^\w']+$/g, '')
    )
    .filter(token => token.length > 0);
}

/**
 * Simple token-level diff algorithm
 */
export function computeTokenDiff(originalTokens: string[], attemptTokens: string[]): TokenDiff[] {
  const diffs: TokenDiff[] = [];
  const maxLen = Math.max(originalTokens.length, attemptTokens.length);
  
  for (let i = 0; i < maxLen; i++) {
    const original = originalTokens[i] || '';
    const attempt = attemptTokens[i] || '';
    
    if (i >= originalTokens.length) {
      // Extra word in attempt (insertion)
      diffs.push({
        original: '',
        attempt,
        isCorrect: false,
        type: 'insertion'
      });
    } else if (i >= attemptTokens.length) {
      // Missing word in attempt (deletion)
      diffs.push({
        original,
        attempt: '',
        isCorrect: false,
        type: 'deletion'
      });
    } else if (original === attempt) {
      // Perfect match
      diffs.push({
        original,
        attempt,
        isCorrect: true,
        type: 'match'
      });
    } else {
      // Substitution
      diffs.push({
        original,
        attempt,
        isCorrect: false,
        type: 'substitution'
      });
    }
  }
  
  return diffs;
}

/**
 * Generate masked hint feedback
 */
export function generateMaskedHint(originalTokens: string[], tokenDiffs: TokenDiff[]): string {
  return originalTokens.map((token, index) => {
    const diff = tokenDiffs[index];
    if (diff && diff.isCorrect) {
      return token;
    } else {
      // Mask incorrect/missing words with asterisks matching original length
      return '*'.repeat(Math.max(token.length, 3));
    }
  }).join(' ');
}

/**
 * Main comparison function
 */
export function compareTexts(original: string, attempt: string): ComparisonResult {
  const originalTokens = tokenizeForComparison(original);
  const attemptTokens = tokenizeForComparison(attempt);
  
  const tokenDiffs = computeTokenDiff(originalTokens, attemptTokens);
  
  const correctTokens = tokenDiffs.filter(diff => 
    diff.isCorrect && diff.type === 'match'
  ).length;
  
  const totalTokens = Math.max(originalTokens.length, 1); // Avoid division by zero
  const score = correctTokens / totalTokens;
  const isPerfect = score === 1 && originalTokens.length === attemptTokens.length;
  
  const feedback = generateMaskedHint(originalTokens, tokenDiffs);
  
  return {
    score,
    totalTokens,
    correctTokens,
    feedback,
    tokenDiffs,
    isPerfect
  };
}

/**
 * Check if answer is acceptable (perfect or near-perfect for long sentences)
 */
export function isAnswerAcceptable(result: ComparisonResult, toleranceMode: boolean = false): boolean {
  if (result.isPerfect) return true;
  
  // For MVP, require perfect match. Later can add tolerance for long sentences
  if (toleranceMode && result.totalTokens >= 8) {
    // Allow 1 error for sentences >= 8 words
    return (result.totalTokens - result.correctTokens) <= 1;
  }
  
  return false;
}


C:\Users\User\Desktop\jink-demo\src\utils\errorUtils.ts

// Add to existing error handling
export const handleAudioError = (error: Error) => {
  console.error('Audio playback error:', error);
  
  // Add user-friendly error messages
  if (error.message.includes('CORS')) {
    return 'Audio file cannot be loaded due to security restrictions';
  }
  
  if (error.message.includes('network')) {
    return 'Network error - please check your connection';
  }
  
  return 'Audio playback failed - please try again';
};

C:\Users\User\Desktop\jink-demo\src\utils\sentenceFragmentSplitter.ts

// Complete sentenceFragmentSplitter.ts with all missing exports
export interface FragmentData {
  text: string;
  wordCount: number;
  isLong: boolean;
  isShort: boolean;
  isEmpty: boolean;
  canSplit: boolean;
}

export interface SplitPoint {
  position: number;
  character: string;
  reason: string;
  priority: 'high' | 'medium' | 'low';
}

export interface FragmentValidation {
  totalFragments: number;
  optimalRange: boolean; // 15-25 fragments
  longFragments: number; // >15 words
  shortFragments: number; // <4 words
  emptyFragments: number;
  averageWordCount: number;
}

// Article stats interface for compatibility
export interface ArticleStats {
  text: {
    characters: number;
    words: number;
    estimatedReadingTime: number;
  };
  fragments: {
    count: number;
    validation: FragmentValidation;
    list: FragmentData[];
  };
}

const MAX_WORDS_PER_FRAGMENT = 20;
const MIN_WORDS_PER_FRAGMENT = 2;
const OPTIMAL_WORDS_PER_FRAGMENT = 12;

export const isOptimalLength = (fragment: string): boolean => {
  const wordCount = fragment.split(/\s+/).filter(w => w.length > 0).length;
  return wordCount >= (OPTIMAL_WORDS_PER_FRAGMENT - 3) && 
         wordCount <= (OPTIMAL_WORDS_PER_FRAGMENT + 3);
};


/**
 * Simple fragment splitter focusing ONLY on periods and commas
 */
export const splitIntoSentenceFragments = (text: string): string[] => {
  if (!text || typeof text !== 'string') return [];
  
  // Clean and normalize the text
  const cleanText = text
    .replace(/\s+/g, ' ') // Normalize whitespace
    .trim();
    
  if (!cleanText) return [];
  
  // Step 1: Split by sentence endings (periods followed by space and capital letter)
  const sentences = cleanText
    .split(/\.(?=\s+[A-Z])/) // Split on period followed by space and capital
    .map(sentence => sentence.trim())
    .filter(sentence => sentence.length > 0)
    .map((sentence, index, array) => {
      // Add back period if it was removed (except for last sentence if it already ends properly)
      if (index < array.length - 1 && !sentence.endsWith('.')) {
        return sentence + '.';
      }
      return sentence;
    });
  
  const fragments: string[] = [];
  
  // Step 2: Process each sentence
  for (const sentence of sentences) {
    const words = sentence.split(/\s+/);
    
    // If sentence is short enough, keep as single fragment
    if (words.length <= MAX_WORDS_PER_FRAGMENT) {
      fragments.push(sentence);
      continue;
    }
    
    // For long sentences, split by commas
    const commaParts = sentence.split(/,(?=\s)/); // Split on comma followed by space
    let currentFragment = '';
    
    for (let i = 0; i < commaParts.length; i++) {
      const part = commaParts[i].trim();
      if (!part) continue;
      
      // Add comma back (except for last part)
      const partWithComma = (i < commaParts.length - 1 && !part.endsWith(',')) 
        ? part + ',' 
        : part;
      
      const testFragment = currentFragment 
        ? `${currentFragment} ${partWithComma}` 
        : partWithComma;
      
      const testWords = testFragment.split(/\s+/).length;
      
      // If adding this part exceeds limit, save current and start new
      if (testWords > MAX_WORDS_PER_FRAGMENT && currentFragment) {
        fragments.push(currentFragment);
        currentFragment = partWithComma;
      } else {
        currentFragment = testFragment;
      }
    }
    
    // Don't forget the last fragment
    if (currentFragment) {
      fragments.push(currentFragment);
    }
  }
  
  return fragments.filter(fragment => fragment.trim().length > 0);
};

/**
 * Find split points in text - simplified to focus on periods and commas only
 */
export const findSplitPoints = (text: string): SplitPoint[] => {
  const points: SplitPoint[] = [];
  
  // Find periods followed by space and capital letter
  const periodRegex = /\.(?=\s+[A-Z])/g;
  let match;
  while ((match = periodRegex.exec(text)) !== null) {
    points.push({
      position: match.index + 1, // After the period
      character: '. ',
      reason: 'Sentence boundary',
      priority: 'high'
    });
  }
  
  // Find commas followed by space (but not within parentheses or quotes)
  const commaRegex = /,(?=\s+[a-zA-Z])/g;
  while ((match = commaRegex.exec(text)) !== null) {
    // Simple check to avoid splitting within parentheses
    const beforeText = text.substring(0, match.index);
    const openParens = (beforeText.match(/\(/g) || []).length;
    const closeParens = (beforeText.match(/\)/g) || []).length;
    
    // Only split if we're not inside parentheses
    if (openParens === closeParens) {
      points.push({
        position: match.index + 1, // After the comma
        character: ', ',
        reason: 'Comma break',
        priority: 'medium'
      });
    }
  }
  
  // Sort by priority and position
  return points.sort((a, b) => {
    const priorityOrder = { 'high': 0, 'medium': 1, 'low': 2 };
    if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
      return priorityOrder[a.priority] - priorityOrder[b.priority];
    }
    return a.position - b.position;
  });
};

/**
 * Split fragment at exact position
 */
export const splitFragmentAt = (
  fragments: string[], 
  fragmentIndex: number, 
  splitPosition: number
): string[] => {
  if (fragmentIndex < 0 || fragmentIndex >= fragments.length) return fragments;
  
  const fragment = fragments[fragmentIndex];
  if (splitPosition <= 0 || splitPosition >= fragment.length) return fragments;
  
  const first = fragment.substring(0, splitPosition).trim();
  const second = fragment.substring(splitPosition).trim();
  
  if (!first || !second) return fragments;
  
  const result = [...fragments];
  result.splice(fragmentIndex, 1, first, second);
  return result;
};

/**
 * Merge two consecutive fragments
 */
export const mergeFragments = (fragments: string[], index: number): string[] => {
  if (index < 0 || index >= fragments.length - 1) return fragments;
  
  const merged = `${fragments[index]} ${fragments[index + 1]}`;
  const result = [...fragments];
  result.splice(index, 2, merged);
  return result;
};

/**
 * Validate individual fragment
 */
export const validateFragment = (fragment: string): FragmentData => {
  const text = fragment.trim();
  const words = text.split(/\s+/).filter(word => word.length > 0);
  const wordCount = words.length;
  
  return {
    text,
    wordCount,
    isLong: wordCount > MAX_WORDS_PER_FRAGMENT,
    isShort: wordCount < MIN_WORDS_PER_FRAGMENT && wordCount > 0,
    isEmpty: text.length === 0,
    canSplit: findSplitPoints(text).length > 0
  };
};

/**
 * Validate entire fragments array
 */
export const validateFragments = (fragments: string[]): FragmentValidation => {
  const fragmentData = fragments.map(validateFragment);
  const totalWords = fragmentData.reduce((sum, f) => sum + f.wordCount, 0);
  
  return {
    totalFragments: fragments.length,
    optimalRange: fragments.length >= 15 && fragments.length <= 25,
    longFragments: fragmentData.filter(f => f.isLong).length,
    shortFragments: fragmentData.filter(f => f.isShort).length,
    emptyFragments: fragmentData.filter(f => f.isEmpty).length,
    averageWordCount: totalWords > 0 ? Math.round(totalWords / fragments.length) : 0
  };
};

/**
 * Smart split using detected split points
 */
export const smartSplitFragment = (fragments: string[], fragmentIndex: number): string[] => {
  if (fragmentIndex < 0 || fragmentIndex >= fragments.length) return fragments;
  
  const fragment = fragments[fragmentIndex];
  const splitPoints = findSplitPoints(fragment);
  
  if (splitPoints.length === 0) {
    // Fallback: split at middle word boundary
    const words = fragment.split(/\s+/);
    const middleIndex = Math.floor(words.length / 2);
    const middlePosition = words.slice(0, middleIndex).join(' ').length + 1;
    return splitFragmentAt(fragments, fragmentIndex, middlePosition);
  }
  
  // Use the first high-priority split point
  const bestSplit = splitPoints.find(sp => sp.priority === 'high') || splitPoints[0];
  return splitFragmentAt(fragments, fragmentIndex, bestSplit.position);
};

// Fragment Editor with History
export interface FragmentHistory {
  fragments: string[];
  timestamp: number;
  action: string;
}

export class FragmentEditor {
  private history: FragmentHistory[] = [];
  private currentIndex = -1;
  private maxHistorySize = 50;

  constructor(initialFragments: string[]) {
    this.saveState([...initialFragments], 'Initial');
  }

  private saveState(fragments: string[], action: string): void {
    if (this.currentIndex < this.history.length - 1) {
      this.history = this.history.slice(0, this.currentIndex + 1);
    }

    this.history.push({
      fragments: [...fragments],
      timestamp: Date.now(),
      action
    });

    if (this.history.length > this.maxHistorySize) {
      this.history = this.history.slice(-this.maxHistorySize);
    }

    this.currentIndex = this.history.length - 1;
  }

  merge(fragments: string[], index: number): string[] {
    const result = mergeFragments(fragments, index);
    this.saveState(result, `Merge fragments ${index} and ${index + 1}`);
    return result;
  }

  split(fragments: string[], index: number, position?: number): string[] {
    const newFragments = position !== undefined 
      ? splitFragmentAt(fragments, index, position)
      : smartSplitFragment(fragments, index);
    this.saveState(newFragments, `Split fragment ${index}`);
    return newFragments;
  }

  edit(fragments: string[], index: number, newText: string): string[] {
    const newFragments = [...fragments];
    newFragments[index] = newText;
    this.saveState(newFragments, `Edit fragment ${index}`);
    return newFragments;
  }

  undo(): string[] | null {
    if (this.currentIndex <= 0) return null;
    this.currentIndex--;
    return [...this.history[this.currentIndex].fragments];
  }

  redo(): string[] | null {
    if (this.currentIndex >= this.history.length - 1) return null;
    this.currentIndex++;
    return [...this.history[this.currentIndex].fragments];
  }

  canUndo(): boolean {
    return this.currentIndex > 0;
  }

  canRedo(): boolean {
    return this.currentIndex < this.history.length - 1;
  }

  getCurrentState(): string[] {
    return this.currentIndex >= 0 ? [...this.history[this.currentIndex].fragments] : [];
  }
}

// MISSING EXPORTS - Adding these functions that are needed by other components

/**
 * Validate article name format
 */
export const validateArticleName = (name: string): boolean => {
  const regex = /^[a-zA-Z0-9-_]{3,50}$/;
  return regex.test(name);
};

/**
 * Suggest article name from title
 */
export const suggestArticleNameFromTitle = (title: string): string => {
  return title
    .toLowerCase()
    .replace(/[^a-zA-Z0-9\s-]/g, '') // Remove special chars except hyphens
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .substring(0, 40) // Limit length
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
};

/**
 * Get fragment statistics for TextInput component
 */
export const getFragmentStats = (text: string): ArticleStats => {
  const fragments = splitIntoSentenceFragments(text);
  const validation = validateFragments(fragments);
  const characterCount = text.length;
  const wordCount = text.split(/\s+/).filter(word => word.length > 0).length;
  const estimatedReadingTime = Math.ceil(wordCount / 200); // Average reading speed

  return {
    text: {
      characters: characterCount,
      words: wordCount,
      estimatedReadingTime
    },
    fragments: {
      count: fragments.length,
      validation,
      list: fragments.map(validateFragment)
    }
  };
};

// Backward compatibility exports
export const splitIntoSentences = splitIntoSentenceFragments;
export const validateSentence = validateFragment;
export const validateArticle = validateFragments;
export const mergeSentences = mergeFragments;
export const splitSentence = splitFragmentAt;

C:\Users\User\Desktop\jink-demo\src\utils\sentenceSplitter.ts

// src/utils/sentenceSplitter.ts
import { validateSentence } from './sentenceFragmentSplitter';

export interface SentenceData {
  text: string;
  wordCount: number;
  isLong: boolean;
  isShort: boolean;
  isEmpty: boolean;
}

export interface SentenceValidation {
  totalSentences: number;
  optimalRange: boolean; // 15-25 sentences
  longSentences: number; // >15 words
  shortSentences: number; // <5 words
  emptySentences: number;
  averageWordCount: number;
}

// /**
//  * Split text into sentences using regex-based approach
//  * This provides immediate client-side feedback to teachers
//  */
// export const splitIntoSentences = (text: string): string[] => {
//   if (!text || typeof text !== 'string') {
//     return [];
//   }

//   return text
//     // Normalize whitespace and newlines
//     .replace(/\s+/g, ' ')
//     .trim()
    
//     // Handle common abbreviations that shouldn't end sentences
//     .replace(/\b(Mr|Mrs|Ms|Dr|Prof|Inc|Ltd|etc|vs|e\.g|i\.e)\./gi, '$1<ABBREV>')
    
//     // Handle decimal numbers
//     .replace(/\d+\.\d+/g, (match) => match.replace('.', '<DECIMAL>'))
    
//     // Split on sentence endings followed by whitespace and capital letter or end of string
//     .split(/[.!?]+\s+(?=[A-Z])|[.!?]+\s*$/)
    
//     // Clean up and restore abbreviations
//     .map(sentence => 
//       sentence
//         .replace(/<ABBREV>/g, '.')
//         .replace(/<DECIMAL>/g, '.')
//         .trim()
//     )
    
//     // Filter out empty sentences
//     .filter(sentence => sentence.length > 0)
    
//     // Ensure sentences end with proper punctuation
//     .map(sentence => {
//       const lastChar = sentence.slice(-1);
//       if (!['.', '!', '?'].includes(lastChar)) {
//         return sentence + '.';
//       }
//       return sentence;
//     });
// };

// /**
//  * Validate individual sentence
//  */
// export const validateSentence = (sentence: string): SentenceData => {
//   const text = sentence.trim();
//   const words = text.split(/\s+/).filter(word => word.length > 0);
//   const wordCount = words.length;

//   return {
//     text,
//     wordCount,
//     isLong: wordCount > 15,
//     isShort: wordCount < 5 && wordCount > 0,
//     isEmpty: text.length === 0
//   };
// };

// /**
//  * Validate entire article's sentence structure
//  */
// export const validateArticle = (sentences: string[]): SentenceValidation => {
//   const sentenceData = sentences.map(validateSentence);
//   const totalWords = sentenceData.reduce((sum, s) => sum + s.wordCount, 0);

//   return {
//     totalSentences: sentences.length,
//     optimalRange: sentences.length >= 15 && sentences.length <= 25,
//     longSentences: sentenceData.filter(s => s.isLong).length,
//     shortSentences: sentenceData.filter(s => s.isShort).length,
//     emptySentences: sentenceData.filter(s => s.isEmpty).length,
//     averageWordCount: totalWords > 0 ? Math.round(totalWords / sentences.length) : 0
//   };
// };

// /**
//  * Merge two consecutive sentences
//  */
// export const mergeSentences = (sentences: string[], index: number): string[] => {
//   if (index < 0 || index >= sentences.length - 1) {
//     return sentences;
//   }

//   const newSentences = [...sentences];
//   const mergedText = `${sentences[index].replace(/[.!?]+$/, '')} ${sentences[index + 1]}`;
  
//   newSentences.splice(index, 2, mergedText);
//   return newSentences;
// };

// /**
//  * Split a sentence at a specific position
//  */
// export const splitSentence = (sentences: string[], sentenceIndex: number, splitPosition: number): string[] => {
//   if (sentenceIndex < 0 || sentenceIndex >= sentences.length) {
//     return sentences;
//   }

//   const sentence = sentences[sentenceIndex];
//   if (splitPosition <= 0 || splitPosition >= sentence.length) {
//     return sentences;
//   }

//   const newSentences = [...sentences];
//   const firstPart = sentence.substring(0, splitPosition).trim();
//   const secondPart = sentence.substring(splitPosition).trim();

//   // Ensure proper punctuation
//   const firstSentence = firstPart.match(/[.!?]$/) ? firstPart : firstPart + '.';
//   const secondSentence = secondPart.charAt(0).toUpperCase() + secondPart.slice(1);

//   newSentences.splice(sentenceIndex, 1, firstSentence, secondSentence);
//   return newSentences;
// };

/**
 * Auto-suggest sentence improvements
 */
export const getSentenceSuggestions = (sentences: string[]): Array<{
  index: number;
  type: 'long' | 'short' | 'merge' | 'split';
  message: string;
  severity: 'warning' | 'suggestion';
}> => {
  const suggestions: Array<{
    index: number;
    type: 'long' | 'short' | 'merge' | 'split';
    message: string;
    severity: 'warning' | 'suggestion';
  }> = [];

  sentences.forEach((sentence, index) => {
    const validation = validateSentence(sentence);

    if (validation.isLong) {
      suggestions.push({
        index,
        type: 'long',
        message: `This sentence has ${validation.wordCount} words. Consider splitting it for better dictation.`,
        severity: 'warning'
      });
    }

    if (validation.isShort && !validation.isEmpty) {
      suggestions.push({
        index,
        type: 'short',
        message: `This sentence is quite short (${validation.wordCount} words). Consider merging with adjacent sentence.`,
        severity: 'suggestion'
      });
    }
  });

  return suggestions;
};

// /**
//  * Generate article statistics for teacher review
//  */
// export const getArticleStats = (text: string) => {
//   const sentences = splitIntoSentences(text);
//   const validation = validateArticle(sentences);
//   const suggestions = getSentenceSuggestions(sentences);

//   const characterCount = text.length;
//   const wordCount = text.split(/\s+/).filter(word => word.length > 0).length;
//   const estimatedReadingTime = Math.ceil(wordCount / 200); // Average reading speed

//   return {
//     text: {
//       characters: characterCount,
//       words: wordCount,
//       estimatedReadingTime
//     },
//     sentences: {
//       count: sentences.length,
//       validation,
//       suggestions,
//       list: sentences.map(validateSentence)
//     }
//   };
// };

/**
 * Generate sentence ID from article name and order
 */
export const generateSentenceId = (articleName: string, order: number): string => {
  return `${articleName}_${order}`;
};

/**
 * Parse sentence ID to get article name and order
 */
export const parseSentenceId = (sentenceId: string): { articleName: string; order: number } | null => {
  const lastUnderscoreIndex = sentenceId.lastIndexOf('_');
  if (lastUnderscoreIndex === -1) {
    return null;
  }
  
  const articleName = sentenceId.substring(0, lastUnderscoreIndex);
  const orderStr = sentenceId.substring(lastUnderscoreIndex + 1);
  const order = parseInt(orderStr, 10);
  
  if (isNaN(order)) {
    return null;
  }
  
  return { articleName, order };
};

/**
 * Validate article name format
 */
export const validateArticleName = (name: string): boolean => {
  const regex = /^[a-zA-Z0-9_\-\(\)]{3,50}$/;
  return regex.test(name);
};

/**
 * Clean title to suggest article name
 */
export const suggestArticleNameFromTitle = (title: string): string => {
  return title.toLowerCase()
    .replace(/[^a-zA-Z0-9_\-]/g, '_')
    .replace(/_{2,}/g, '_')
    .replace(/^_|_$/g, '')
    .substring(0, 40);
};


export * from './sentenceFragmentSplitter';




C:\Users\User\Desktop\jink-demo\src\utils\testSessionUpload.ts

import type { DictationSession, FragmentProgress } from '../components/dictation/FragmentDictation';
import type { FragmentTiming } from '../hooks/useFragmentAudioPlayer';

// Mock session data for testing
export const createMockSession = (articleName: string = 'test-article'): DictationSession => {
  const mockFragments: FragmentTiming[] = [
    {
      fragmentIndex: 0,
      order: 1,
      text: 'Climate change affects global weather patterns.',
      startTime: 0.0,
      endTime: 3.2,
      duration: 3.2,
      wordCount: 6,
    },
    {
      fragmentIndex: 1,
      order: 2,
      text: 'Rising temperatures cause ice caps to melt.',
      startTime: 3.5,
      endTime: 6.8,
      duration: 3.3,
      wordCount: 7,
    },
  ];

  const mockProgress: FragmentProgress[] = [
    {
      fragmentIndex: 0,
      attempts: [
        {
          attempt: 'Climate change affects global weather patterns.',
          result: {
            score: 1.0,
            totalTokens: 6,
            correctTokens: 6,
            feedback: 'Perfect!',
            isPerfect: true,
            tokenDiffs: []
          },
          timestamp: new Date(Date.now() - 120000), // 2 minutes ago
        }
      ],
      status: 'correct',
      bestScore: 1.0,
      timeSpent: 45, // seconds
    },
    {
      fragmentIndex: 1,
      attempts: [
        {
          attempt: 'Rising temperatures cause ice caps to melt.',
          result: {
            score: 1.0,
            totalTokens: 7,
            correctTokens: 7,
            feedback: 'Excellent!',
            isPerfect: true,
            tokenDiffs: []
          },
          timestamp: new Date(Date.now() - 60000), // 1 minute ago
        }
      ],
      status: 'correct',
      bestScore: 1.0,
      timeSpent: 38, // seconds
    },
  ];

  return {
    articleName,
    articleTitle: 'Climate Change Impact',
    fragments: mockFragments,
    progress: mockProgress,
    currentFragmentIndex: 2, // Completed
    startTime: new Date(Date.now() - 180000), // 3 minutes ago
    completedFragments: 2,
    totalScore: 1.0,
    isCompleted: true,
  };
};

// Test function to verify upload flow
export const testSessionUpload = async () => {
  const session = createMockSession('climate-change-test');
  
  console.log('Testing session upload with mock data:', session);
  
  try {
    // This would be called in your actual component
    const { useServerDictationProgress } = await import('../hooks/useSessionUpload');
    const { saveSession } = useServerDictationProgress(session.articleName);
    
    await saveSession(session);
    console.log('✅ Session upload test successful');
    
    return true;
  } catch (error) {
    console.error('❌ Session upload test failed:', error);
    return false;
  }
};


C:\Users\User\Desktop\jink-demo\src\App.css

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


C:\Users\User\Desktop\jink-demo\src\App.tsx

import { Routes, Route, Navigate } from 'react-router-dom';
import { RoleGuard } from './routes/guards/RoleGuard';

// Import your existing pages
import Login from './pages/Login';
import AdminDashboard from './pages/AdminDashboard';
// import TeacherDashboard from './pages/TeacherDashboard';
// import StudentDashboard from './pages/StudentDashboard';
import Users from './pages/Users';
import Unauthorized from './pages/Unauthorized';
import NotFound from './pages/NotFound';

// Import new admin pages
import Groups from './pages/admin/Groups';
import BulkOperations from './pages/admin/BulkOperations';

import UserDetail from './pages/UserDetail';
import UserProfile from './pages/UserProfile';
import Navbar from './components/Navbar';
import { useLocation } from 'react-router-dom';


import { TeacherDashboard, ArticleList, ArticleUpload, ArticleDetail } from './pages/teacher';
import ArticleEdit from './pages/teacher/ArticleEdit';

import DictationPracticePage from './pages/student/DictationPractice';

import StudentDashboard from './pages/student/StudentDashboard';
import StudentArticleList from './pages/student/StudentArticleList';

import AdminArticlesDashboard from './pages/admin/AdminArticlesDashboard';
import AdminArticleDetail from './pages/admin/AdminArticleDetail';
import StudentAnalytics from './pages/teacher/StudentAnalytics';
import StudentArticleProgressPage from './pages/student/StudentArticleProgressPage';
import TeacherAnalytics from './pages/teacher/TeacherAnalytics';


function App() {

  const location = useLocation();
  const hideNavbar = ["/login", "/unauthorized"].includes(location.pathname);
  // Add to your main index.tsx or App.tsx
  // Preload audio files for better performance
  // const preloadCriticalAudio = (audioUrls: string[]) => {
  //   audioUrls.forEach(url => {
  //     const audio = new Audio();
  //     audio.preload = 'metadata';
  //     audio.src = url;
  //   });
  // };

  return (
    <>
      {!hideNavbar && <Navbar />}
      <Routes>
        {/* Public routes */}
        <Route path="/login" element={<Login />} />
        <Route path="/unauthorized" element={<Unauthorized />} />


        <Route element={<RoleGuard />}>
          <Route path="/profile" element={<UserProfile />} />
        </Route>

        {/* Admin routes */}
        <Route element={<RoleGuard allow={["admin"]} />}>
          {/* <Route path="/admin" element={<AdminDashboard />} />
          <Route path="/admin/users" element={<Users />} />
          <Route path="/admin/groups" element={<Groups />} />
          <Route path="/admin/bulk-operations" element={<BulkOperations />} /> */}


            <Route path="/admin" element={<AdminDashboard />} />
            <Route path="/admin/users" element={<Users />} />
            <Route path="/admin/users/:username" element={<UserDetail />} />
            <Route path="/admin/groups" element={<Groups />} />
            <Route path="/admin/bulk-operations" element={<BulkOperations />} />

            <Route path="/admin/articles" element={<AdminArticlesDashboard />} />
            <Route path="/admin/articles/:articleName" element={<AdminArticleDetail />} />
        </Route>

        {/* Teacher routes */}
        <Route element={<RoleGuard allow={["teacher"]} />}>
          <Route path="/teacher" element={<TeacherDashboard />} />
          <Route path="/teacher/dashboard" element={<TeacherDashboard />} />
          <Route path="/teacher/articles" element={<ArticleList />} />
          <Route path="/teacher/articles/create" element={<ArticleUpload />} />
          <Route path="/teacher/articles/:articleName" element={<ArticleDetail />} />
          <Route path="/teacher/articles/:articleName/edit" element={<ArticleEdit />} />
          <Route path="/teacher/practice/:articleName" element={<DictationPracticePage />} />
          <Route path="/teacher/analytics/students" element={<StudentAnalytics />} />
          <Route path="/teacher/analytics" element={<TeacherAnalytics />} />
        </Route>

        {/* Student routes */}
        <Route element={<RoleGuard allow={["student"]} />}>
          <Route path="/student" element={<StudentDashboard />} />
          <Route path="/student/dashboard" element={<StudentDashboard />} />
          <Route path="/student/articles" element={<StudentArticleList />} />
           <Route path="student/practice/:articleName" element={<DictationPracticePage />} /> 
           <Route path="/student/progress/:articleName" element={<StudentArticleProgressPage />} />
        </Route>


        {/* Teacher/Admin preview*/}
        <Route element={<RoleGuard allow={['teacher', 'admin']} />}>
          <Route path="/teacher/practice/:articleName" element={<DictationPracticePage />} />
        </Route>

        {/* Default redirect */}
        <Route path="/" element={<Navigate to="/login" replace />} />
        <Route path="*" element={<NotFound />} />
      </Routes>    
    </>

  );
}

export default App;


C:\Users\User\Desktop\jink-demo\src\App2.css


* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  margin: 20px;
  padding: 0;
}

h1 {
  margin-top: 0;
  font-size: 22px;
}

h2 {
  margin-top: 0;
  font-size: 20px;
}

h3 {
  margin-top: 0;
  font-size: 18px;
}

h4 {
  margin-top: 0;
  font-size: 16px;
}

h5 {
  margin-top: 0;
  font-size: 14px;
}

h6 {
  margin-top: 0;
  font-size: 12px;
}

code {
  font-size: 1.2em;
}

ul {
  padding-inline-start: 20px;
}

* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  margin: 20px;
  padding: 0;
}

.square {
  background: #fff;
  border: 1px solid #999;
  float: left;
  font-size: 24px;
  font-weight: bold;
  line-height: 34px;
  height: 34px;
  margin-right: -1px;
  margin-top: -1px;
  padding: 0;
  text-align: center;
  width: 34px;
}

.board-row:after {
  clear: both;
  content: '';
  display: table;
}

.status {
  margin-bottom: 10px;
}
.game {
  display: flex;
  flex-direction: row;
}

.game-info {
  margin-left: 20px;
}



C:\Users\User\Desktop\jink-demo\src\App2.tsx

// import { useState } from 'react'
// // import viteLogo from '/vite.svg'
// // import './App.css'
// import Square from './Board'
import {Game} from './Board'
import './App2.css'

function App2() {
  // const [count, setCount] = useState(0)

  return (
    <>
      <Game></Game>
    </>
  )
}

export default App2


C:\Users\User\Desktop\jink-demo\src\Board.tsx

// import React from "react";
import { useState } from "react";

// https://react.dev/learn/tutorial-tic-tac-toe#lifting-state-up-again
interface SquareProps {
  value: string;
  // Or value: string | number | null;
  onSquareClick: () => void;
}

interface BoardProps {
  xIsNext: boolean;
  squares: string[];
  onPlay: (sq: string[]) => void;
}

function Square({ value, onSquareClick }: SquareProps) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function calculateWinner(squares: String[]) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

export function Board({ xIsNext, squares, onPlay }: BoardProps) {
  function handleClick(i: number) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = "X";
    } else {
      nextSquares[i] = "O";
    }
    onPlay(nextSquares);
  }

  // const [squares, setSquares] = useState(Array(9).fill(''));
  // const [xIsNext, setXIsNext] = useState(true);

  // function handleClick(i:number) {

  //     if (squares[i] || calculateWinner(squares)) {
  //         return;
  //     }

  //     const nextSquares = squares.slice();
  //     if (xIsNext) {
  //     nextSquares[i] = "X";
  //     } else {
  //     nextSquares[i] = "O";
  //     }
  //     setSquares(nextSquares);
  //     setXIsNext(!xIsNext);
  // }

  const winner = calculateWinner(squares);
  let winstatus;
  if (winner) {
    winstatus = "Winner: " + winner;
  } else {
    winstatus = "Next player: " + (xIsNext ? "X" : "O");
  }

  return (
    <>
      <div className="status">{winstatus}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

export function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill("")]);
  // const currentSquares = history[history.length - 1];
  const [currentMove, setCurrentMove] = useState(0);
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares: string[]) {
  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
  setHistory(nextHistory);
  setCurrentMove(nextHistory.length - 1);
    setXIsNext(!xIsNext);
  }

  function jumpTo(nextMove: number) {
    setCurrentMove(nextMove);
    setXIsNext(nextMove % 2 === 0);
  }

  const moves = history.map((_squares, move) => {
    let description;
    if (move > 0) {
      description = "Go to move #" + move;
    } else {
      description = "Go to game start";
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });



  
  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

export default Square;


C:\Users\User\Desktop\jink-demo\src\index.css

@import "tailwindcss";

/* @tailwind base;
@tailwind components;
@tailwind utilities; */

/* :root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
} */
/* Add to your existing CSS */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-clamp: 2; 
}

.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-clamp: 3;
}

/* Audio player custom styles */
.audio-player-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

C:\Users\User\Desktop\jink-demo\src\main.tsx

// src/main.tsx (update your existing file)
import './index.css';
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { AuthProvider } from './context/AuthContext';
import App from './App';




// Create a client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: (failureCount, error: any) => {
        // Don't retry on 401/403 errors
        if (error?.response?.status === 401 || error?.response?.status === 403) {
          return false;
        }
        return failureCount < 3;
      },
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000,   // 10 minutes
    },
  },
});

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <QueryClientProvider client={queryClient}>
        <AuthProvider>
          <App />
        </AuthProvider>
        <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
    </BrowserRouter>
  </React.StrictMode>
);


C:\Users\User\Desktop\jink-demo\src\RouterApp.tsx


import {
  BrowserRouter,
  Routes,
  Route,
  Link,
  Outlet,
} from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import ProtectedRoute from './routes/ProtectedRoute';

import Home from './pages/Home';
import About from './pages/About';
import Users from './pages/Users';
import UserDetail from './pages/UserDetail';
import Login from './pages/Login';
import NotFound from './pages/NotFound';

function Layout() {
  return (
    <>
      <nav>
        <Link to="/">Home</Link> | <Link to="/about">About</Link> |{' '}
        <Link to="/users">Users</Link>
      </nav>
      <hr />
      <Outlet />
    </>
  );
}

export default function RouterApp() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route element={<Layout />}>
            <Route index element={<Home />} />
            <Route path="about" element={<About />} />

            {/* Public route */}
            <Route path="login" element={<Login />} />

            {/* Private routes */}
            <Route element={<ProtectedRoute />}>
              <Route path="users" element={<Users />} />
              <Route path="users/:username" element={<UserDetail />} />
            </Route>

            <Route path="*" element={<NotFound />} />
          </Route>
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  );
}


C:\Users\User\Desktop\jink-demo\src\vite-env.d.ts

/// <reference types="vite/client" />

